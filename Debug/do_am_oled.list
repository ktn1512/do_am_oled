
do_am_oled.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00008410  08000110  08000110  00001110  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000694  08008520  08008520  00009520  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08008bb4  08008bb4  0000a1d4  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  08008bb4  08008bb4  00009bb4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08008bbc  08008bbc  0000a1d4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08008bbc  08008bbc  00009bbc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08008bc0  08008bc0  00009bc0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000001d4  20000000  08008bc4  0000a000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000005f4  200001d4  08008d98  0000a1d4  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200007c8  08008d98  0000a7c8  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0000a1d4  2**0
                  CONTENTS, READONLY
 12 .debug_info   00008253  00000000  00000000  0000a1fd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001bae  00000000  00000000  00012450  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000910  00000000  00000000  00014000  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_macro  000185ed  00000000  00000000  00014910  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_line   0000bffb  00000000  00000000  0002cefd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_str    00089029  00000000  00000000  00038ef8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .comment      00000043  00000000  00000000  000c1f21  2**0
                  CONTENTS, READONLY
 19 .debug_rnglists 000006ce  00000000  00000000  000c1f64  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  000039f0  00000000  00000000  000c2634  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000066  00000000  00000000  000c6024  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	@ (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	@ (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	@ (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	200001d4 	.word	0x200001d4
 800012c:	00000000 	.word	0x00000000
 8000130:	08008508 	.word	0x08008508

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	@ (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	@ (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	@ (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	200001d8 	.word	0x200001d8
 800014c:	08008508 	.word	0x08008508

08000150 <strlen>:
 8000150:	4603      	mov	r3, r0
 8000152:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000156:	2a00      	cmp	r2, #0
 8000158:	d1fb      	bne.n	8000152 <strlen+0x2>
 800015a:	1a18      	subs	r0, r3, r0
 800015c:	3801      	subs	r0, #1
 800015e:	4770      	bx	lr

08000160 <__aeabi_drsub>:
 8000160:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000164:	e002      	b.n	800016c <__adddf3>
 8000166:	bf00      	nop

08000168 <__aeabi_dsub>:
 8000168:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

0800016c <__adddf3>:
 800016c:	b530      	push	{r4, r5, lr}
 800016e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000172:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000176:	ea94 0f05 	teq	r4, r5
 800017a:	bf08      	it	eq
 800017c:	ea90 0f02 	teqeq	r0, r2
 8000180:	bf1f      	itttt	ne
 8000182:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000186:	ea55 0c02 	orrsne.w	ip, r5, r2
 800018a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800018e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000192:	f000 80e2 	beq.w	800035a <__adddf3+0x1ee>
 8000196:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800019a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800019e:	bfb8      	it	lt
 80001a0:	426d      	neglt	r5, r5
 80001a2:	dd0c      	ble.n	80001be <__adddf3+0x52>
 80001a4:	442c      	add	r4, r5
 80001a6:	ea80 0202 	eor.w	r2, r0, r2
 80001aa:	ea81 0303 	eor.w	r3, r1, r3
 80001ae:	ea82 0000 	eor.w	r0, r2, r0
 80001b2:	ea83 0101 	eor.w	r1, r3, r1
 80001b6:	ea80 0202 	eor.w	r2, r0, r2
 80001ba:	ea81 0303 	eor.w	r3, r1, r3
 80001be:	2d36      	cmp	r5, #54	@ 0x36
 80001c0:	bf88      	it	hi
 80001c2:	bd30      	pophi	{r4, r5, pc}
 80001c4:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80001c8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001cc:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 80001d0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001d4:	d002      	beq.n	80001dc <__adddf3+0x70>
 80001d6:	4240      	negs	r0, r0
 80001d8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001dc:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 80001e0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80001e4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80001e8:	d002      	beq.n	80001f0 <__adddf3+0x84>
 80001ea:	4252      	negs	r2, r2
 80001ec:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80001f0:	ea94 0f05 	teq	r4, r5
 80001f4:	f000 80a7 	beq.w	8000346 <__adddf3+0x1da>
 80001f8:	f1a4 0401 	sub.w	r4, r4, #1
 80001fc:	f1d5 0e20 	rsbs	lr, r5, #32
 8000200:	db0d      	blt.n	800021e <__adddf3+0xb2>
 8000202:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000206:	fa22 f205 	lsr.w	r2, r2, r5
 800020a:	1880      	adds	r0, r0, r2
 800020c:	f141 0100 	adc.w	r1, r1, #0
 8000210:	fa03 f20e 	lsl.w	r2, r3, lr
 8000214:	1880      	adds	r0, r0, r2
 8000216:	fa43 f305 	asr.w	r3, r3, r5
 800021a:	4159      	adcs	r1, r3
 800021c:	e00e      	b.n	800023c <__adddf3+0xd0>
 800021e:	f1a5 0520 	sub.w	r5, r5, #32
 8000222:	f10e 0e20 	add.w	lr, lr, #32
 8000226:	2a01      	cmp	r2, #1
 8000228:	fa03 fc0e 	lsl.w	ip, r3, lr
 800022c:	bf28      	it	cs
 800022e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000232:	fa43 f305 	asr.w	r3, r3, r5
 8000236:	18c0      	adds	r0, r0, r3
 8000238:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800023c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000240:	d507      	bpl.n	8000252 <__adddf3+0xe6>
 8000242:	f04f 0e00 	mov.w	lr, #0
 8000246:	f1dc 0c00 	rsbs	ip, ip, #0
 800024a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800024e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000252:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000256:	d31b      	bcc.n	8000290 <__adddf3+0x124>
 8000258:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800025c:	d30c      	bcc.n	8000278 <__adddf3+0x10c>
 800025e:	0849      	lsrs	r1, r1, #1
 8000260:	ea5f 0030 	movs.w	r0, r0, rrx
 8000264:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000268:	f104 0401 	add.w	r4, r4, #1
 800026c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000270:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 8000274:	f080 809a 	bcs.w	80003ac <__adddf3+0x240>
 8000278:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 800027c:	bf08      	it	eq
 800027e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000282:	f150 0000 	adcs.w	r0, r0, #0
 8000286:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800028a:	ea41 0105 	orr.w	r1, r1, r5
 800028e:	bd30      	pop	{r4, r5, pc}
 8000290:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000294:	4140      	adcs	r0, r0
 8000296:	eb41 0101 	adc.w	r1, r1, r1
 800029a:	3c01      	subs	r4, #1
 800029c:	bf28      	it	cs
 800029e:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80002a2:	d2e9      	bcs.n	8000278 <__adddf3+0x10c>
 80002a4:	f091 0f00 	teq	r1, #0
 80002a8:	bf04      	itt	eq
 80002aa:	4601      	moveq	r1, r0
 80002ac:	2000      	moveq	r0, #0
 80002ae:	fab1 f381 	clz	r3, r1
 80002b2:	bf08      	it	eq
 80002b4:	3320      	addeq	r3, #32
 80002b6:	f1a3 030b 	sub.w	r3, r3, #11
 80002ba:	f1b3 0220 	subs.w	r2, r3, #32
 80002be:	da0c      	bge.n	80002da <__adddf3+0x16e>
 80002c0:	320c      	adds	r2, #12
 80002c2:	dd08      	ble.n	80002d6 <__adddf3+0x16a>
 80002c4:	f102 0c14 	add.w	ip, r2, #20
 80002c8:	f1c2 020c 	rsb	r2, r2, #12
 80002cc:	fa01 f00c 	lsl.w	r0, r1, ip
 80002d0:	fa21 f102 	lsr.w	r1, r1, r2
 80002d4:	e00c      	b.n	80002f0 <__adddf3+0x184>
 80002d6:	f102 0214 	add.w	r2, r2, #20
 80002da:	bfd8      	it	le
 80002dc:	f1c2 0c20 	rsble	ip, r2, #32
 80002e0:	fa01 f102 	lsl.w	r1, r1, r2
 80002e4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002e8:	bfdc      	itt	le
 80002ea:	ea41 010c 	orrle.w	r1, r1, ip
 80002ee:	4090      	lslle	r0, r2
 80002f0:	1ae4      	subs	r4, r4, r3
 80002f2:	bfa2      	ittt	ge
 80002f4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80002f8:	4329      	orrge	r1, r5
 80002fa:	bd30      	popge	{r4, r5, pc}
 80002fc:	ea6f 0404 	mvn.w	r4, r4
 8000300:	3c1f      	subs	r4, #31
 8000302:	da1c      	bge.n	800033e <__adddf3+0x1d2>
 8000304:	340c      	adds	r4, #12
 8000306:	dc0e      	bgt.n	8000326 <__adddf3+0x1ba>
 8000308:	f104 0414 	add.w	r4, r4, #20
 800030c:	f1c4 0220 	rsb	r2, r4, #32
 8000310:	fa20 f004 	lsr.w	r0, r0, r4
 8000314:	fa01 f302 	lsl.w	r3, r1, r2
 8000318:	ea40 0003 	orr.w	r0, r0, r3
 800031c:	fa21 f304 	lsr.w	r3, r1, r4
 8000320:	ea45 0103 	orr.w	r1, r5, r3
 8000324:	bd30      	pop	{r4, r5, pc}
 8000326:	f1c4 040c 	rsb	r4, r4, #12
 800032a:	f1c4 0220 	rsb	r2, r4, #32
 800032e:	fa20 f002 	lsr.w	r0, r0, r2
 8000332:	fa01 f304 	lsl.w	r3, r1, r4
 8000336:	ea40 0003 	orr.w	r0, r0, r3
 800033a:	4629      	mov	r1, r5
 800033c:	bd30      	pop	{r4, r5, pc}
 800033e:	fa21 f004 	lsr.w	r0, r1, r4
 8000342:	4629      	mov	r1, r5
 8000344:	bd30      	pop	{r4, r5, pc}
 8000346:	f094 0f00 	teq	r4, #0
 800034a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800034e:	bf06      	itte	eq
 8000350:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000354:	3401      	addeq	r4, #1
 8000356:	3d01      	subne	r5, #1
 8000358:	e74e      	b.n	80001f8 <__adddf3+0x8c>
 800035a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800035e:	bf18      	it	ne
 8000360:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000364:	d029      	beq.n	80003ba <__adddf3+0x24e>
 8000366:	ea94 0f05 	teq	r4, r5
 800036a:	bf08      	it	eq
 800036c:	ea90 0f02 	teqeq	r0, r2
 8000370:	d005      	beq.n	800037e <__adddf3+0x212>
 8000372:	ea54 0c00 	orrs.w	ip, r4, r0
 8000376:	bf04      	itt	eq
 8000378:	4619      	moveq	r1, r3
 800037a:	4610      	moveq	r0, r2
 800037c:	bd30      	pop	{r4, r5, pc}
 800037e:	ea91 0f03 	teq	r1, r3
 8000382:	bf1e      	ittt	ne
 8000384:	2100      	movne	r1, #0
 8000386:	2000      	movne	r0, #0
 8000388:	bd30      	popne	{r4, r5, pc}
 800038a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800038e:	d105      	bne.n	800039c <__adddf3+0x230>
 8000390:	0040      	lsls	r0, r0, #1
 8000392:	4149      	adcs	r1, r1
 8000394:	bf28      	it	cs
 8000396:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 800039a:	bd30      	pop	{r4, r5, pc}
 800039c:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80003a0:	bf3c      	itt	cc
 80003a2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80003a6:	bd30      	popcc	{r4, r5, pc}
 80003a8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80003ac:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80003b0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80003b4:	f04f 0000 	mov.w	r0, #0
 80003b8:	bd30      	pop	{r4, r5, pc}
 80003ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003be:	bf1a      	itte	ne
 80003c0:	4619      	movne	r1, r3
 80003c2:	4610      	movne	r0, r2
 80003c4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003c8:	bf1c      	itt	ne
 80003ca:	460b      	movne	r3, r1
 80003cc:	4602      	movne	r2, r0
 80003ce:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003d2:	bf06      	itte	eq
 80003d4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003d8:	ea91 0f03 	teqeq	r1, r3
 80003dc:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 80003e0:	bd30      	pop	{r4, r5, pc}
 80003e2:	bf00      	nop

080003e4 <__aeabi_ui2d>:
 80003e4:	f090 0f00 	teq	r0, #0
 80003e8:	bf04      	itt	eq
 80003ea:	2100      	moveq	r1, #0
 80003ec:	4770      	bxeq	lr
 80003ee:	b530      	push	{r4, r5, lr}
 80003f0:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80003f4:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80003f8:	f04f 0500 	mov.w	r5, #0
 80003fc:	f04f 0100 	mov.w	r1, #0
 8000400:	e750      	b.n	80002a4 <__adddf3+0x138>
 8000402:	bf00      	nop

08000404 <__aeabi_i2d>:
 8000404:	f090 0f00 	teq	r0, #0
 8000408:	bf04      	itt	eq
 800040a:	2100      	moveq	r1, #0
 800040c:	4770      	bxeq	lr
 800040e:	b530      	push	{r4, r5, lr}
 8000410:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000414:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000418:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800041c:	bf48      	it	mi
 800041e:	4240      	negmi	r0, r0
 8000420:	f04f 0100 	mov.w	r1, #0
 8000424:	e73e      	b.n	80002a4 <__adddf3+0x138>
 8000426:	bf00      	nop

08000428 <__aeabi_f2d>:
 8000428:	0042      	lsls	r2, r0, #1
 800042a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800042e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000432:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000436:	bf1f      	itttt	ne
 8000438:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800043c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000440:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000444:	4770      	bxne	lr
 8000446:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800044a:	bf08      	it	eq
 800044c:	4770      	bxeq	lr
 800044e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000452:	bf04      	itt	eq
 8000454:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000458:	4770      	bxeq	lr
 800045a:	b530      	push	{r4, r5, lr}
 800045c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000460:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000464:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000468:	e71c      	b.n	80002a4 <__adddf3+0x138>
 800046a:	bf00      	nop

0800046c <__aeabi_ul2d>:
 800046c:	ea50 0201 	orrs.w	r2, r0, r1
 8000470:	bf08      	it	eq
 8000472:	4770      	bxeq	lr
 8000474:	b530      	push	{r4, r5, lr}
 8000476:	f04f 0500 	mov.w	r5, #0
 800047a:	e00a      	b.n	8000492 <__aeabi_l2d+0x16>

0800047c <__aeabi_l2d>:
 800047c:	ea50 0201 	orrs.w	r2, r0, r1
 8000480:	bf08      	it	eq
 8000482:	4770      	bxeq	lr
 8000484:	b530      	push	{r4, r5, lr}
 8000486:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 800048a:	d502      	bpl.n	8000492 <__aeabi_l2d+0x16>
 800048c:	4240      	negs	r0, r0
 800048e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000492:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000496:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 800049a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800049e:	f43f aed8 	beq.w	8000252 <__adddf3+0xe6>
 80004a2:	f04f 0203 	mov.w	r2, #3
 80004a6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004aa:	bf18      	it	ne
 80004ac:	3203      	addne	r2, #3
 80004ae:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004b2:	bf18      	it	ne
 80004b4:	3203      	addne	r2, #3
 80004b6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004ba:	f1c2 0320 	rsb	r3, r2, #32
 80004be:	fa00 fc03 	lsl.w	ip, r0, r3
 80004c2:	fa20 f002 	lsr.w	r0, r0, r2
 80004c6:	fa01 fe03 	lsl.w	lr, r1, r3
 80004ca:	ea40 000e 	orr.w	r0, r0, lr
 80004ce:	fa21 f102 	lsr.w	r1, r1, r2
 80004d2:	4414      	add	r4, r2
 80004d4:	e6bd      	b.n	8000252 <__adddf3+0xe6>
 80004d6:	bf00      	nop

080004d8 <__aeabi_dmul>:
 80004d8:	b570      	push	{r4, r5, r6, lr}
 80004da:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80004de:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 80004e2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80004e6:	bf1d      	ittte	ne
 80004e8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80004ec:	ea94 0f0c 	teqne	r4, ip
 80004f0:	ea95 0f0c 	teqne	r5, ip
 80004f4:	f000 f8de 	bleq	80006b4 <__aeabi_dmul+0x1dc>
 80004f8:	442c      	add	r4, r5
 80004fa:	ea81 0603 	eor.w	r6, r1, r3
 80004fe:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000502:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000506:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800050a:	bf18      	it	ne
 800050c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000510:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000514:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000518:	d038      	beq.n	800058c <__aeabi_dmul+0xb4>
 800051a:	fba0 ce02 	umull	ip, lr, r0, r2
 800051e:	f04f 0500 	mov.w	r5, #0
 8000522:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000526:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800052a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800052e:	f04f 0600 	mov.w	r6, #0
 8000532:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000536:	f09c 0f00 	teq	ip, #0
 800053a:	bf18      	it	ne
 800053c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000540:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000544:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000548:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800054c:	d204      	bcs.n	8000558 <__aeabi_dmul+0x80>
 800054e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000552:	416d      	adcs	r5, r5
 8000554:	eb46 0606 	adc.w	r6, r6, r6
 8000558:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800055c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000560:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000564:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000568:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800056c:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000570:	bf88      	it	hi
 8000572:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000576:	d81e      	bhi.n	80005b6 <__aeabi_dmul+0xde>
 8000578:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 800057c:	bf08      	it	eq
 800057e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000582:	f150 0000 	adcs.w	r0, r0, #0
 8000586:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800058a:	bd70      	pop	{r4, r5, r6, pc}
 800058c:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 8000590:	ea46 0101 	orr.w	r1, r6, r1
 8000594:	ea40 0002 	orr.w	r0, r0, r2
 8000598:	ea81 0103 	eor.w	r1, r1, r3
 800059c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80005a0:	bfc2      	ittt	gt
 80005a2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80005a6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80005aa:	bd70      	popgt	{r4, r5, r6, pc}
 80005ac:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80005b0:	f04f 0e00 	mov.w	lr, #0
 80005b4:	3c01      	subs	r4, #1
 80005b6:	f300 80ab 	bgt.w	8000710 <__aeabi_dmul+0x238>
 80005ba:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80005be:	bfde      	ittt	le
 80005c0:	2000      	movle	r0, #0
 80005c2:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 80005c6:	bd70      	pople	{r4, r5, r6, pc}
 80005c8:	f1c4 0400 	rsb	r4, r4, #0
 80005cc:	3c20      	subs	r4, #32
 80005ce:	da35      	bge.n	800063c <__aeabi_dmul+0x164>
 80005d0:	340c      	adds	r4, #12
 80005d2:	dc1b      	bgt.n	800060c <__aeabi_dmul+0x134>
 80005d4:	f104 0414 	add.w	r4, r4, #20
 80005d8:	f1c4 0520 	rsb	r5, r4, #32
 80005dc:	fa00 f305 	lsl.w	r3, r0, r5
 80005e0:	fa20 f004 	lsr.w	r0, r0, r4
 80005e4:	fa01 f205 	lsl.w	r2, r1, r5
 80005e8:	ea40 0002 	orr.w	r0, r0, r2
 80005ec:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 80005f0:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80005f4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80005f8:	fa21 f604 	lsr.w	r6, r1, r4
 80005fc:	eb42 0106 	adc.w	r1, r2, r6
 8000600:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000604:	bf08      	it	eq
 8000606:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800060a:	bd70      	pop	{r4, r5, r6, pc}
 800060c:	f1c4 040c 	rsb	r4, r4, #12
 8000610:	f1c4 0520 	rsb	r5, r4, #32
 8000614:	fa00 f304 	lsl.w	r3, r0, r4
 8000618:	fa20 f005 	lsr.w	r0, r0, r5
 800061c:	fa01 f204 	lsl.w	r2, r1, r4
 8000620:	ea40 0002 	orr.w	r0, r0, r2
 8000624:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000628:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800062c:	f141 0100 	adc.w	r1, r1, #0
 8000630:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000634:	bf08      	it	eq
 8000636:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800063a:	bd70      	pop	{r4, r5, r6, pc}
 800063c:	f1c4 0520 	rsb	r5, r4, #32
 8000640:	fa00 f205 	lsl.w	r2, r0, r5
 8000644:	ea4e 0e02 	orr.w	lr, lr, r2
 8000648:	fa20 f304 	lsr.w	r3, r0, r4
 800064c:	fa01 f205 	lsl.w	r2, r1, r5
 8000650:	ea43 0302 	orr.w	r3, r3, r2
 8000654:	fa21 f004 	lsr.w	r0, r1, r4
 8000658:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800065c:	fa21 f204 	lsr.w	r2, r1, r4
 8000660:	ea20 0002 	bic.w	r0, r0, r2
 8000664:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000668:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800066c:	bf08      	it	eq
 800066e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000672:	bd70      	pop	{r4, r5, r6, pc}
 8000674:	f094 0f00 	teq	r4, #0
 8000678:	d10f      	bne.n	800069a <__aeabi_dmul+0x1c2>
 800067a:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 800067e:	0040      	lsls	r0, r0, #1
 8000680:	eb41 0101 	adc.w	r1, r1, r1
 8000684:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000688:	bf08      	it	eq
 800068a:	3c01      	subeq	r4, #1
 800068c:	d0f7      	beq.n	800067e <__aeabi_dmul+0x1a6>
 800068e:	ea41 0106 	orr.w	r1, r1, r6
 8000692:	f095 0f00 	teq	r5, #0
 8000696:	bf18      	it	ne
 8000698:	4770      	bxne	lr
 800069a:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 800069e:	0052      	lsls	r2, r2, #1
 80006a0:	eb43 0303 	adc.w	r3, r3, r3
 80006a4:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80006a8:	bf08      	it	eq
 80006aa:	3d01      	subeq	r5, #1
 80006ac:	d0f7      	beq.n	800069e <__aeabi_dmul+0x1c6>
 80006ae:	ea43 0306 	orr.w	r3, r3, r6
 80006b2:	4770      	bx	lr
 80006b4:	ea94 0f0c 	teq	r4, ip
 80006b8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006bc:	bf18      	it	ne
 80006be:	ea95 0f0c 	teqne	r5, ip
 80006c2:	d00c      	beq.n	80006de <__aeabi_dmul+0x206>
 80006c4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006c8:	bf18      	it	ne
 80006ca:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ce:	d1d1      	bne.n	8000674 <__aeabi_dmul+0x19c>
 80006d0:	ea81 0103 	eor.w	r1, r1, r3
 80006d4:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80006d8:	f04f 0000 	mov.w	r0, #0
 80006dc:	bd70      	pop	{r4, r5, r6, pc}
 80006de:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006e2:	bf06      	itte	eq
 80006e4:	4610      	moveq	r0, r2
 80006e6:	4619      	moveq	r1, r3
 80006e8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ec:	d019      	beq.n	8000722 <__aeabi_dmul+0x24a>
 80006ee:	ea94 0f0c 	teq	r4, ip
 80006f2:	d102      	bne.n	80006fa <__aeabi_dmul+0x222>
 80006f4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80006f8:	d113      	bne.n	8000722 <__aeabi_dmul+0x24a>
 80006fa:	ea95 0f0c 	teq	r5, ip
 80006fe:	d105      	bne.n	800070c <__aeabi_dmul+0x234>
 8000700:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000704:	bf1c      	itt	ne
 8000706:	4610      	movne	r0, r2
 8000708:	4619      	movne	r1, r3
 800070a:	d10a      	bne.n	8000722 <__aeabi_dmul+0x24a>
 800070c:	ea81 0103 	eor.w	r1, r1, r3
 8000710:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000714:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000718:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800071c:	f04f 0000 	mov.w	r0, #0
 8000720:	bd70      	pop	{r4, r5, r6, pc}
 8000722:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000726:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800072a:	bd70      	pop	{r4, r5, r6, pc}

0800072c <__aeabi_ddiv>:
 800072c:	b570      	push	{r4, r5, r6, lr}
 800072e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000732:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000736:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800073a:	bf1d      	ittte	ne
 800073c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000740:	ea94 0f0c 	teqne	r4, ip
 8000744:	ea95 0f0c 	teqne	r5, ip
 8000748:	f000 f8a7 	bleq	800089a <__aeabi_ddiv+0x16e>
 800074c:	eba4 0405 	sub.w	r4, r4, r5
 8000750:	ea81 0e03 	eor.w	lr, r1, r3
 8000754:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000758:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800075c:	f000 8088 	beq.w	8000870 <__aeabi_ddiv+0x144>
 8000760:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000764:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000768:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800076c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000770:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000774:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000778:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800077c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000780:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 8000784:	429d      	cmp	r5, r3
 8000786:	bf08      	it	eq
 8000788:	4296      	cmpeq	r6, r2
 800078a:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 800078e:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 8000792:	d202      	bcs.n	800079a <__aeabi_ddiv+0x6e>
 8000794:	085b      	lsrs	r3, r3, #1
 8000796:	ea4f 0232 	mov.w	r2, r2, rrx
 800079a:	1ab6      	subs	r6, r6, r2
 800079c:	eb65 0503 	sbc.w	r5, r5, r3
 80007a0:	085b      	lsrs	r3, r3, #1
 80007a2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007a6:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80007aa:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 80007ae:	ebb6 0e02 	subs.w	lr, r6, r2
 80007b2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007b6:	bf22      	ittt	cs
 80007b8:	1ab6      	subcs	r6, r6, r2
 80007ba:	4675      	movcs	r5, lr
 80007bc:	ea40 000c 	orrcs.w	r0, r0, ip
 80007c0:	085b      	lsrs	r3, r3, #1
 80007c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007c6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ca:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ce:	bf22      	ittt	cs
 80007d0:	1ab6      	subcs	r6, r6, r2
 80007d2:	4675      	movcs	r5, lr
 80007d4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80007d8:	085b      	lsrs	r3, r3, #1
 80007da:	ea4f 0232 	mov.w	r2, r2, rrx
 80007de:	ebb6 0e02 	subs.w	lr, r6, r2
 80007e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007e6:	bf22      	ittt	cs
 80007e8:	1ab6      	subcs	r6, r6, r2
 80007ea:	4675      	movcs	r5, lr
 80007ec:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80007f0:	085b      	lsrs	r3, r3, #1
 80007f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007fe:	bf22      	ittt	cs
 8000800:	1ab6      	subcs	r6, r6, r2
 8000802:	4675      	movcs	r5, lr
 8000804:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000808:	ea55 0e06 	orrs.w	lr, r5, r6
 800080c:	d018      	beq.n	8000840 <__aeabi_ddiv+0x114>
 800080e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000812:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000816:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800081a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800081e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000822:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000826:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800082a:	d1c0      	bne.n	80007ae <__aeabi_ddiv+0x82>
 800082c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000830:	d10b      	bne.n	800084a <__aeabi_ddiv+0x11e>
 8000832:	ea41 0100 	orr.w	r1, r1, r0
 8000836:	f04f 0000 	mov.w	r0, #0
 800083a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800083e:	e7b6      	b.n	80007ae <__aeabi_ddiv+0x82>
 8000840:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000844:	bf04      	itt	eq
 8000846:	4301      	orreq	r1, r0
 8000848:	2000      	moveq	r0, #0
 800084a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800084e:	bf88      	it	hi
 8000850:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000854:	f63f aeaf 	bhi.w	80005b6 <__aeabi_dmul+0xde>
 8000858:	ebb5 0c03 	subs.w	ip, r5, r3
 800085c:	bf04      	itt	eq
 800085e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000862:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000866:	f150 0000 	adcs.w	r0, r0, #0
 800086a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800086e:	bd70      	pop	{r4, r5, r6, pc}
 8000870:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 8000874:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000878:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800087c:	bfc2      	ittt	gt
 800087e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000882:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000886:	bd70      	popgt	{r4, r5, r6, pc}
 8000888:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 800088c:	f04f 0e00 	mov.w	lr, #0
 8000890:	3c01      	subs	r4, #1
 8000892:	e690      	b.n	80005b6 <__aeabi_dmul+0xde>
 8000894:	ea45 0e06 	orr.w	lr, r5, r6
 8000898:	e68d      	b.n	80005b6 <__aeabi_dmul+0xde>
 800089a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800089e:	ea94 0f0c 	teq	r4, ip
 80008a2:	bf08      	it	eq
 80008a4:	ea95 0f0c 	teqeq	r5, ip
 80008a8:	f43f af3b 	beq.w	8000722 <__aeabi_dmul+0x24a>
 80008ac:	ea94 0f0c 	teq	r4, ip
 80008b0:	d10a      	bne.n	80008c8 <__aeabi_ddiv+0x19c>
 80008b2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008b6:	f47f af34 	bne.w	8000722 <__aeabi_dmul+0x24a>
 80008ba:	ea95 0f0c 	teq	r5, ip
 80008be:	f47f af25 	bne.w	800070c <__aeabi_dmul+0x234>
 80008c2:	4610      	mov	r0, r2
 80008c4:	4619      	mov	r1, r3
 80008c6:	e72c      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008c8:	ea95 0f0c 	teq	r5, ip
 80008cc:	d106      	bne.n	80008dc <__aeabi_ddiv+0x1b0>
 80008ce:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008d2:	f43f aefd 	beq.w	80006d0 <__aeabi_dmul+0x1f8>
 80008d6:	4610      	mov	r0, r2
 80008d8:	4619      	mov	r1, r3
 80008da:	e722      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008dc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008e0:	bf18      	it	ne
 80008e2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008e6:	f47f aec5 	bne.w	8000674 <__aeabi_dmul+0x19c>
 80008ea:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80008ee:	f47f af0d 	bne.w	800070c <__aeabi_dmul+0x234>
 80008f2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80008f6:	f47f aeeb 	bne.w	80006d0 <__aeabi_dmul+0x1f8>
 80008fa:	e712      	b.n	8000722 <__aeabi_dmul+0x24a>

080008fc <__gedf2>:
 80008fc:	f04f 3cff 	mov.w	ip, #4294967295
 8000900:	e006      	b.n	8000910 <__cmpdf2+0x4>
 8000902:	bf00      	nop

08000904 <__ledf2>:
 8000904:	f04f 0c01 	mov.w	ip, #1
 8000908:	e002      	b.n	8000910 <__cmpdf2+0x4>
 800090a:	bf00      	nop

0800090c <__cmpdf2>:
 800090c:	f04f 0c01 	mov.w	ip, #1
 8000910:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000914:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000918:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800091c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000920:	bf18      	it	ne
 8000922:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000926:	d01b      	beq.n	8000960 <__cmpdf2+0x54>
 8000928:	b001      	add	sp, #4
 800092a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 800092e:	bf0c      	ite	eq
 8000930:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000934:	ea91 0f03 	teqne	r1, r3
 8000938:	bf02      	ittt	eq
 800093a:	ea90 0f02 	teqeq	r0, r2
 800093e:	2000      	moveq	r0, #0
 8000940:	4770      	bxeq	lr
 8000942:	f110 0f00 	cmn.w	r0, #0
 8000946:	ea91 0f03 	teq	r1, r3
 800094a:	bf58      	it	pl
 800094c:	4299      	cmppl	r1, r3
 800094e:	bf08      	it	eq
 8000950:	4290      	cmpeq	r0, r2
 8000952:	bf2c      	ite	cs
 8000954:	17d8      	asrcs	r0, r3, #31
 8000956:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 800095a:	f040 0001 	orr.w	r0, r0, #1
 800095e:	4770      	bx	lr
 8000960:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000964:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000968:	d102      	bne.n	8000970 <__cmpdf2+0x64>
 800096a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 800096e:	d107      	bne.n	8000980 <__cmpdf2+0x74>
 8000970:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000974:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000978:	d1d6      	bne.n	8000928 <__cmpdf2+0x1c>
 800097a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 800097e:	d0d3      	beq.n	8000928 <__cmpdf2+0x1c>
 8000980:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000984:	4770      	bx	lr
 8000986:	bf00      	nop

08000988 <__aeabi_cdrcmple>:
 8000988:	4684      	mov	ip, r0
 800098a:	4610      	mov	r0, r2
 800098c:	4662      	mov	r2, ip
 800098e:	468c      	mov	ip, r1
 8000990:	4619      	mov	r1, r3
 8000992:	4663      	mov	r3, ip
 8000994:	e000      	b.n	8000998 <__aeabi_cdcmpeq>
 8000996:	bf00      	nop

08000998 <__aeabi_cdcmpeq>:
 8000998:	b501      	push	{r0, lr}
 800099a:	f7ff ffb7 	bl	800090c <__cmpdf2>
 800099e:	2800      	cmp	r0, #0
 80009a0:	bf48      	it	mi
 80009a2:	f110 0f00 	cmnmi.w	r0, #0
 80009a6:	bd01      	pop	{r0, pc}

080009a8 <__aeabi_dcmpeq>:
 80009a8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009ac:	f7ff fff4 	bl	8000998 <__aeabi_cdcmpeq>
 80009b0:	bf0c      	ite	eq
 80009b2:	2001      	moveq	r0, #1
 80009b4:	2000      	movne	r0, #0
 80009b6:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ba:	bf00      	nop

080009bc <__aeabi_dcmplt>:
 80009bc:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009c0:	f7ff ffea 	bl	8000998 <__aeabi_cdcmpeq>
 80009c4:	bf34      	ite	cc
 80009c6:	2001      	movcc	r0, #1
 80009c8:	2000      	movcs	r0, #0
 80009ca:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ce:	bf00      	nop

080009d0 <__aeabi_dcmple>:
 80009d0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009d4:	f7ff ffe0 	bl	8000998 <__aeabi_cdcmpeq>
 80009d8:	bf94      	ite	ls
 80009da:	2001      	movls	r0, #1
 80009dc:	2000      	movhi	r0, #0
 80009de:	f85d fb08 	ldr.w	pc, [sp], #8
 80009e2:	bf00      	nop

080009e4 <__aeabi_dcmpge>:
 80009e4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009e8:	f7ff ffce 	bl	8000988 <__aeabi_cdrcmple>
 80009ec:	bf94      	ite	ls
 80009ee:	2001      	movls	r0, #1
 80009f0:	2000      	movhi	r0, #0
 80009f2:	f85d fb08 	ldr.w	pc, [sp], #8
 80009f6:	bf00      	nop

080009f8 <__aeabi_dcmpgt>:
 80009f8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009fc:	f7ff ffc4 	bl	8000988 <__aeabi_cdrcmple>
 8000a00:	bf34      	ite	cc
 8000a02:	2001      	movcc	r0, #1
 8000a04:	2000      	movcs	r0, #0
 8000a06:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a0a:	bf00      	nop

08000a0c <__aeabi_dcmpun>:
 8000a0c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a10:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a14:	d102      	bne.n	8000a1c <__aeabi_dcmpun+0x10>
 8000a16:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a1a:	d10a      	bne.n	8000a32 <__aeabi_dcmpun+0x26>
 8000a1c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a20:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a24:	d102      	bne.n	8000a2c <__aeabi_dcmpun+0x20>
 8000a26:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a2a:	d102      	bne.n	8000a32 <__aeabi_dcmpun+0x26>
 8000a2c:	f04f 0000 	mov.w	r0, #0
 8000a30:	4770      	bx	lr
 8000a32:	f04f 0001 	mov.w	r0, #1
 8000a36:	4770      	bx	lr

08000a38 <__aeabi_d2iz>:
 8000a38:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a3c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000a40:	d215      	bcs.n	8000a6e <__aeabi_d2iz+0x36>
 8000a42:	d511      	bpl.n	8000a68 <__aeabi_d2iz+0x30>
 8000a44:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000a48:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a4c:	d912      	bls.n	8000a74 <__aeabi_d2iz+0x3c>
 8000a4e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a52:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000a56:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a5a:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000a5e:	fa23 f002 	lsr.w	r0, r3, r2
 8000a62:	bf18      	it	ne
 8000a64:	4240      	negne	r0, r0
 8000a66:	4770      	bx	lr
 8000a68:	f04f 0000 	mov.w	r0, #0
 8000a6c:	4770      	bx	lr
 8000a6e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a72:	d105      	bne.n	8000a80 <__aeabi_d2iz+0x48>
 8000a74:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000a78:	bf08      	it	eq
 8000a7a:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000a7e:	4770      	bx	lr
 8000a80:	f04f 0000 	mov.w	r0, #0
 8000a84:	4770      	bx	lr
 8000a86:	bf00      	nop

08000a88 <__aeabi_d2uiz>:
 8000a88:	004a      	lsls	r2, r1, #1
 8000a8a:	d211      	bcs.n	8000ab0 <__aeabi_d2uiz+0x28>
 8000a8c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000a90:	d211      	bcs.n	8000ab6 <__aeabi_d2uiz+0x2e>
 8000a92:	d50d      	bpl.n	8000ab0 <__aeabi_d2uiz+0x28>
 8000a94:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000a98:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a9c:	d40e      	bmi.n	8000abc <__aeabi_d2uiz+0x34>
 8000a9e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000aa2:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000aa6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000aaa:	fa23 f002 	lsr.w	r0, r3, r2
 8000aae:	4770      	bx	lr
 8000ab0:	f04f 0000 	mov.w	r0, #0
 8000ab4:	4770      	bx	lr
 8000ab6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000aba:	d102      	bne.n	8000ac2 <__aeabi_d2uiz+0x3a>
 8000abc:	f04f 30ff 	mov.w	r0, #4294967295
 8000ac0:	4770      	bx	lr
 8000ac2:	f04f 0000 	mov.w	r0, #0
 8000ac6:	4770      	bx	lr

08000ac8 <__aeabi_d2f>:
 8000ac8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000acc:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000ad0:	bf24      	itt	cs
 8000ad2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000ad6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000ada:	d90d      	bls.n	8000af8 <__aeabi_d2f+0x30>
 8000adc:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000ae0:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000ae4:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000ae8:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000aec:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000af0:	bf08      	it	eq
 8000af2:	f020 0001 	biceq.w	r0, r0, #1
 8000af6:	4770      	bx	lr
 8000af8:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000afc:	d121      	bne.n	8000b42 <__aeabi_d2f+0x7a>
 8000afe:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000b02:	bfbc      	itt	lt
 8000b04:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000b08:	4770      	bxlt	lr
 8000b0a:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000b0e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000b12:	f1c2 0218 	rsb	r2, r2, #24
 8000b16:	f1c2 0c20 	rsb	ip, r2, #32
 8000b1a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000b1e:	fa20 f002 	lsr.w	r0, r0, r2
 8000b22:	bf18      	it	ne
 8000b24:	f040 0001 	orrne.w	r0, r0, #1
 8000b28:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b2c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000b30:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000b34:	ea40 000c 	orr.w	r0, r0, ip
 8000b38:	fa23 f302 	lsr.w	r3, r3, r2
 8000b3c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000b40:	e7cc      	b.n	8000adc <__aeabi_d2f+0x14>
 8000b42:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000b46:	d107      	bne.n	8000b58 <__aeabi_d2f+0x90>
 8000b48:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000b4c:	bf1e      	ittt	ne
 8000b4e:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000b52:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000b56:	4770      	bxne	lr
 8000b58:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000b5c:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000b60:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000b64:	4770      	bx	lr
 8000b66:	bf00      	nop

08000b68 <__aeabi_frsub>:
 8000b68:	f080 4000 	eor.w	r0, r0, #2147483648	@ 0x80000000
 8000b6c:	e002      	b.n	8000b74 <__addsf3>
 8000b6e:	bf00      	nop

08000b70 <__aeabi_fsub>:
 8000b70:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000

08000b74 <__addsf3>:
 8000b74:	0042      	lsls	r2, r0, #1
 8000b76:	bf1f      	itttt	ne
 8000b78:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000b7c:	ea92 0f03 	teqne	r2, r3
 8000b80:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000b84:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000b88:	d06a      	beq.n	8000c60 <__addsf3+0xec>
 8000b8a:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000b8e:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000b92:	bfc1      	itttt	gt
 8000b94:	18d2      	addgt	r2, r2, r3
 8000b96:	4041      	eorgt	r1, r0
 8000b98:	4048      	eorgt	r0, r1
 8000b9a:	4041      	eorgt	r1, r0
 8000b9c:	bfb8      	it	lt
 8000b9e:	425b      	neglt	r3, r3
 8000ba0:	2b19      	cmp	r3, #25
 8000ba2:	bf88      	it	hi
 8000ba4:	4770      	bxhi	lr
 8000ba6:	f010 4f00 	tst.w	r0, #2147483648	@ 0x80000000
 8000baa:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000bae:	f020 407f 	bic.w	r0, r0, #4278190080	@ 0xff000000
 8000bb2:	bf18      	it	ne
 8000bb4:	4240      	negne	r0, r0
 8000bb6:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000bba:	f441 0100 	orr.w	r1, r1, #8388608	@ 0x800000
 8000bbe:	f021 417f 	bic.w	r1, r1, #4278190080	@ 0xff000000
 8000bc2:	bf18      	it	ne
 8000bc4:	4249      	negne	r1, r1
 8000bc6:	ea92 0f03 	teq	r2, r3
 8000bca:	d03f      	beq.n	8000c4c <__addsf3+0xd8>
 8000bcc:	f1a2 0201 	sub.w	r2, r2, #1
 8000bd0:	fa41 fc03 	asr.w	ip, r1, r3
 8000bd4:	eb10 000c 	adds.w	r0, r0, ip
 8000bd8:	f1c3 0320 	rsb	r3, r3, #32
 8000bdc:	fa01 f103 	lsl.w	r1, r1, r3
 8000be0:	f000 4300 	and.w	r3, r0, #2147483648	@ 0x80000000
 8000be4:	d502      	bpl.n	8000bec <__addsf3+0x78>
 8000be6:	4249      	negs	r1, r1
 8000be8:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000bec:	f5b0 0f00 	cmp.w	r0, #8388608	@ 0x800000
 8000bf0:	d313      	bcc.n	8000c1a <__addsf3+0xa6>
 8000bf2:	f1b0 7f80 	cmp.w	r0, #16777216	@ 0x1000000
 8000bf6:	d306      	bcc.n	8000c06 <__addsf3+0x92>
 8000bf8:	0840      	lsrs	r0, r0, #1
 8000bfa:	ea4f 0131 	mov.w	r1, r1, rrx
 8000bfe:	f102 0201 	add.w	r2, r2, #1
 8000c02:	2afe      	cmp	r2, #254	@ 0xfe
 8000c04:	d251      	bcs.n	8000caa <__addsf3+0x136>
 8000c06:	f1b1 4f00 	cmp.w	r1, #2147483648	@ 0x80000000
 8000c0a:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000c0e:	bf08      	it	eq
 8000c10:	f020 0001 	biceq.w	r0, r0, #1
 8000c14:	ea40 0003 	orr.w	r0, r0, r3
 8000c18:	4770      	bx	lr
 8000c1a:	0049      	lsls	r1, r1, #1
 8000c1c:	eb40 0000 	adc.w	r0, r0, r0
 8000c20:	3a01      	subs	r2, #1
 8000c22:	bf28      	it	cs
 8000c24:	f5b0 0f00 	cmpcs.w	r0, #8388608	@ 0x800000
 8000c28:	d2ed      	bcs.n	8000c06 <__addsf3+0x92>
 8000c2a:	fab0 fc80 	clz	ip, r0
 8000c2e:	f1ac 0c08 	sub.w	ip, ip, #8
 8000c32:	ebb2 020c 	subs.w	r2, r2, ip
 8000c36:	fa00 f00c 	lsl.w	r0, r0, ip
 8000c3a:	bfaa      	itet	ge
 8000c3c:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000c40:	4252      	neglt	r2, r2
 8000c42:	4318      	orrge	r0, r3
 8000c44:	bfbc      	itt	lt
 8000c46:	40d0      	lsrlt	r0, r2
 8000c48:	4318      	orrlt	r0, r3
 8000c4a:	4770      	bx	lr
 8000c4c:	f092 0f00 	teq	r2, #0
 8000c50:	f481 0100 	eor.w	r1, r1, #8388608	@ 0x800000
 8000c54:	bf06      	itte	eq
 8000c56:	f480 0000 	eoreq.w	r0, r0, #8388608	@ 0x800000
 8000c5a:	3201      	addeq	r2, #1
 8000c5c:	3b01      	subne	r3, #1
 8000c5e:	e7b5      	b.n	8000bcc <__addsf3+0x58>
 8000c60:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000c64:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000c68:	bf18      	it	ne
 8000c6a:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000c6e:	d021      	beq.n	8000cb4 <__addsf3+0x140>
 8000c70:	ea92 0f03 	teq	r2, r3
 8000c74:	d004      	beq.n	8000c80 <__addsf3+0x10c>
 8000c76:	f092 0f00 	teq	r2, #0
 8000c7a:	bf08      	it	eq
 8000c7c:	4608      	moveq	r0, r1
 8000c7e:	4770      	bx	lr
 8000c80:	ea90 0f01 	teq	r0, r1
 8000c84:	bf1c      	itt	ne
 8000c86:	2000      	movne	r0, #0
 8000c88:	4770      	bxne	lr
 8000c8a:	f012 4f7f 	tst.w	r2, #4278190080	@ 0xff000000
 8000c8e:	d104      	bne.n	8000c9a <__addsf3+0x126>
 8000c90:	0040      	lsls	r0, r0, #1
 8000c92:	bf28      	it	cs
 8000c94:	f040 4000 	orrcs.w	r0, r0, #2147483648	@ 0x80000000
 8000c98:	4770      	bx	lr
 8000c9a:	f112 7200 	adds.w	r2, r2, #33554432	@ 0x2000000
 8000c9e:	bf3c      	itt	cc
 8000ca0:	f500 0000 	addcc.w	r0, r0, #8388608	@ 0x800000
 8000ca4:	4770      	bxcc	lr
 8000ca6:	f000 4300 	and.w	r3, r0, #2147483648	@ 0x80000000
 8000caa:	f043 40fe 	orr.w	r0, r3, #2130706432	@ 0x7f000000
 8000cae:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000cb2:	4770      	bx	lr
 8000cb4:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000cb8:	bf16      	itet	ne
 8000cba:	4608      	movne	r0, r1
 8000cbc:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000cc0:	4601      	movne	r1, r0
 8000cc2:	0242      	lsls	r2, r0, #9
 8000cc4:	bf06      	itte	eq
 8000cc6:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000cca:	ea90 0f01 	teqeq	r0, r1
 8000cce:	f440 0080 	orrne.w	r0, r0, #4194304	@ 0x400000
 8000cd2:	4770      	bx	lr

08000cd4 <__aeabi_ui2f>:
 8000cd4:	f04f 0300 	mov.w	r3, #0
 8000cd8:	e004      	b.n	8000ce4 <__aeabi_i2f+0x8>
 8000cda:	bf00      	nop

08000cdc <__aeabi_i2f>:
 8000cdc:	f010 4300 	ands.w	r3, r0, #2147483648	@ 0x80000000
 8000ce0:	bf48      	it	mi
 8000ce2:	4240      	negmi	r0, r0
 8000ce4:	ea5f 0c00 	movs.w	ip, r0
 8000ce8:	bf08      	it	eq
 8000cea:	4770      	bxeq	lr
 8000cec:	f043 4396 	orr.w	r3, r3, #1258291200	@ 0x4b000000
 8000cf0:	4601      	mov	r1, r0
 8000cf2:	f04f 0000 	mov.w	r0, #0
 8000cf6:	e01c      	b.n	8000d32 <__aeabi_l2f+0x2a>

08000cf8 <__aeabi_ul2f>:
 8000cf8:	ea50 0201 	orrs.w	r2, r0, r1
 8000cfc:	bf08      	it	eq
 8000cfe:	4770      	bxeq	lr
 8000d00:	f04f 0300 	mov.w	r3, #0
 8000d04:	e00a      	b.n	8000d1c <__aeabi_l2f+0x14>
 8000d06:	bf00      	nop

08000d08 <__aeabi_l2f>:
 8000d08:	ea50 0201 	orrs.w	r2, r0, r1
 8000d0c:	bf08      	it	eq
 8000d0e:	4770      	bxeq	lr
 8000d10:	f011 4300 	ands.w	r3, r1, #2147483648	@ 0x80000000
 8000d14:	d502      	bpl.n	8000d1c <__aeabi_l2f+0x14>
 8000d16:	4240      	negs	r0, r0
 8000d18:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000d1c:	ea5f 0c01 	movs.w	ip, r1
 8000d20:	bf02      	ittt	eq
 8000d22:	4684      	moveq	ip, r0
 8000d24:	4601      	moveq	r1, r0
 8000d26:	2000      	moveq	r0, #0
 8000d28:	f043 43b6 	orr.w	r3, r3, #1526726656	@ 0x5b000000
 8000d2c:	bf08      	it	eq
 8000d2e:	f1a3 5380 	subeq.w	r3, r3, #268435456	@ 0x10000000
 8000d32:	f5a3 0300 	sub.w	r3, r3, #8388608	@ 0x800000
 8000d36:	fabc f28c 	clz	r2, ip
 8000d3a:	3a08      	subs	r2, #8
 8000d3c:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000d40:	db10      	blt.n	8000d64 <__aeabi_l2f+0x5c>
 8000d42:	fa01 fc02 	lsl.w	ip, r1, r2
 8000d46:	4463      	add	r3, ip
 8000d48:	fa00 fc02 	lsl.w	ip, r0, r2
 8000d4c:	f1c2 0220 	rsb	r2, r2, #32
 8000d50:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 8000d54:	fa20 f202 	lsr.w	r2, r0, r2
 8000d58:	eb43 0002 	adc.w	r0, r3, r2
 8000d5c:	bf08      	it	eq
 8000d5e:	f020 0001 	biceq.w	r0, r0, #1
 8000d62:	4770      	bx	lr
 8000d64:	f102 0220 	add.w	r2, r2, #32
 8000d68:	fa01 fc02 	lsl.w	ip, r1, r2
 8000d6c:	f1c2 0220 	rsb	r2, r2, #32
 8000d70:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000d74:	fa21 f202 	lsr.w	r2, r1, r2
 8000d78:	eb43 0002 	adc.w	r0, r3, r2
 8000d7c:	bf08      	it	eq
 8000d7e:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000d82:	4770      	bx	lr

08000d84 <__aeabi_fmul>:
 8000d84:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000d88:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000d8c:	bf1e      	ittt	ne
 8000d8e:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000d92:	ea92 0f0c 	teqne	r2, ip
 8000d96:	ea93 0f0c 	teqne	r3, ip
 8000d9a:	d06f      	beq.n	8000e7c <__aeabi_fmul+0xf8>
 8000d9c:	441a      	add	r2, r3
 8000d9e:	ea80 0c01 	eor.w	ip, r0, r1
 8000da2:	0240      	lsls	r0, r0, #9
 8000da4:	bf18      	it	ne
 8000da6:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 8000daa:	d01e      	beq.n	8000dea <__aeabi_fmul+0x66>
 8000dac:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8000db0:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 8000db4:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 8000db8:	fba0 3101 	umull	r3, r1, r0, r1
 8000dbc:	f00c 4000 	and.w	r0, ip, #2147483648	@ 0x80000000
 8000dc0:	f5b1 0f00 	cmp.w	r1, #8388608	@ 0x800000
 8000dc4:	bf3e      	ittt	cc
 8000dc6:	0049      	lslcc	r1, r1, #1
 8000dc8:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 8000dcc:	005b      	lslcc	r3, r3, #1
 8000dce:	ea40 0001 	orr.w	r0, r0, r1
 8000dd2:	f162 027f 	sbc.w	r2, r2, #127	@ 0x7f
 8000dd6:	2afd      	cmp	r2, #253	@ 0xfd
 8000dd8:	d81d      	bhi.n	8000e16 <__aeabi_fmul+0x92>
 8000dda:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8000dde:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000de2:	bf08      	it	eq
 8000de4:	f020 0001 	biceq.w	r0, r0, #1
 8000de8:	4770      	bx	lr
 8000dea:	f090 0f00 	teq	r0, #0
 8000dee:	f00c 4c00 	and.w	ip, ip, #2147483648	@ 0x80000000
 8000df2:	bf08      	it	eq
 8000df4:	0249      	lsleq	r1, r1, #9
 8000df6:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000dfa:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 8000dfe:	3a7f      	subs	r2, #127	@ 0x7f
 8000e00:	bfc2      	ittt	gt
 8000e02:	f1d2 03ff 	rsbsgt	r3, r2, #255	@ 0xff
 8000e06:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000e0a:	4770      	bxgt	lr
 8000e0c:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000e10:	f04f 0300 	mov.w	r3, #0
 8000e14:	3a01      	subs	r2, #1
 8000e16:	dc5d      	bgt.n	8000ed4 <__aeabi_fmul+0x150>
 8000e18:	f112 0f19 	cmn.w	r2, #25
 8000e1c:	bfdc      	itt	le
 8000e1e:	f000 4000 	andle.w	r0, r0, #2147483648	@ 0x80000000
 8000e22:	4770      	bxle	lr
 8000e24:	f1c2 0200 	rsb	r2, r2, #0
 8000e28:	0041      	lsls	r1, r0, #1
 8000e2a:	fa21 f102 	lsr.w	r1, r1, r2
 8000e2e:	f1c2 0220 	rsb	r2, r2, #32
 8000e32:	fa00 fc02 	lsl.w	ip, r0, r2
 8000e36:	ea5f 0031 	movs.w	r0, r1, rrx
 8000e3a:	f140 0000 	adc.w	r0, r0, #0
 8000e3e:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 8000e42:	bf08      	it	eq
 8000e44:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000e48:	4770      	bx	lr
 8000e4a:	f092 0f00 	teq	r2, #0
 8000e4e:	f000 4c00 	and.w	ip, r0, #2147483648	@ 0x80000000
 8000e52:	bf02      	ittt	eq
 8000e54:	0040      	lsleq	r0, r0, #1
 8000e56:	f410 0f00 	tsteq.w	r0, #8388608	@ 0x800000
 8000e5a:	3a01      	subeq	r2, #1
 8000e5c:	d0f9      	beq.n	8000e52 <__aeabi_fmul+0xce>
 8000e5e:	ea40 000c 	orr.w	r0, r0, ip
 8000e62:	f093 0f00 	teq	r3, #0
 8000e66:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000e6a:	bf02      	ittt	eq
 8000e6c:	0049      	lsleq	r1, r1, #1
 8000e6e:	f411 0f00 	tsteq.w	r1, #8388608	@ 0x800000
 8000e72:	3b01      	subeq	r3, #1
 8000e74:	d0f9      	beq.n	8000e6a <__aeabi_fmul+0xe6>
 8000e76:	ea41 010c 	orr.w	r1, r1, ip
 8000e7a:	e78f      	b.n	8000d9c <__aeabi_fmul+0x18>
 8000e7c:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000e80:	ea92 0f0c 	teq	r2, ip
 8000e84:	bf18      	it	ne
 8000e86:	ea93 0f0c 	teqne	r3, ip
 8000e8a:	d00a      	beq.n	8000ea2 <__aeabi_fmul+0x11e>
 8000e8c:	f030 4c00 	bics.w	ip, r0, #2147483648	@ 0x80000000
 8000e90:	bf18      	it	ne
 8000e92:	f031 4c00 	bicsne.w	ip, r1, #2147483648	@ 0x80000000
 8000e96:	d1d8      	bne.n	8000e4a <__aeabi_fmul+0xc6>
 8000e98:	ea80 0001 	eor.w	r0, r0, r1
 8000e9c:	f000 4000 	and.w	r0, r0, #2147483648	@ 0x80000000
 8000ea0:	4770      	bx	lr
 8000ea2:	f090 0f00 	teq	r0, #0
 8000ea6:	bf17      	itett	ne
 8000ea8:	f090 4f00 	teqne	r0, #2147483648	@ 0x80000000
 8000eac:	4608      	moveq	r0, r1
 8000eae:	f091 0f00 	teqne	r1, #0
 8000eb2:	f091 4f00 	teqne	r1, #2147483648	@ 0x80000000
 8000eb6:	d014      	beq.n	8000ee2 <__aeabi_fmul+0x15e>
 8000eb8:	ea92 0f0c 	teq	r2, ip
 8000ebc:	d101      	bne.n	8000ec2 <__aeabi_fmul+0x13e>
 8000ebe:	0242      	lsls	r2, r0, #9
 8000ec0:	d10f      	bne.n	8000ee2 <__aeabi_fmul+0x15e>
 8000ec2:	ea93 0f0c 	teq	r3, ip
 8000ec6:	d103      	bne.n	8000ed0 <__aeabi_fmul+0x14c>
 8000ec8:	024b      	lsls	r3, r1, #9
 8000eca:	bf18      	it	ne
 8000ecc:	4608      	movne	r0, r1
 8000ece:	d108      	bne.n	8000ee2 <__aeabi_fmul+0x15e>
 8000ed0:	ea80 0001 	eor.w	r0, r0, r1
 8000ed4:	f000 4000 	and.w	r0, r0, #2147483648	@ 0x80000000
 8000ed8:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000edc:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000ee0:	4770      	bx	lr
 8000ee2:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000ee6:	f440 0040 	orr.w	r0, r0, #12582912	@ 0xc00000
 8000eea:	4770      	bx	lr

08000eec <__aeabi_fdiv>:
 8000eec:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000ef0:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000ef4:	bf1e      	ittt	ne
 8000ef6:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000efa:	ea92 0f0c 	teqne	r2, ip
 8000efe:	ea93 0f0c 	teqne	r3, ip
 8000f02:	d069      	beq.n	8000fd8 <__aeabi_fdiv+0xec>
 8000f04:	eba2 0203 	sub.w	r2, r2, r3
 8000f08:	ea80 0c01 	eor.w	ip, r0, r1
 8000f0c:	0249      	lsls	r1, r1, #9
 8000f0e:	ea4f 2040 	mov.w	r0, r0, lsl #9
 8000f12:	d037      	beq.n	8000f84 <__aeabi_fdiv+0x98>
 8000f14:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 8000f18:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 8000f1c:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 8000f20:	f00c 4000 	and.w	r0, ip, #2147483648	@ 0x80000000
 8000f24:	428b      	cmp	r3, r1
 8000f26:	bf38      	it	cc
 8000f28:	005b      	lslcc	r3, r3, #1
 8000f2a:	f142 027d 	adc.w	r2, r2, #125	@ 0x7d
 8000f2e:	f44f 0c00 	mov.w	ip, #8388608	@ 0x800000
 8000f32:	428b      	cmp	r3, r1
 8000f34:	bf24      	itt	cs
 8000f36:	1a5b      	subcs	r3, r3, r1
 8000f38:	ea40 000c 	orrcs.w	r0, r0, ip
 8000f3c:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 8000f40:	bf24      	itt	cs
 8000f42:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 8000f46:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000f4a:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 8000f4e:	bf24      	itt	cs
 8000f50:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 8000f54:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000f58:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 8000f5c:	bf24      	itt	cs
 8000f5e:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 8000f62:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000f66:	011b      	lsls	r3, r3, #4
 8000f68:	bf18      	it	ne
 8000f6a:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 8000f6e:	d1e0      	bne.n	8000f32 <__aeabi_fdiv+0x46>
 8000f70:	2afd      	cmp	r2, #253	@ 0xfd
 8000f72:	f63f af50 	bhi.w	8000e16 <__aeabi_fmul+0x92>
 8000f76:	428b      	cmp	r3, r1
 8000f78:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000f7c:	bf08      	it	eq
 8000f7e:	f020 0001 	biceq.w	r0, r0, #1
 8000f82:	4770      	bx	lr
 8000f84:	f00c 4c00 	and.w	ip, ip, #2147483648	@ 0x80000000
 8000f88:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000f8c:	327f      	adds	r2, #127	@ 0x7f
 8000f8e:	bfc2      	ittt	gt
 8000f90:	f1d2 03ff 	rsbsgt	r3, r2, #255	@ 0xff
 8000f94:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000f98:	4770      	bxgt	lr
 8000f9a:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000f9e:	f04f 0300 	mov.w	r3, #0
 8000fa2:	3a01      	subs	r2, #1
 8000fa4:	e737      	b.n	8000e16 <__aeabi_fmul+0x92>
 8000fa6:	f092 0f00 	teq	r2, #0
 8000faa:	f000 4c00 	and.w	ip, r0, #2147483648	@ 0x80000000
 8000fae:	bf02      	ittt	eq
 8000fb0:	0040      	lsleq	r0, r0, #1
 8000fb2:	f410 0f00 	tsteq.w	r0, #8388608	@ 0x800000
 8000fb6:	3a01      	subeq	r2, #1
 8000fb8:	d0f9      	beq.n	8000fae <__aeabi_fdiv+0xc2>
 8000fba:	ea40 000c 	orr.w	r0, r0, ip
 8000fbe:	f093 0f00 	teq	r3, #0
 8000fc2:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000fc6:	bf02      	ittt	eq
 8000fc8:	0049      	lsleq	r1, r1, #1
 8000fca:	f411 0f00 	tsteq.w	r1, #8388608	@ 0x800000
 8000fce:	3b01      	subeq	r3, #1
 8000fd0:	d0f9      	beq.n	8000fc6 <__aeabi_fdiv+0xda>
 8000fd2:	ea41 010c 	orr.w	r1, r1, ip
 8000fd6:	e795      	b.n	8000f04 <__aeabi_fdiv+0x18>
 8000fd8:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000fdc:	ea92 0f0c 	teq	r2, ip
 8000fe0:	d108      	bne.n	8000ff4 <__aeabi_fdiv+0x108>
 8000fe2:	0242      	lsls	r2, r0, #9
 8000fe4:	f47f af7d 	bne.w	8000ee2 <__aeabi_fmul+0x15e>
 8000fe8:	ea93 0f0c 	teq	r3, ip
 8000fec:	f47f af70 	bne.w	8000ed0 <__aeabi_fmul+0x14c>
 8000ff0:	4608      	mov	r0, r1
 8000ff2:	e776      	b.n	8000ee2 <__aeabi_fmul+0x15e>
 8000ff4:	ea93 0f0c 	teq	r3, ip
 8000ff8:	d104      	bne.n	8001004 <__aeabi_fdiv+0x118>
 8000ffa:	024b      	lsls	r3, r1, #9
 8000ffc:	f43f af4c 	beq.w	8000e98 <__aeabi_fmul+0x114>
 8001000:	4608      	mov	r0, r1
 8001002:	e76e      	b.n	8000ee2 <__aeabi_fmul+0x15e>
 8001004:	f030 4c00 	bics.w	ip, r0, #2147483648	@ 0x80000000
 8001008:	bf18      	it	ne
 800100a:	f031 4c00 	bicsne.w	ip, r1, #2147483648	@ 0x80000000
 800100e:	d1ca      	bne.n	8000fa6 <__aeabi_fdiv+0xba>
 8001010:	f030 4200 	bics.w	r2, r0, #2147483648	@ 0x80000000
 8001014:	f47f af5c 	bne.w	8000ed0 <__aeabi_fmul+0x14c>
 8001018:	f031 4300 	bics.w	r3, r1, #2147483648	@ 0x80000000
 800101c:	f47f af3c 	bne.w	8000e98 <__aeabi_fmul+0x114>
 8001020:	e75f      	b.n	8000ee2 <__aeabi_fmul+0x15e>
 8001022:	bf00      	nop

08001024 <__gesf2>:
 8001024:	f04f 3cff 	mov.w	ip, #4294967295
 8001028:	e006      	b.n	8001038 <__cmpsf2+0x4>
 800102a:	bf00      	nop

0800102c <__lesf2>:
 800102c:	f04f 0c01 	mov.w	ip, #1
 8001030:	e002      	b.n	8001038 <__cmpsf2+0x4>
 8001032:	bf00      	nop

08001034 <__cmpsf2>:
 8001034:	f04f 0c01 	mov.w	ip, #1
 8001038:	f84d cd04 	str.w	ip, [sp, #-4]!
 800103c:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8001040:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8001044:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8001048:	bf18      	it	ne
 800104a:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 800104e:	d011      	beq.n	8001074 <__cmpsf2+0x40>
 8001050:	b001      	add	sp, #4
 8001052:	ea52 0c53 	orrs.w	ip, r2, r3, lsr #1
 8001056:	bf18      	it	ne
 8001058:	ea90 0f01 	teqne	r0, r1
 800105c:	bf58      	it	pl
 800105e:	ebb2 0003 	subspl.w	r0, r2, r3
 8001062:	bf88      	it	hi
 8001064:	17c8      	asrhi	r0, r1, #31
 8001066:	bf38      	it	cc
 8001068:	ea6f 70e1 	mvncc.w	r0, r1, asr #31
 800106c:	bf18      	it	ne
 800106e:	f040 0001 	orrne.w	r0, r0, #1
 8001072:	4770      	bx	lr
 8001074:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8001078:	d102      	bne.n	8001080 <__cmpsf2+0x4c>
 800107a:	ea5f 2c40 	movs.w	ip, r0, lsl #9
 800107e:	d105      	bne.n	800108c <__cmpsf2+0x58>
 8001080:	ea7f 6c23 	mvns.w	ip, r3, asr #24
 8001084:	d1e4      	bne.n	8001050 <__cmpsf2+0x1c>
 8001086:	ea5f 2c41 	movs.w	ip, r1, lsl #9
 800108a:	d0e1      	beq.n	8001050 <__cmpsf2+0x1c>
 800108c:	f85d 0b04 	ldr.w	r0, [sp], #4
 8001090:	4770      	bx	lr
 8001092:	bf00      	nop

08001094 <__aeabi_cfrcmple>:
 8001094:	4684      	mov	ip, r0
 8001096:	4608      	mov	r0, r1
 8001098:	4661      	mov	r1, ip
 800109a:	e7ff      	b.n	800109c <__aeabi_cfcmpeq>

0800109c <__aeabi_cfcmpeq>:
 800109c:	b50f      	push	{r0, r1, r2, r3, lr}
 800109e:	f7ff ffc9 	bl	8001034 <__cmpsf2>
 80010a2:	2800      	cmp	r0, #0
 80010a4:	bf48      	it	mi
 80010a6:	f110 0f00 	cmnmi.w	r0, #0
 80010aa:	bd0f      	pop	{r0, r1, r2, r3, pc}

080010ac <__aeabi_fcmpeq>:
 80010ac:	f84d ed08 	str.w	lr, [sp, #-8]!
 80010b0:	f7ff fff4 	bl	800109c <__aeabi_cfcmpeq>
 80010b4:	bf0c      	ite	eq
 80010b6:	2001      	moveq	r0, #1
 80010b8:	2000      	movne	r0, #0
 80010ba:	f85d fb08 	ldr.w	pc, [sp], #8
 80010be:	bf00      	nop

080010c0 <__aeabi_fcmplt>:
 80010c0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80010c4:	f7ff ffea 	bl	800109c <__aeabi_cfcmpeq>
 80010c8:	bf34      	ite	cc
 80010ca:	2001      	movcc	r0, #1
 80010cc:	2000      	movcs	r0, #0
 80010ce:	f85d fb08 	ldr.w	pc, [sp], #8
 80010d2:	bf00      	nop

080010d4 <__aeabi_fcmple>:
 80010d4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80010d8:	f7ff ffe0 	bl	800109c <__aeabi_cfcmpeq>
 80010dc:	bf94      	ite	ls
 80010de:	2001      	movls	r0, #1
 80010e0:	2000      	movhi	r0, #0
 80010e2:	f85d fb08 	ldr.w	pc, [sp], #8
 80010e6:	bf00      	nop

080010e8 <__aeabi_fcmpge>:
 80010e8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80010ec:	f7ff ffd2 	bl	8001094 <__aeabi_cfrcmple>
 80010f0:	bf94      	ite	ls
 80010f2:	2001      	movls	r0, #1
 80010f4:	2000      	movhi	r0, #0
 80010f6:	f85d fb08 	ldr.w	pc, [sp], #8
 80010fa:	bf00      	nop

080010fc <__aeabi_fcmpgt>:
 80010fc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8001100:	f7ff ffc8 	bl	8001094 <__aeabi_cfrcmple>
 8001104:	bf34      	ite	cc
 8001106:	2001      	movcc	r0, #1
 8001108:	2000      	movcs	r0, #0
 800110a:	f85d fb08 	ldr.w	pc, [sp], #8
 800110e:	bf00      	nop

08001110 <__aeabi_d2lz>:
 8001110:	b538      	push	{r3, r4, r5, lr}
 8001112:	2200      	movs	r2, #0
 8001114:	2300      	movs	r3, #0
 8001116:	4604      	mov	r4, r0
 8001118:	460d      	mov	r5, r1
 800111a:	f7ff fc4f 	bl	80009bc <__aeabi_dcmplt>
 800111e:	b928      	cbnz	r0, 800112c <__aeabi_d2lz+0x1c>
 8001120:	4620      	mov	r0, r4
 8001122:	4629      	mov	r1, r5
 8001124:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8001128:	f000 b80a 	b.w	8001140 <__aeabi_d2ulz>
 800112c:	4620      	mov	r0, r4
 800112e:	f105 4100 	add.w	r1, r5, #2147483648	@ 0x80000000
 8001132:	f000 f805 	bl	8001140 <__aeabi_d2ulz>
 8001136:	4240      	negs	r0, r0
 8001138:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800113c:	bd38      	pop	{r3, r4, r5, pc}
 800113e:	bf00      	nop

08001140 <__aeabi_d2ulz>:
 8001140:	b5d0      	push	{r4, r6, r7, lr}
 8001142:	2200      	movs	r2, #0
 8001144:	4b0b      	ldr	r3, [pc, #44]	@ (8001174 <__aeabi_d2ulz+0x34>)
 8001146:	4606      	mov	r6, r0
 8001148:	460f      	mov	r7, r1
 800114a:	f7ff f9c5 	bl	80004d8 <__aeabi_dmul>
 800114e:	f7ff fc9b 	bl	8000a88 <__aeabi_d2uiz>
 8001152:	4604      	mov	r4, r0
 8001154:	f7ff f946 	bl	80003e4 <__aeabi_ui2d>
 8001158:	2200      	movs	r2, #0
 800115a:	4b07      	ldr	r3, [pc, #28]	@ (8001178 <__aeabi_d2ulz+0x38>)
 800115c:	f7ff f9bc 	bl	80004d8 <__aeabi_dmul>
 8001160:	4602      	mov	r2, r0
 8001162:	460b      	mov	r3, r1
 8001164:	4630      	mov	r0, r6
 8001166:	4639      	mov	r1, r7
 8001168:	f7fe fffe 	bl	8000168 <__aeabi_dsub>
 800116c:	f7ff fc8c 	bl	8000a88 <__aeabi_d2uiz>
 8001170:	4621      	mov	r1, r4
 8001172:	bdd0      	pop	{r4, r6, r7, pc}
 8001174:	3df00000 	.word	0x3df00000
 8001178:	41f00000 	.word	0x41f00000

0800117c <read_adc_avg>:

#define adc_kho 4095.0f
#define adc_uot 1300.0f
#define vref 3.3f

uint32_t read_adc_avg(ADC_HandleTypeDef *hadc, int s){
 800117c:	b580      	push	{r7, lr}
 800117e:	b084      	sub	sp, #16
 8001180:	af00      	add	r7, sp, #0
 8001182:	6078      	str	r0, [r7, #4]
 8001184:	6039      	str	r1, [r7, #0]
	uint32_t sum=0;
 8001186:	2300      	movs	r3, #0
 8001188:	60fb      	str	r3, [r7, #12]
	for (int i = 0; i < s; i++) {
 800118a:	2300      	movs	r3, #0
 800118c:	60bb      	str	r3, [r7, #8]
 800118e:	e016      	b.n	80011be <read_adc_avg+0x42>
		HAL_ADC_Start(hadc);
 8001190:	6878      	ldr	r0, [r7, #4]
 8001192:	f000 fe5f 	bl	8001e54 <HAL_ADC_Start>
		HAL_ADC_PollForConversion(hadc, 10);
 8001196:	210a      	movs	r1, #10
 8001198:	6878      	ldr	r0, [r7, #4]
 800119a:	f000 ff35 	bl	8002008 <HAL_ADC_PollForConversion>
		sum += HAL_ADC_GetValue(hadc);
 800119e:	6878      	ldr	r0, [r7, #4]
 80011a0:	f001 f838 	bl	8002214 <HAL_ADC_GetValue>
 80011a4:	4602      	mov	r2, r0
 80011a6:	68fb      	ldr	r3, [r7, #12]
 80011a8:	4413      	add	r3, r2
 80011aa:	60fb      	str	r3, [r7, #12]
		HAL_ADC_Stop(hadc);
 80011ac:	6878      	ldr	r0, [r7, #4]
 80011ae:	f000 feff 	bl	8001fb0 <HAL_ADC_Stop>
		HAL_Delay(5);
 80011b2:	2005      	movs	r0, #5
 80011b4:	f000 fd52 	bl	8001c5c <HAL_Delay>
	for (int i = 0; i < s; i++) {
 80011b8:	68bb      	ldr	r3, [r7, #8]
 80011ba:	3301      	adds	r3, #1
 80011bc:	60bb      	str	r3, [r7, #8]
 80011be:	68ba      	ldr	r2, [r7, #8]
 80011c0:	683b      	ldr	r3, [r7, #0]
 80011c2:	429a      	cmp	r2, r3
 80011c4:	dbe4      	blt.n	8001190 <read_adc_avg+0x14>

	}
	return sum / s;
 80011c6:	683b      	ldr	r3, [r7, #0]
 80011c8:	68fa      	ldr	r2, [r7, #12]
 80011ca:	fbb2 f3f3 	udiv	r3, r2, r3
}
 80011ce:	4618      	mov	r0, r3
 80011d0:	3710      	adds	r7, #16
 80011d2:	46bd      	mov	sp, r7
 80011d4:	bd80      	pop	{r7, pc}
	...

080011d8 <adc_to_percent>:
float adc_to_volt(uint32_t raw){
	return (float)raw * vref / 4095.0f;

}

float adc_to_percent(uint32_t raw){
 80011d8:	b580      	push	{r7, lr}
 80011da:	b084      	sub	sp, #16
 80011dc:	af00      	add	r7, sp, #0
 80011de:	6078      	str	r0, [r7, #4]
	float doam = (adc_kho - (float)raw) / (adc_kho - adc_uot) *100.0f;
 80011e0:	6878      	ldr	r0, [r7, #4]
 80011e2:	f7ff fd77 	bl	8000cd4 <__aeabi_ui2f>
 80011e6:	4603      	mov	r3, r0
 80011e8:	4619      	mov	r1, r3
 80011ea:	4814      	ldr	r0, [pc, #80]	@ (800123c <adc_to_percent+0x64>)
 80011ec:	f7ff fcc0 	bl	8000b70 <__aeabi_fsub>
 80011f0:	4603      	mov	r3, r0
 80011f2:	4913      	ldr	r1, [pc, #76]	@ (8001240 <adc_to_percent+0x68>)
 80011f4:	4618      	mov	r0, r3
 80011f6:	f7ff fe79 	bl	8000eec <__aeabi_fdiv>
 80011fa:	4603      	mov	r3, r0
 80011fc:	4911      	ldr	r1, [pc, #68]	@ (8001244 <adc_to_percent+0x6c>)
 80011fe:	4618      	mov	r0, r3
 8001200:	f7ff fdc0 	bl	8000d84 <__aeabi_fmul>
 8001204:	4603      	mov	r3, r0
 8001206:	60fb      	str	r3, [r7, #12]
	if (doam < 0.0f) {
 8001208:	f04f 0100 	mov.w	r1, #0
 800120c:	68f8      	ldr	r0, [r7, #12]
 800120e:	f7ff ff57 	bl	80010c0 <__aeabi_fcmplt>
 8001212:	4603      	mov	r3, r0
 8001214:	2b00      	cmp	r3, #0
 8001216:	d002      	beq.n	800121e <adc_to_percent+0x46>
		doam = 0.0f;
 8001218:	f04f 0300 	mov.w	r3, #0
 800121c:	60fb      	str	r3, [r7, #12]
	}
	if (doam > 100.0f) {
 800121e:	4909      	ldr	r1, [pc, #36]	@ (8001244 <adc_to_percent+0x6c>)
 8001220:	68f8      	ldr	r0, [r7, #12]
 8001222:	f7ff ff6b 	bl	80010fc <__aeabi_fcmpgt>
 8001226:	4603      	mov	r3, r0
 8001228:	2b00      	cmp	r3, #0
 800122a:	d001      	beq.n	8001230 <adc_to_percent+0x58>
		doam = 100.0f;
 800122c:	4b05      	ldr	r3, [pc, #20]	@ (8001244 <adc_to_percent+0x6c>)
 800122e:	60fb      	str	r3, [r7, #12]
	}
	return doam;
 8001230:	68fb      	ldr	r3, [r7, #12]

}
 8001232:	4618      	mov	r0, r3
 8001234:	3710      	adds	r7, #16
 8001236:	46bd      	mov	sp, r7
 8001238:	bd80      	pop	{r7, pc}
 800123a:	bf00      	nop
 800123c:	457ff000 	.word	0x457ff000
 8001240:	452eb000 	.word	0x452eb000
 8001244:	42c80000 	.word	0x42c80000

08001248 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001248:	b580      	push	{r7, lr}
 800124a:	b088      	sub	sp, #32
 800124c:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800124e:	f000 fca3 	bl	8001b98 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001252:	f000 f86d 	bl	8001330 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001256:	f000 f927 	bl	80014a8 <MX_GPIO_Init>
  MX_I2C1_Init();
 800125a:	f000 f8f7 	bl	800144c <MX_I2C1_Init>
  MX_ADC1_Init();
 800125e:	f000 f8b7 	bl	80013d0 <MX_ADC1_Init>
  /* USER CODE BEGIN 2 */
  ssd1306_init();
 8001262:	f000 f961 	bl	8001528 <ssd1306_init>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* USER CODE END WHILE */
	 HAL_ADC_Start(&hadc1);
 8001266:	482a      	ldr	r0, [pc, #168]	@ (8001310 <main+0xc8>)
 8001268:	f000 fdf4 	bl	8001e54 <HAL_ADC_Start>
	 HAL_ADC_PollForConversion(&hadc1, HAL_MAX_DELAY);
 800126c:	f04f 31ff 	mov.w	r1, #4294967295
 8001270:	4827      	ldr	r0, [pc, #156]	@ (8001310 <main+0xc8>)
 8001272:	f000 fec9 	bl	8002008 <HAL_ADC_PollForConversion>
	 uint32_t raw = read_adc_avg(&hadc1, 8);
 8001276:	2108      	movs	r1, #8
 8001278:	4825      	ldr	r0, [pc, #148]	@ (8001310 <main+0xc8>)
 800127a:	f7ff ff7f 	bl	800117c <read_adc_avg>
 800127e:	6178      	str	r0, [r7, #20]
	 //float volt = adc_to_volt(raw);
	 float doam = adc_to_percent(raw);
 8001280:	6978      	ldr	r0, [r7, #20]
 8001282:	f7ff ffa9 	bl	80011d8 <adc_to_percent>
 8001286:	6138      	str	r0, [r7, #16]
	 sprintf(buf, "DO AM = %.2f", doam);
 8001288:	6938      	ldr	r0, [r7, #16]
 800128a:	f7ff f8cd 	bl	8000428 <__aeabi_f2d>
 800128e:	4602      	mov	r2, r0
 8001290:	460b      	mov	r3, r1
 8001292:	4638      	mov	r0, r7
 8001294:	491f      	ldr	r1, [pc, #124]	@ (8001314 <main+0xcc>)
 8001296:	f003 fd03 	bl	8004ca0 <siprintf>
	 ssd1306_clear();
 800129a:	f000 f9a1 	bl	80015e0 <ssd1306_clear>
	 ssd1306_writeString(buf, 20, 5, Font_5x7);
 800129e:	4b1e      	ldr	r3, [pc, #120]	@ (8001318 <main+0xd0>)
 80012a0:	4638      	mov	r0, r7
 80012a2:	685a      	ldr	r2, [r3, #4]
 80012a4:	9200      	str	r2, [sp, #0]
 80012a6:	681b      	ldr	r3, [r3, #0]
 80012a8:	2205      	movs	r2, #5
 80012aa:	2114      	movs	r1, #20
 80012ac:	f000 fa85 	bl	80017ba <ssd1306_writeString>
	 	  //ssd1306_updateScreen();
	 if(doam > 60.0f){
 80012b0:	491a      	ldr	r1, [pc, #104]	@ (800131c <main+0xd4>)
 80012b2:	6938      	ldr	r0, [r7, #16]
 80012b4:	f7ff ff22 	bl	80010fc <__aeabi_fcmpgt>
 80012b8:	4603      	mov	r3, r0
 80012ba:	2b00      	cmp	r3, #0
 80012bc:	d009      	beq.n	80012d2 <main+0x8a>
		 ssd1306_writeString("KHONG CAN TUOI NUOC!!!!", 15, 15, Font_5x7);
 80012be:	4b16      	ldr	r3, [pc, #88]	@ (8001318 <main+0xd0>)
 80012c0:	685a      	ldr	r2, [r3, #4]
 80012c2:	9200      	str	r2, [sp, #0]
 80012c4:	681b      	ldr	r3, [r3, #0]
 80012c6:	220f      	movs	r2, #15
 80012c8:	210f      	movs	r1, #15
 80012ca:	4815      	ldr	r0, [pc, #84]	@ (8001320 <main+0xd8>)
 80012cc:	f000 fa75 	bl	80017ba <ssd1306_writeString>
 80012d0:	e018      	b.n	8001304 <main+0xbc>
	 		 // ssd1306_updateScreen();
	 }else if (doam < 50.0f) {
 80012d2:	4914      	ldr	r1, [pc, #80]	@ (8001324 <main+0xdc>)
 80012d4:	6938      	ldr	r0, [r7, #16]
 80012d6:	f7ff fef3 	bl	80010c0 <__aeabi_fcmplt>
 80012da:	4603      	mov	r3, r0
 80012dc:	2b00      	cmp	r3, #0
 80012de:	d011      	beq.n	8001304 <main+0xbc>
		 ssd1306_writeString("DAT KHO!!!", 15, 15, Font_5x7);
 80012e0:	4b0d      	ldr	r3, [pc, #52]	@ (8001318 <main+0xd0>)
 80012e2:	685a      	ldr	r2, [r3, #4]
 80012e4:	9200      	str	r2, [sp, #0]
 80012e6:	681b      	ldr	r3, [r3, #0]
 80012e8:	220f      	movs	r2, #15
 80012ea:	210f      	movs	r1, #15
 80012ec:	480e      	ldr	r0, [pc, #56]	@ (8001328 <main+0xe0>)
 80012ee:	f000 fa64 	bl	80017ba <ssd1306_writeString>
		 ssd1306_writeString("CAN TUOI NUOC!!!", 15, 25, Font_5x7);
 80012f2:	4b09      	ldr	r3, [pc, #36]	@ (8001318 <main+0xd0>)
 80012f4:	685a      	ldr	r2, [r3, #4]
 80012f6:	9200      	str	r2, [sp, #0]
 80012f8:	681b      	ldr	r3, [r3, #0]
 80012fa:	2219      	movs	r2, #25
 80012fc:	210f      	movs	r1, #15
 80012fe:	480b      	ldr	r0, [pc, #44]	@ (800132c <main+0xe4>)
 8001300:	f000 fa5b 	bl	80017ba <ssd1306_writeString>
			//ssd1306_updateScreen();
		}
	 ssd1306_updateScreen();
 8001304:	f000 f978 	bl	80015f8 <ssd1306_updateScreen>
	 HAL_Delay(200);
 8001308:	20c8      	movs	r0, #200	@ 0xc8
 800130a:	f000 fca7 	bl	8001c5c <HAL_Delay>
  {
 800130e:	e7aa      	b.n	8001266 <main+0x1e>
 8001310:	200001f0 	.word	0x200001f0
 8001314:	08008520 	.word	0x08008520
 8001318:	08008744 	.word	0x08008744
 800131c:	42700000 	.word	0x42700000
 8001320:	08008530 	.word	0x08008530
 8001324:	42480000 	.word	0x42480000
 8001328:	08008548 	.word	0x08008548
 800132c:	08008554 	.word	0x08008554

08001330 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001330:	b580      	push	{r7, lr}
 8001332:	b094      	sub	sp, #80	@ 0x50
 8001334:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001336:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 800133a:	2228      	movs	r2, #40	@ 0x28
 800133c:	2100      	movs	r1, #0
 800133e:	4618      	mov	r0, r3
 8001340:	f003 fd13 	bl	8004d6a <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001344:	f107 0314 	add.w	r3, r7, #20
 8001348:	2200      	movs	r2, #0
 800134a:	601a      	str	r2, [r3, #0]
 800134c:	605a      	str	r2, [r3, #4]
 800134e:	609a      	str	r2, [r3, #8]
 8001350:	60da      	str	r2, [r3, #12]
 8001352:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001354:	1d3b      	adds	r3, r7, #4
 8001356:	2200      	movs	r2, #0
 8001358:	601a      	str	r2, [r3, #0]
 800135a:	605a      	str	r2, [r3, #4]
 800135c:	609a      	str	r2, [r3, #8]
 800135e:	60da      	str	r2, [r3, #12]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001360:	2302      	movs	r3, #2
 8001362:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001364:	2301      	movs	r3, #1
 8001366:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001368:	2310      	movs	r3, #16
 800136a:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 800136c:	2300      	movs	r3, #0
 800136e:	647b      	str	r3, [r7, #68]	@ 0x44
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001370:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8001374:	4618      	mov	r0, r3
 8001376:	f001 fff1 	bl	800335c <HAL_RCC_OscConfig>
 800137a:	4603      	mov	r3, r0
 800137c:	2b00      	cmp	r3, #0
 800137e:	d001      	beq.n	8001384 <SystemClock_Config+0x54>
  {
    Error_Handler();
 8001380:	f000 f8b4 	bl	80014ec <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001384:	230f      	movs	r3, #15
 8001386:	617b      	str	r3, [r7, #20]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8001388:	2300      	movs	r3, #0
 800138a:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800138c:	2300      	movs	r3, #0
 800138e:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001390:	2300      	movs	r3, #0
 8001392:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001394:	2300      	movs	r3, #0
 8001396:	627b      	str	r3, [r7, #36]	@ 0x24

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8001398:	f107 0314 	add.w	r3, r7, #20
 800139c:	2100      	movs	r1, #0
 800139e:	4618      	mov	r0, r3
 80013a0:	f002 fa5e 	bl	8003860 <HAL_RCC_ClockConfig>
 80013a4:	4603      	mov	r3, r0
 80013a6:	2b00      	cmp	r3, #0
 80013a8:	d001      	beq.n	80013ae <SystemClock_Config+0x7e>
  {
    Error_Handler();
 80013aa:	f000 f89f 	bl	80014ec <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 80013ae:	2302      	movs	r3, #2
 80013b0:	607b      	str	r3, [r7, #4]
  PeriphClkInit.AdcClockSelection = RCC_ADCPCLK2_DIV2;
 80013b2:	2300      	movs	r3, #0
 80013b4:	60fb      	str	r3, [r7, #12]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80013b6:	1d3b      	adds	r3, r7, #4
 80013b8:	4618      	mov	r0, r3
 80013ba:	f002 fbdf 	bl	8003b7c <HAL_RCCEx_PeriphCLKConfig>
 80013be:	4603      	mov	r3, r0
 80013c0:	2b00      	cmp	r3, #0
 80013c2:	d001      	beq.n	80013c8 <SystemClock_Config+0x98>
  {
    Error_Handler();
 80013c4:	f000 f892 	bl	80014ec <Error_Handler>
  }
}
 80013c8:	bf00      	nop
 80013ca:	3750      	adds	r7, #80	@ 0x50
 80013cc:	46bd      	mov	sp, r7
 80013ce:	bd80      	pop	{r7, pc}

080013d0 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 80013d0:	b580      	push	{r7, lr}
 80013d2:	b084      	sub	sp, #16
 80013d4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80013d6:	1d3b      	adds	r3, r7, #4
 80013d8:	2200      	movs	r2, #0
 80013da:	601a      	str	r2, [r3, #0]
 80013dc:	605a      	str	r2, [r3, #4]
 80013de:	609a      	str	r2, [r3, #8]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 80013e0:	4b18      	ldr	r3, [pc, #96]	@ (8001444 <MX_ADC1_Init+0x74>)
 80013e2:	4a19      	ldr	r2, [pc, #100]	@ (8001448 <MX_ADC1_Init+0x78>)
 80013e4:	601a      	str	r2, [r3, #0]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 80013e6:	4b17      	ldr	r3, [pc, #92]	@ (8001444 <MX_ADC1_Init+0x74>)
 80013e8:	2200      	movs	r2, #0
 80013ea:	609a      	str	r2, [r3, #8]
  hadc1.Init.ContinuousConvMode = DISABLE;
 80013ec:	4b15      	ldr	r3, [pc, #84]	@ (8001444 <MX_ADC1_Init+0x74>)
 80013ee:	2200      	movs	r2, #0
 80013f0:	731a      	strb	r2, [r3, #12]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80013f2:	4b14      	ldr	r3, [pc, #80]	@ (8001444 <MX_ADC1_Init+0x74>)
 80013f4:	2200      	movs	r2, #0
 80013f6:	751a      	strb	r2, [r3, #20]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80013f8:	4b12      	ldr	r3, [pc, #72]	@ (8001444 <MX_ADC1_Init+0x74>)
 80013fa:	f44f 2260 	mov.w	r2, #917504	@ 0xe0000
 80013fe:	61da      	str	r2, [r3, #28]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001400:	4b10      	ldr	r3, [pc, #64]	@ (8001444 <MX_ADC1_Init+0x74>)
 8001402:	2200      	movs	r2, #0
 8001404:	605a      	str	r2, [r3, #4]
  hadc1.Init.NbrOfConversion = 1;
 8001406:	4b0f      	ldr	r3, [pc, #60]	@ (8001444 <MX_ADC1_Init+0x74>)
 8001408:	2201      	movs	r2, #1
 800140a:	611a      	str	r2, [r3, #16]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 800140c:	480d      	ldr	r0, [pc, #52]	@ (8001444 <MX_ADC1_Init+0x74>)
 800140e:	f000 fc49 	bl	8001ca4 <HAL_ADC_Init>
 8001412:	4603      	mov	r3, r0
 8001414:	2b00      	cmp	r3, #0
 8001416:	d001      	beq.n	800141c <MX_ADC1_Init+0x4c>
  {
    Error_Handler();
 8001418:	f000 f868 	bl	80014ec <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_7;
 800141c:	2307      	movs	r3, #7
 800141e:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8001420:	2301      	movs	r3, #1
 8001422:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 8001424:	2300      	movs	r3, #0
 8001426:	60fb      	str	r3, [r7, #12]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001428:	1d3b      	adds	r3, r7, #4
 800142a:	4619      	mov	r1, r3
 800142c:	4805      	ldr	r0, [pc, #20]	@ (8001444 <MX_ADC1_Init+0x74>)
 800142e:	f000 fefd 	bl	800222c <HAL_ADC_ConfigChannel>
 8001432:	4603      	mov	r3, r0
 8001434:	2b00      	cmp	r3, #0
 8001436:	d001      	beq.n	800143c <MX_ADC1_Init+0x6c>
  {
    Error_Handler();
 8001438:	f000 f858 	bl	80014ec <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 800143c:	bf00      	nop
 800143e:	3710      	adds	r7, #16
 8001440:	46bd      	mov	sp, r7
 8001442:	bd80      	pop	{r7, pc}
 8001444:	200001f0 	.word	0x200001f0
 8001448:	40012400 	.word	0x40012400

0800144c <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 800144c:	b580      	push	{r7, lr}
 800144e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001450:	4b12      	ldr	r3, [pc, #72]	@ (800149c <MX_I2C1_Init+0x50>)
 8001452:	4a13      	ldr	r2, [pc, #76]	@ (80014a0 <MX_I2C1_Init+0x54>)
 8001454:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8001456:	4b11      	ldr	r3, [pc, #68]	@ (800149c <MX_I2C1_Init+0x50>)
 8001458:	4a12      	ldr	r2, [pc, #72]	@ (80014a4 <MX_I2C1_Init+0x58>)
 800145a:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 800145c:	4b0f      	ldr	r3, [pc, #60]	@ (800149c <MX_I2C1_Init+0x50>)
 800145e:	2200      	movs	r2, #0
 8001460:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8001462:	4b0e      	ldr	r3, [pc, #56]	@ (800149c <MX_I2C1_Init+0x50>)
 8001464:	2200      	movs	r2, #0
 8001466:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001468:	4b0c      	ldr	r3, [pc, #48]	@ (800149c <MX_I2C1_Init+0x50>)
 800146a:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 800146e:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001470:	4b0a      	ldr	r3, [pc, #40]	@ (800149c <MX_I2C1_Init+0x50>)
 8001472:	2200      	movs	r2, #0
 8001474:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8001476:	4b09      	ldr	r3, [pc, #36]	@ (800149c <MX_I2C1_Init+0x50>)
 8001478:	2200      	movs	r2, #0
 800147a:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800147c:	4b07      	ldr	r3, [pc, #28]	@ (800149c <MX_I2C1_Init+0x50>)
 800147e:	2200      	movs	r2, #0
 8001480:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001482:	4b06      	ldr	r3, [pc, #24]	@ (800149c <MX_I2C1_Init+0x50>)
 8001484:	2200      	movs	r2, #0
 8001486:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001488:	4804      	ldr	r0, [pc, #16]	@ (800149c <MX_I2C1_Init+0x50>)
 800148a:	f001 facb 	bl	8002a24 <HAL_I2C_Init>
 800148e:	4603      	mov	r3, r0
 8001490:	2b00      	cmp	r3, #0
 8001492:	d001      	beq.n	8001498 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8001494:	f000 f82a 	bl	80014ec <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8001498:	bf00      	nop
 800149a:	bd80      	pop	{r7, pc}
 800149c:	20000220 	.word	0x20000220
 80014a0:	40005400 	.word	0x40005400
 80014a4:	000186a0 	.word	0x000186a0

080014a8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80014a8:	b480      	push	{r7}
 80014aa:	b083      	sub	sp, #12
 80014ac:	af00      	add	r7, sp, #0
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80014ae:	4b0e      	ldr	r3, [pc, #56]	@ (80014e8 <MX_GPIO_Init+0x40>)
 80014b0:	699b      	ldr	r3, [r3, #24]
 80014b2:	4a0d      	ldr	r2, [pc, #52]	@ (80014e8 <MX_GPIO_Init+0x40>)
 80014b4:	f043 0304 	orr.w	r3, r3, #4
 80014b8:	6193      	str	r3, [r2, #24]
 80014ba:	4b0b      	ldr	r3, [pc, #44]	@ (80014e8 <MX_GPIO_Init+0x40>)
 80014bc:	699b      	ldr	r3, [r3, #24]
 80014be:	f003 0304 	and.w	r3, r3, #4
 80014c2:	607b      	str	r3, [r7, #4]
 80014c4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80014c6:	4b08      	ldr	r3, [pc, #32]	@ (80014e8 <MX_GPIO_Init+0x40>)
 80014c8:	699b      	ldr	r3, [r3, #24]
 80014ca:	4a07      	ldr	r2, [pc, #28]	@ (80014e8 <MX_GPIO_Init+0x40>)
 80014cc:	f043 0308 	orr.w	r3, r3, #8
 80014d0:	6193      	str	r3, [r2, #24]
 80014d2:	4b05      	ldr	r3, [pc, #20]	@ (80014e8 <MX_GPIO_Init+0x40>)
 80014d4:	699b      	ldr	r3, [r3, #24]
 80014d6:	f003 0308 	and.w	r3, r3, #8
 80014da:	603b      	str	r3, [r7, #0]
 80014dc:	683b      	ldr	r3, [r7, #0]

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80014de:	bf00      	nop
 80014e0:	370c      	adds	r7, #12
 80014e2:	46bd      	mov	sp, r7
 80014e4:	bc80      	pop	{r7}
 80014e6:	4770      	bx	lr
 80014e8:	40021000 	.word	0x40021000

080014ec <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80014ec:	b480      	push	{r7}
 80014ee:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80014f0:	b672      	cpsid	i
}
 80014f2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80014f4:	bf00      	nop
 80014f6:	e7fd      	b.n	80014f4 <Error_Handler+0x8>

080014f8 <ssd1306_sendCmd>:
#include "font5x7.h"
#include "string.h"

static uint8_t ssd1306_buffer[128 * 64 / 8];

void ssd1306_sendCmd(uint8_t cmd){
 80014f8:	b580      	push	{r7, lr}
 80014fa:	b086      	sub	sp, #24
 80014fc:	af02      	add	r7, sp, #8
 80014fe:	4603      	mov	r3, r0
 8001500:	71fb      	strb	r3, [r7, #7]
	uint8_t d[2] = {0x00,cmd};
 8001502:	2300      	movs	r3, #0
 8001504:	733b      	strb	r3, [r7, #12]
 8001506:	79fb      	ldrb	r3, [r7, #7]
 8001508:	737b      	strb	r3, [r7, #13]
	HAL_I2C_Master_Transmit(&hi2c1, SSD1306_I2C_ADDR, d, 2, 10);
 800150a:	f107 020c 	add.w	r2, r7, #12
 800150e:	230a      	movs	r3, #10
 8001510:	9300      	str	r3, [sp, #0]
 8001512:	2302      	movs	r3, #2
 8001514:	2178      	movs	r1, #120	@ 0x78
 8001516:	4803      	ldr	r0, [pc, #12]	@ (8001524 <ssd1306_sendCmd+0x2c>)
 8001518:	f001 fbc8 	bl	8002cac <HAL_I2C_Master_Transmit>
}
 800151c:	bf00      	nop
 800151e:	3710      	adds	r7, #16
 8001520:	46bd      	mov	sp, r7
 8001522:	bd80      	pop	{r7, pc}
 8001524:	20000220 	.word	0x20000220

08001528 <ssd1306_init>:

void ssd1306_init(void){
 8001528:	b580      	push	{r7, lr}
 800152a:	af00      	add	r7, sp, #0
    HAL_Delay(100);
 800152c:	2064      	movs	r0, #100	@ 0x64
 800152e:	f000 fb95 	bl	8001c5c <HAL_Delay>
    ssd1306_sendCmd(0xAE); // display off
 8001532:	20ae      	movs	r0, #174	@ 0xae
 8001534:	f7ff ffe0 	bl	80014f8 <ssd1306_sendCmd>
    ssd1306_sendCmd(0x20); ssd1306_sendCmd(0x02); // horizontal addressing
 8001538:	2020      	movs	r0, #32
 800153a:	f7ff ffdd 	bl	80014f8 <ssd1306_sendCmd>
 800153e:	2002      	movs	r0, #2
 8001540:	f7ff ffda 	bl	80014f8 <ssd1306_sendCmd>
    ssd1306_sendCmd(0xB0);
 8001544:	20b0      	movs	r0, #176	@ 0xb0
 8001546:	f7ff ffd7 	bl	80014f8 <ssd1306_sendCmd>
    ssd1306_sendCmd(0xC8);
 800154a:	20c8      	movs	r0, #200	@ 0xc8
 800154c:	f7ff ffd4 	bl	80014f8 <ssd1306_sendCmd>
    ssd1306_sendCmd(0x00);
 8001550:	2000      	movs	r0, #0
 8001552:	f7ff ffd1 	bl	80014f8 <ssd1306_sendCmd>
    ssd1306_sendCmd(0x10);
 8001556:	2010      	movs	r0, #16
 8001558:	f7ff ffce 	bl	80014f8 <ssd1306_sendCmd>
    ssd1306_sendCmd(0x40);
 800155c:	2040      	movs	r0, #64	@ 0x40
 800155e:	f7ff ffcb 	bl	80014f8 <ssd1306_sendCmd>
    ssd1306_sendCmd(0x81); ssd1306_sendCmd(0x7F);
 8001562:	2081      	movs	r0, #129	@ 0x81
 8001564:	f7ff ffc8 	bl	80014f8 <ssd1306_sendCmd>
 8001568:	207f      	movs	r0, #127	@ 0x7f
 800156a:	f7ff ffc5 	bl	80014f8 <ssd1306_sendCmd>
    ssd1306_sendCmd(0xA1);
 800156e:	20a1      	movs	r0, #161	@ 0xa1
 8001570:	f7ff ffc2 	bl	80014f8 <ssd1306_sendCmd>
    ssd1306_sendCmd(0xA6);
 8001574:	20a6      	movs	r0, #166	@ 0xa6
 8001576:	f7ff ffbf 	bl	80014f8 <ssd1306_sendCmd>
    ssd1306_sendCmd(0xA8); ssd1306_sendCmd(0x3F);
 800157a:	20a8      	movs	r0, #168	@ 0xa8
 800157c:	f7ff ffbc 	bl	80014f8 <ssd1306_sendCmd>
 8001580:	203f      	movs	r0, #63	@ 0x3f
 8001582:	f7ff ffb9 	bl	80014f8 <ssd1306_sendCmd>
    //ssd1306_sendCmd(0xA4);
    ssd1306_sendCmd(0xD3); ssd1306_sendCmd(0x00);
 8001586:	20d3      	movs	r0, #211	@ 0xd3
 8001588:	f7ff ffb6 	bl	80014f8 <ssd1306_sendCmd>
 800158c:	2000      	movs	r0, #0
 800158e:	f7ff ffb3 	bl	80014f8 <ssd1306_sendCmd>
    ssd1306_sendCmd(0xD5); ssd1306_sendCmd(0x80);
 8001592:	20d5      	movs	r0, #213	@ 0xd5
 8001594:	f7ff ffb0 	bl	80014f8 <ssd1306_sendCmd>
 8001598:	2080      	movs	r0, #128	@ 0x80
 800159a:	f7ff ffad 	bl	80014f8 <ssd1306_sendCmd>
    ssd1306_sendCmd(0xD9); ssd1306_sendCmd(0xF1);
 800159e:	20d9      	movs	r0, #217	@ 0xd9
 80015a0:	f7ff ffaa 	bl	80014f8 <ssd1306_sendCmd>
 80015a4:	20f1      	movs	r0, #241	@ 0xf1
 80015a6:	f7ff ffa7 	bl	80014f8 <ssd1306_sendCmd>
    ssd1306_sendCmd(0xDA); ssd1306_sendCmd(0x12);
 80015aa:	20da      	movs	r0, #218	@ 0xda
 80015ac:	f7ff ffa4 	bl	80014f8 <ssd1306_sendCmd>
 80015b0:	2012      	movs	r0, #18
 80015b2:	f7ff ffa1 	bl	80014f8 <ssd1306_sendCmd>
    ssd1306_sendCmd(0xDB); ssd1306_sendCmd(0x40);
 80015b6:	20db      	movs	r0, #219	@ 0xdb
 80015b8:	f7ff ff9e 	bl	80014f8 <ssd1306_sendCmd>
 80015bc:	2040      	movs	r0, #64	@ 0x40
 80015be:	f7ff ff9b 	bl	80014f8 <ssd1306_sendCmd>
    ssd1306_sendCmd(0x8D); ssd1306_sendCmd(0x14);
 80015c2:	208d      	movs	r0, #141	@ 0x8d
 80015c4:	f7ff ff98 	bl	80014f8 <ssd1306_sendCmd>
 80015c8:	2014      	movs	r0, #20
 80015ca:	f7ff ff95 	bl	80014f8 <ssd1306_sendCmd>
    ssd1306_sendCmd(0xAF); // display ON
 80015ce:	20af      	movs	r0, #175	@ 0xaf
 80015d0:	f7ff ff92 	bl	80014f8 <ssd1306_sendCmd>
    ssd1306_clear();
 80015d4:	f000 f804 	bl	80015e0 <ssd1306_clear>
    ssd1306_updateScreen();
 80015d8:	f000 f80e 	bl	80015f8 <ssd1306_updateScreen>

}
 80015dc:	bf00      	nop
 80015de:	bd80      	pop	{r7, pc}

080015e0 <ssd1306_clear>:

void ssd1306_clear(void){
 80015e0:	b580      	push	{r7, lr}
 80015e2:	af00      	add	r7, sp, #0
	memset(ssd1306_buffer,0,sizeof(ssd1306_buffer));
 80015e4:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80015e8:	2100      	movs	r1, #0
 80015ea:	4802      	ldr	r0, [pc, #8]	@ (80015f4 <ssd1306_clear+0x14>)
 80015ec:	f003 fbbd 	bl	8004d6a <memset>
}
 80015f0:	bf00      	nop
 80015f2:	bd80      	pop	{r7, pc}
 80015f4:	20000274 	.word	0x20000274

080015f8 <ssd1306_updateScreen>:

void ssd1306_updateScreen(void){
 80015f8:	b580      	push	{r7, lr}
 80015fa:	b0a4      	sub	sp, #144	@ 0x90
 80015fc:	af02      	add	r7, sp, #8
	for (uint8_t i = 0;i < 8; i++) {
 80015fe:	2300      	movs	r3, #0
 8001600:	f887 3087 	strb.w	r3, [r7, #135]	@ 0x87
 8001604:	e026      	b.n	8001654 <ssd1306_updateScreen+0x5c>
		ssd1306_sendCmd(0xB0 + i);
 8001606:	f897 3087 	ldrb.w	r3, [r7, #135]	@ 0x87
 800160a:	3b50      	subs	r3, #80	@ 0x50
 800160c:	b2db      	uxtb	r3, r3
 800160e:	4618      	mov	r0, r3
 8001610:	f7ff ff72 	bl	80014f8 <ssd1306_sendCmd>
		ssd1306_sendCmd(0x00);
 8001614:	2000      	movs	r0, #0
 8001616:	f7ff ff6f 	bl	80014f8 <ssd1306_sendCmd>
		ssd1306_sendCmd(0x10);
 800161a:	2010      	movs	r0, #16
 800161c:	f7ff ff6c 	bl	80014f8 <ssd1306_sendCmd>
		uint8_t data[129];
		data[0]=0x40;
 8001620:	2340      	movs	r3, #64	@ 0x40
 8001622:	713b      	strb	r3, [r7, #4]
		memcpy(&data[1], &ssd1306_buffer[128*i],128);
 8001624:	f897 3087 	ldrb.w	r3, [r7, #135]	@ 0x87
 8001628:	01db      	lsls	r3, r3, #7
 800162a:	4a0f      	ldr	r2, [pc, #60]	@ (8001668 <ssd1306_updateScreen+0x70>)
 800162c:	1899      	adds	r1, r3, r2
 800162e:	1d3b      	adds	r3, r7, #4
 8001630:	3301      	adds	r3, #1
 8001632:	2280      	movs	r2, #128	@ 0x80
 8001634:	4618      	mov	r0, r3
 8001636:	f003 fc26 	bl	8004e86 <memcpy>
		HAL_I2C_Master_Transmit(&hi2c1, SSD1306_I2C_ADDR, data, 129, 100);
 800163a:	1d3a      	adds	r2, r7, #4
 800163c:	2364      	movs	r3, #100	@ 0x64
 800163e:	9300      	str	r3, [sp, #0]
 8001640:	2381      	movs	r3, #129	@ 0x81
 8001642:	2178      	movs	r1, #120	@ 0x78
 8001644:	4809      	ldr	r0, [pc, #36]	@ (800166c <ssd1306_updateScreen+0x74>)
 8001646:	f001 fb31 	bl	8002cac <HAL_I2C_Master_Transmit>
	for (uint8_t i = 0;i < 8; i++) {
 800164a:	f897 3087 	ldrb.w	r3, [r7, #135]	@ 0x87
 800164e:	3301      	adds	r3, #1
 8001650:	f887 3087 	strb.w	r3, [r7, #135]	@ 0x87
 8001654:	f897 3087 	ldrb.w	r3, [r7, #135]	@ 0x87
 8001658:	2b07      	cmp	r3, #7
 800165a:	d9d4      	bls.n	8001606 <ssd1306_updateScreen+0xe>

	}
}
 800165c:	bf00      	nop
 800165e:	bf00      	nop
 8001660:	3788      	adds	r7, #136	@ 0x88
 8001662:	46bd      	mov	sp, r7
 8001664:	bd80      	pop	{r7, pc}
 8001666:	bf00      	nop
 8001668:	20000274 	.word	0x20000274
 800166c:	20000220 	.word	0x20000220

08001670 <ssd1306_drawPixel>:

void ssd1306_drawPixel(uint8_t x, uint8_t y, uint8_t color){
 8001670:	b480      	push	{r7}
 8001672:	b083      	sub	sp, #12
 8001674:	af00      	add	r7, sp, #0
 8001676:	4603      	mov	r3, r0
 8001678:	71fb      	strb	r3, [r7, #7]
 800167a:	460b      	mov	r3, r1
 800167c:	71bb      	strb	r3, [r7, #6]
 800167e:	4613      	mov	r3, r2
 8001680:	717b      	strb	r3, [r7, #5]
	if (x >=128 || y >= 64) {
 8001682:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001686:	2b00      	cmp	r3, #0
 8001688:	db3d      	blt.n	8001706 <ssd1306_drawPixel+0x96>
 800168a:	79bb      	ldrb	r3, [r7, #6]
 800168c:	2b3f      	cmp	r3, #63	@ 0x3f
 800168e:	d83a      	bhi.n	8001706 <ssd1306_drawPixel+0x96>
		return;
	}
	if(color){
 8001690:	797b      	ldrb	r3, [r7, #5]
 8001692:	2b00      	cmp	r3, #0
 8001694:	d01a      	beq.n	80016cc <ssd1306_drawPixel+0x5c>
		ssd1306_buffer[x + (y/8)*128] |= 1<< (y % 8);
 8001696:	79fa      	ldrb	r2, [r7, #7]
 8001698:	79bb      	ldrb	r3, [r7, #6]
 800169a:	08db      	lsrs	r3, r3, #3
 800169c:	b2d8      	uxtb	r0, r3
 800169e:	4603      	mov	r3, r0
 80016a0:	01db      	lsls	r3, r3, #7
 80016a2:	4413      	add	r3, r2
 80016a4:	4a1a      	ldr	r2, [pc, #104]	@ (8001710 <ssd1306_drawPixel+0xa0>)
 80016a6:	5cd3      	ldrb	r3, [r2, r3]
 80016a8:	b25a      	sxtb	r2, r3
 80016aa:	79bb      	ldrb	r3, [r7, #6]
 80016ac:	f003 0307 	and.w	r3, r3, #7
 80016b0:	2101      	movs	r1, #1
 80016b2:	fa01 f303 	lsl.w	r3, r1, r3
 80016b6:	b25b      	sxtb	r3, r3
 80016b8:	4313      	orrs	r3, r2
 80016ba:	b259      	sxtb	r1, r3
 80016bc:	79fa      	ldrb	r2, [r7, #7]
 80016be:	4603      	mov	r3, r0
 80016c0:	01db      	lsls	r3, r3, #7
 80016c2:	4413      	add	r3, r2
 80016c4:	b2c9      	uxtb	r1, r1
 80016c6:	4a12      	ldr	r2, [pc, #72]	@ (8001710 <ssd1306_drawPixel+0xa0>)
 80016c8:	54d1      	strb	r1, [r2, r3]
 80016ca:	e01d      	b.n	8001708 <ssd1306_drawPixel+0x98>
	}
	else {
		ssd1306_buffer[x + (y/8)*128] &= ~(1 <<(y%8));\
 80016cc:	79fa      	ldrb	r2, [r7, #7]
 80016ce:	79bb      	ldrb	r3, [r7, #6]
 80016d0:	08db      	lsrs	r3, r3, #3
 80016d2:	b2d8      	uxtb	r0, r3
 80016d4:	4603      	mov	r3, r0
 80016d6:	01db      	lsls	r3, r3, #7
 80016d8:	4413      	add	r3, r2
 80016da:	4a0d      	ldr	r2, [pc, #52]	@ (8001710 <ssd1306_drawPixel+0xa0>)
 80016dc:	5cd3      	ldrb	r3, [r2, r3]
 80016de:	b25a      	sxtb	r2, r3
 80016e0:	79bb      	ldrb	r3, [r7, #6]
 80016e2:	f003 0307 	and.w	r3, r3, #7
 80016e6:	2101      	movs	r1, #1
 80016e8:	fa01 f303 	lsl.w	r3, r1, r3
 80016ec:	b25b      	sxtb	r3, r3
 80016ee:	43db      	mvns	r3, r3
 80016f0:	b25b      	sxtb	r3, r3
 80016f2:	4013      	ands	r3, r2
 80016f4:	b259      	sxtb	r1, r3
 80016f6:	79fa      	ldrb	r2, [r7, #7]
 80016f8:	4603      	mov	r3, r0
 80016fa:	01db      	lsls	r3, r3, #7
 80016fc:	4413      	add	r3, r2
 80016fe:	b2c9      	uxtb	r1, r1
 8001700:	4a03      	ldr	r2, [pc, #12]	@ (8001710 <ssd1306_drawPixel+0xa0>)
 8001702:	54d1      	strb	r1, [r2, r3]
 8001704:	e000      	b.n	8001708 <ssd1306_drawPixel+0x98>
		return;
 8001706:	bf00      	nop
	}
}
 8001708:	370c      	adds	r7, #12
 800170a:	46bd      	mov	sp, r7
 800170c:	bc80      	pop	{r7}
 800170e:	4770      	bx	lr
 8001710:	20000274 	.word	0x20000274

08001714 <ssd1306_writeChar>:


uint8_t ssd1306_writeChar(char ch, uint8_t x, uint8_t y, FontDef font) {
 8001714:	b082      	sub	sp, #8
 8001716:	b580      	push	{r7, lr}
 8001718:	b084      	sub	sp, #16
 800171a:	af00      	add	r7, sp, #0
 800171c:	61fb      	str	r3, [r7, #28]
 800171e:	4603      	mov	r3, r0
 8001720:	71fb      	strb	r3, [r7, #7]
 8001722:	460b      	mov	r3, r1
 8001724:	71bb      	strb	r3, [r7, #6]
 8001726:	4613      	mov	r3, r2
 8001728:	717b      	strb	r3, [r7, #5]
    if (ch < 32 || ch > 126) return 0;
 800172a:	79fb      	ldrb	r3, [r7, #7]
 800172c:	2b1f      	cmp	r3, #31
 800172e:	d902      	bls.n	8001736 <ssd1306_writeChar+0x22>
 8001730:	79fb      	ldrb	r3, [r7, #7]
 8001732:	2b7e      	cmp	r3, #126	@ 0x7e
 8001734:	d901      	bls.n	800173a <ssd1306_writeChar+0x26>
 8001736:	2300      	movs	r3, #0
 8001738:	e038      	b.n	80017ac <ssd1306_writeChar+0x98>
    uint16_t charIndex = (ch - 32) * font.width;
 800173a:	79fb      	ldrb	r3, [r7, #7]
 800173c:	3b20      	subs	r3, #32
 800173e:	b29b      	uxth	r3, r3
 8001740:	7f3a      	ldrb	r2, [r7, #28]
 8001742:	fb02 f303 	mul.w	r3, r2, r3
 8001746:	81bb      	strh	r3, [r7, #12]

    for (uint8_t i = 0; i < font.width; i++) {
 8001748:	2300      	movs	r3, #0
 800174a:	73fb      	strb	r3, [r7, #15]
 800174c:	e027      	b.n	800179e <ssd1306_writeChar+0x8a>
        uint8_t line = font.data[charIndex + i];
 800174e:	6a3b      	ldr	r3, [r7, #32]
 8001750:	89b9      	ldrh	r1, [r7, #12]
 8001752:	7bfa      	ldrb	r2, [r7, #15]
 8001754:	440a      	add	r2, r1
 8001756:	4413      	add	r3, r2
 8001758:	781b      	ldrb	r3, [r3, #0]
 800175a:	72fb      	strb	r3, [r7, #11]
        for (uint8_t j = 0; j < font.height; j++) {
 800175c:	2300      	movs	r3, #0
 800175e:	73bb      	strb	r3, [r7, #14]
 8001760:	e016      	b.n	8001790 <ssd1306_writeChar+0x7c>
            if (line & (1 << j)) {
 8001762:	7afa      	ldrb	r2, [r7, #11]
 8001764:	7bbb      	ldrb	r3, [r7, #14]
 8001766:	fa42 f303 	asr.w	r3, r2, r3
 800176a:	f003 0301 	and.w	r3, r3, #1
 800176e:	2b00      	cmp	r3, #0
 8001770:	d00b      	beq.n	800178a <ssd1306_writeChar+0x76>
                ssd1306_drawPixel(x + i, y + j, 1);
 8001772:	79ba      	ldrb	r2, [r7, #6]
 8001774:	7bfb      	ldrb	r3, [r7, #15]
 8001776:	4413      	add	r3, r2
 8001778:	b2d8      	uxtb	r0, r3
 800177a:	797a      	ldrb	r2, [r7, #5]
 800177c:	7bbb      	ldrb	r3, [r7, #14]
 800177e:	4413      	add	r3, r2
 8001780:	b2db      	uxtb	r3, r3
 8001782:	2201      	movs	r2, #1
 8001784:	4619      	mov	r1, r3
 8001786:	f7ff ff73 	bl	8001670 <ssd1306_drawPixel>
        for (uint8_t j = 0; j < font.height; j++) {
 800178a:	7bbb      	ldrb	r3, [r7, #14]
 800178c:	3301      	adds	r3, #1
 800178e:	73bb      	strb	r3, [r7, #14]
 8001790:	7f7b      	ldrb	r3, [r7, #29]
 8001792:	7bba      	ldrb	r2, [r7, #14]
 8001794:	429a      	cmp	r2, r3
 8001796:	d3e4      	bcc.n	8001762 <ssd1306_writeChar+0x4e>
    for (uint8_t i = 0; i < font.width; i++) {
 8001798:	7bfb      	ldrb	r3, [r7, #15]
 800179a:	3301      	adds	r3, #1
 800179c:	73fb      	strb	r3, [r7, #15]
 800179e:	7f3b      	ldrb	r3, [r7, #28]
 80017a0:	7bfa      	ldrb	r2, [r7, #15]
 80017a2:	429a      	cmp	r2, r3
 80017a4:	d3d3      	bcc.n	800174e <ssd1306_writeChar+0x3a>
            } /*else {
                ssd1306_drawPixel(x + i, y + j, 0);
            }*/
        }
    }
    return font.width + 1; // khoảng trắng 1 pixel
 80017a6:	7f3b      	ldrb	r3, [r7, #28]
 80017a8:	3301      	adds	r3, #1
 80017aa:	b2db      	uxtb	r3, r3
}
 80017ac:	4618      	mov	r0, r3
 80017ae:	3710      	adds	r7, #16
 80017b0:	46bd      	mov	sp, r7
 80017b2:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80017b6:	b002      	add	sp, #8
 80017b8:	4770      	bx	lr

080017ba <ssd1306_writeString>:

void ssd1306_writeString(char* str, uint8_t x, uint8_t y, FontDef font) {
 80017ba:	b082      	sub	sp, #8
 80017bc:	b580      	push	{r7, lr}
 80017be:	b084      	sub	sp, #16
 80017c0:	af02      	add	r7, sp, #8
 80017c2:	6078      	str	r0, [r7, #4]
 80017c4:	617b      	str	r3, [r7, #20]
 80017c6:	460b      	mov	r3, r1
 80017c8:	70fb      	strb	r3, [r7, #3]
 80017ca:	4613      	mov	r3, r2
 80017cc:	70bb      	strb	r3, [r7, #2]
    while (*str) {
 80017ce:	e010      	b.n	80017f2 <ssd1306_writeString+0x38>
        x += ssd1306_writeChar(*str, x, y, font);
 80017d0:	687b      	ldr	r3, [r7, #4]
 80017d2:	7818      	ldrb	r0, [r3, #0]
 80017d4:	78ba      	ldrb	r2, [r7, #2]
 80017d6:	78f9      	ldrb	r1, [r7, #3]
 80017d8:	69bb      	ldr	r3, [r7, #24]
 80017da:	9300      	str	r3, [sp, #0]
 80017dc:	697b      	ldr	r3, [r7, #20]
 80017de:	f7ff ff99 	bl	8001714 <ssd1306_writeChar>
 80017e2:	4603      	mov	r3, r0
 80017e4:	461a      	mov	r2, r3
 80017e6:	78fb      	ldrb	r3, [r7, #3]
 80017e8:	4413      	add	r3, r2
 80017ea:	70fb      	strb	r3, [r7, #3]
        str++;
 80017ec:	687b      	ldr	r3, [r7, #4]
 80017ee:	3301      	adds	r3, #1
 80017f0:	607b      	str	r3, [r7, #4]
    while (*str) {
 80017f2:	687b      	ldr	r3, [r7, #4]
 80017f4:	781b      	ldrb	r3, [r3, #0]
 80017f6:	2b00      	cmp	r3, #0
 80017f8:	d1ea      	bne.n	80017d0 <ssd1306_writeString+0x16>
    }
}
 80017fa:	bf00      	nop
 80017fc:	bf00      	nop
 80017fe:	3708      	adds	r7, #8
 8001800:	46bd      	mov	sp, r7
 8001802:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8001806:	b002      	add	sp, #8
 8001808:	4770      	bx	lr
	...

0800180c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800180c:	b480      	push	{r7}
 800180e:	b085      	sub	sp, #20
 8001810:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8001812:	4b15      	ldr	r3, [pc, #84]	@ (8001868 <HAL_MspInit+0x5c>)
 8001814:	699b      	ldr	r3, [r3, #24]
 8001816:	4a14      	ldr	r2, [pc, #80]	@ (8001868 <HAL_MspInit+0x5c>)
 8001818:	f043 0301 	orr.w	r3, r3, #1
 800181c:	6193      	str	r3, [r2, #24]
 800181e:	4b12      	ldr	r3, [pc, #72]	@ (8001868 <HAL_MspInit+0x5c>)
 8001820:	699b      	ldr	r3, [r3, #24]
 8001822:	f003 0301 	and.w	r3, r3, #1
 8001826:	60bb      	str	r3, [r7, #8]
 8001828:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 800182a:	4b0f      	ldr	r3, [pc, #60]	@ (8001868 <HAL_MspInit+0x5c>)
 800182c:	69db      	ldr	r3, [r3, #28]
 800182e:	4a0e      	ldr	r2, [pc, #56]	@ (8001868 <HAL_MspInit+0x5c>)
 8001830:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001834:	61d3      	str	r3, [r2, #28]
 8001836:	4b0c      	ldr	r3, [pc, #48]	@ (8001868 <HAL_MspInit+0x5c>)
 8001838:	69db      	ldr	r3, [r3, #28]
 800183a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800183e:	607b      	str	r3, [r7, #4]
 8001840:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8001842:	4b0a      	ldr	r3, [pc, #40]	@ (800186c <HAL_MspInit+0x60>)
 8001844:	685b      	ldr	r3, [r3, #4]
 8001846:	60fb      	str	r3, [r7, #12]
 8001848:	68fb      	ldr	r3, [r7, #12]
 800184a:	f023 63e0 	bic.w	r3, r3, #117440512	@ 0x7000000
 800184e:	60fb      	str	r3, [r7, #12]
 8001850:	68fb      	ldr	r3, [r7, #12]
 8001852:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8001856:	60fb      	str	r3, [r7, #12]
 8001858:	4a04      	ldr	r2, [pc, #16]	@ (800186c <HAL_MspInit+0x60>)
 800185a:	68fb      	ldr	r3, [r7, #12]
 800185c:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800185e:	bf00      	nop
 8001860:	3714      	adds	r7, #20
 8001862:	46bd      	mov	sp, r7
 8001864:	bc80      	pop	{r7}
 8001866:	4770      	bx	lr
 8001868:	40021000 	.word	0x40021000
 800186c:	40010000 	.word	0x40010000

08001870 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8001870:	b580      	push	{r7, lr}
 8001872:	b088      	sub	sp, #32
 8001874:	af00      	add	r7, sp, #0
 8001876:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001878:	f107 0310 	add.w	r3, r7, #16
 800187c:	2200      	movs	r2, #0
 800187e:	601a      	str	r2, [r3, #0]
 8001880:	605a      	str	r2, [r3, #4]
 8001882:	609a      	str	r2, [r3, #8]
 8001884:	60da      	str	r2, [r3, #12]
  if(hadc->Instance==ADC1)
 8001886:	687b      	ldr	r3, [r7, #4]
 8001888:	681b      	ldr	r3, [r3, #0]
 800188a:	4a14      	ldr	r2, [pc, #80]	@ (80018dc <HAL_ADC_MspInit+0x6c>)
 800188c:	4293      	cmp	r3, r2
 800188e:	d121      	bne.n	80018d4 <HAL_ADC_MspInit+0x64>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8001890:	4b13      	ldr	r3, [pc, #76]	@ (80018e0 <HAL_ADC_MspInit+0x70>)
 8001892:	699b      	ldr	r3, [r3, #24]
 8001894:	4a12      	ldr	r2, [pc, #72]	@ (80018e0 <HAL_ADC_MspInit+0x70>)
 8001896:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800189a:	6193      	str	r3, [r2, #24]
 800189c:	4b10      	ldr	r3, [pc, #64]	@ (80018e0 <HAL_ADC_MspInit+0x70>)
 800189e:	699b      	ldr	r3, [r3, #24]
 80018a0:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80018a4:	60fb      	str	r3, [r7, #12]
 80018a6:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80018a8:	4b0d      	ldr	r3, [pc, #52]	@ (80018e0 <HAL_ADC_MspInit+0x70>)
 80018aa:	699b      	ldr	r3, [r3, #24]
 80018ac:	4a0c      	ldr	r2, [pc, #48]	@ (80018e0 <HAL_ADC_MspInit+0x70>)
 80018ae:	f043 0304 	orr.w	r3, r3, #4
 80018b2:	6193      	str	r3, [r2, #24]
 80018b4:	4b0a      	ldr	r3, [pc, #40]	@ (80018e0 <HAL_ADC_MspInit+0x70>)
 80018b6:	699b      	ldr	r3, [r3, #24]
 80018b8:	f003 0304 	and.w	r3, r3, #4
 80018bc:	60bb      	str	r3, [r7, #8]
 80018be:	68bb      	ldr	r3, [r7, #8]
    /**ADC1 GPIO Configuration
    PA7     ------> ADC1_IN7
    */
    GPIO_InitStruct.Pin = GPIO_PIN_7;
 80018c0:	2380      	movs	r3, #128	@ 0x80
 80018c2:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80018c4:	2303      	movs	r3, #3
 80018c6:	617b      	str	r3, [r7, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80018c8:	f107 0310 	add.w	r3, r7, #16
 80018cc:	4619      	mov	r1, r3
 80018ce:	4805      	ldr	r0, [pc, #20]	@ (80018e4 <HAL_ADC_MspInit+0x74>)
 80018d0:	f000 ff24 	bl	800271c <HAL_GPIO_Init>

  /* USER CODE END ADC1_MspInit 1 */

  }

}
 80018d4:	bf00      	nop
 80018d6:	3720      	adds	r7, #32
 80018d8:	46bd      	mov	sp, r7
 80018da:	bd80      	pop	{r7, pc}
 80018dc:	40012400 	.word	0x40012400
 80018e0:	40021000 	.word	0x40021000
 80018e4:	40010800 	.word	0x40010800

080018e8 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80018e8:	b580      	push	{r7, lr}
 80018ea:	b088      	sub	sp, #32
 80018ec:	af00      	add	r7, sp, #0
 80018ee:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80018f0:	f107 0310 	add.w	r3, r7, #16
 80018f4:	2200      	movs	r2, #0
 80018f6:	601a      	str	r2, [r3, #0]
 80018f8:	605a      	str	r2, [r3, #4]
 80018fa:	609a      	str	r2, [r3, #8]
 80018fc:	60da      	str	r2, [r3, #12]
  if(hi2c->Instance==I2C1)
 80018fe:	687b      	ldr	r3, [r7, #4]
 8001900:	681b      	ldr	r3, [r3, #0]
 8001902:	4a15      	ldr	r2, [pc, #84]	@ (8001958 <HAL_I2C_MspInit+0x70>)
 8001904:	4293      	cmp	r3, r2
 8001906:	d123      	bne.n	8001950 <HAL_I2C_MspInit+0x68>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001908:	4b14      	ldr	r3, [pc, #80]	@ (800195c <HAL_I2C_MspInit+0x74>)
 800190a:	699b      	ldr	r3, [r3, #24]
 800190c:	4a13      	ldr	r2, [pc, #76]	@ (800195c <HAL_I2C_MspInit+0x74>)
 800190e:	f043 0308 	orr.w	r3, r3, #8
 8001912:	6193      	str	r3, [r2, #24]
 8001914:	4b11      	ldr	r3, [pc, #68]	@ (800195c <HAL_I2C_MspInit+0x74>)
 8001916:	699b      	ldr	r3, [r3, #24]
 8001918:	f003 0308 	and.w	r3, r3, #8
 800191c:	60fb      	str	r3, [r7, #12]
 800191e:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8001920:	23c0      	movs	r3, #192	@ 0xc0
 8001922:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001924:	2312      	movs	r3, #18
 8001926:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001928:	2303      	movs	r3, #3
 800192a:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800192c:	f107 0310 	add.w	r3, r7, #16
 8001930:	4619      	mov	r1, r3
 8001932:	480b      	ldr	r0, [pc, #44]	@ (8001960 <HAL_I2C_MspInit+0x78>)
 8001934:	f000 fef2 	bl	800271c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001938:	4b08      	ldr	r3, [pc, #32]	@ (800195c <HAL_I2C_MspInit+0x74>)
 800193a:	69db      	ldr	r3, [r3, #28]
 800193c:	4a07      	ldr	r2, [pc, #28]	@ (800195c <HAL_I2C_MspInit+0x74>)
 800193e:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8001942:	61d3      	str	r3, [r2, #28]
 8001944:	4b05      	ldr	r3, [pc, #20]	@ (800195c <HAL_I2C_MspInit+0x74>)
 8001946:	69db      	ldr	r3, [r3, #28]
 8001948:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800194c:	60bb      	str	r3, [r7, #8]
 800194e:	68bb      	ldr	r3, [r7, #8]

  /* USER CODE END I2C1_MspInit 1 */

  }

}
 8001950:	bf00      	nop
 8001952:	3720      	adds	r7, #32
 8001954:	46bd      	mov	sp, r7
 8001956:	bd80      	pop	{r7, pc}
 8001958:	40005400 	.word	0x40005400
 800195c:	40021000 	.word	0x40021000
 8001960:	40010c00 	.word	0x40010c00

08001964 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001964:	b480      	push	{r7}
 8001966:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001968:	bf00      	nop
 800196a:	e7fd      	b.n	8001968 <NMI_Handler+0x4>

0800196c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800196c:	b480      	push	{r7}
 800196e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001970:	bf00      	nop
 8001972:	e7fd      	b.n	8001970 <HardFault_Handler+0x4>

08001974 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001974:	b480      	push	{r7}
 8001976:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001978:	bf00      	nop
 800197a:	e7fd      	b.n	8001978 <MemManage_Handler+0x4>

0800197c <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800197c:	b480      	push	{r7}
 800197e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001980:	bf00      	nop
 8001982:	e7fd      	b.n	8001980 <BusFault_Handler+0x4>

08001984 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001984:	b480      	push	{r7}
 8001986:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001988:	bf00      	nop
 800198a:	e7fd      	b.n	8001988 <UsageFault_Handler+0x4>

0800198c <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800198c:	b480      	push	{r7}
 800198e:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001990:	bf00      	nop
 8001992:	46bd      	mov	sp, r7
 8001994:	bc80      	pop	{r7}
 8001996:	4770      	bx	lr

08001998 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001998:	b480      	push	{r7}
 800199a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800199c:	bf00      	nop
 800199e:	46bd      	mov	sp, r7
 80019a0:	bc80      	pop	{r7}
 80019a2:	4770      	bx	lr

080019a4 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80019a4:	b480      	push	{r7}
 80019a6:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80019a8:	bf00      	nop
 80019aa:	46bd      	mov	sp, r7
 80019ac:	bc80      	pop	{r7}
 80019ae:	4770      	bx	lr

080019b0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80019b0:	b580      	push	{r7, lr}
 80019b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80019b4:	f000 f936 	bl	8001c24 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80019b8:	bf00      	nop
 80019ba:	bd80      	pop	{r7, pc}

080019bc <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80019bc:	b480      	push	{r7}
 80019be:	af00      	add	r7, sp, #0
  return 1;
 80019c0:	2301      	movs	r3, #1
}
 80019c2:	4618      	mov	r0, r3
 80019c4:	46bd      	mov	sp, r7
 80019c6:	bc80      	pop	{r7}
 80019c8:	4770      	bx	lr

080019ca <_kill>:

int _kill(int pid, int sig)
{
 80019ca:	b580      	push	{r7, lr}
 80019cc:	b082      	sub	sp, #8
 80019ce:	af00      	add	r7, sp, #0
 80019d0:	6078      	str	r0, [r7, #4]
 80019d2:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 80019d4:	f003 fa1c 	bl	8004e10 <__errno>
 80019d8:	4603      	mov	r3, r0
 80019da:	2216      	movs	r2, #22
 80019dc:	601a      	str	r2, [r3, #0]
  return -1;
 80019de:	f04f 33ff 	mov.w	r3, #4294967295
}
 80019e2:	4618      	mov	r0, r3
 80019e4:	3708      	adds	r7, #8
 80019e6:	46bd      	mov	sp, r7
 80019e8:	bd80      	pop	{r7, pc}

080019ea <_exit>:

void _exit (int status)
{
 80019ea:	b580      	push	{r7, lr}
 80019ec:	b082      	sub	sp, #8
 80019ee:	af00      	add	r7, sp, #0
 80019f0:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 80019f2:	f04f 31ff 	mov.w	r1, #4294967295
 80019f6:	6878      	ldr	r0, [r7, #4]
 80019f8:	f7ff ffe7 	bl	80019ca <_kill>
  while (1) {}    /* Make sure we hang here */
 80019fc:	bf00      	nop
 80019fe:	e7fd      	b.n	80019fc <_exit+0x12>

08001a00 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001a00:	b580      	push	{r7, lr}
 8001a02:	b086      	sub	sp, #24
 8001a04:	af00      	add	r7, sp, #0
 8001a06:	60f8      	str	r0, [r7, #12]
 8001a08:	60b9      	str	r1, [r7, #8]
 8001a0a:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001a0c:	2300      	movs	r3, #0
 8001a0e:	617b      	str	r3, [r7, #20]
 8001a10:	e00a      	b.n	8001a28 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8001a12:	f3af 8000 	nop.w
 8001a16:	4601      	mov	r1, r0
 8001a18:	68bb      	ldr	r3, [r7, #8]
 8001a1a:	1c5a      	adds	r2, r3, #1
 8001a1c:	60ba      	str	r2, [r7, #8]
 8001a1e:	b2ca      	uxtb	r2, r1
 8001a20:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001a22:	697b      	ldr	r3, [r7, #20]
 8001a24:	3301      	adds	r3, #1
 8001a26:	617b      	str	r3, [r7, #20]
 8001a28:	697a      	ldr	r2, [r7, #20]
 8001a2a:	687b      	ldr	r3, [r7, #4]
 8001a2c:	429a      	cmp	r2, r3
 8001a2e:	dbf0      	blt.n	8001a12 <_read+0x12>
  }

  return len;
 8001a30:	687b      	ldr	r3, [r7, #4]
}
 8001a32:	4618      	mov	r0, r3
 8001a34:	3718      	adds	r7, #24
 8001a36:	46bd      	mov	sp, r7
 8001a38:	bd80      	pop	{r7, pc}

08001a3a <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001a3a:	b580      	push	{r7, lr}
 8001a3c:	b086      	sub	sp, #24
 8001a3e:	af00      	add	r7, sp, #0
 8001a40:	60f8      	str	r0, [r7, #12]
 8001a42:	60b9      	str	r1, [r7, #8]
 8001a44:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001a46:	2300      	movs	r3, #0
 8001a48:	617b      	str	r3, [r7, #20]
 8001a4a:	e009      	b.n	8001a60 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8001a4c:	68bb      	ldr	r3, [r7, #8]
 8001a4e:	1c5a      	adds	r2, r3, #1
 8001a50:	60ba      	str	r2, [r7, #8]
 8001a52:	781b      	ldrb	r3, [r3, #0]
 8001a54:	4618      	mov	r0, r3
 8001a56:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001a5a:	697b      	ldr	r3, [r7, #20]
 8001a5c:	3301      	adds	r3, #1
 8001a5e:	617b      	str	r3, [r7, #20]
 8001a60:	697a      	ldr	r2, [r7, #20]
 8001a62:	687b      	ldr	r3, [r7, #4]
 8001a64:	429a      	cmp	r2, r3
 8001a66:	dbf1      	blt.n	8001a4c <_write+0x12>
  }
  return len;
 8001a68:	687b      	ldr	r3, [r7, #4]
}
 8001a6a:	4618      	mov	r0, r3
 8001a6c:	3718      	adds	r7, #24
 8001a6e:	46bd      	mov	sp, r7
 8001a70:	bd80      	pop	{r7, pc}

08001a72 <_close>:

int _close(int file)
{
 8001a72:	b480      	push	{r7}
 8001a74:	b083      	sub	sp, #12
 8001a76:	af00      	add	r7, sp, #0
 8001a78:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8001a7a:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001a7e:	4618      	mov	r0, r3
 8001a80:	370c      	adds	r7, #12
 8001a82:	46bd      	mov	sp, r7
 8001a84:	bc80      	pop	{r7}
 8001a86:	4770      	bx	lr

08001a88 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001a88:	b480      	push	{r7}
 8001a8a:	b083      	sub	sp, #12
 8001a8c:	af00      	add	r7, sp, #0
 8001a8e:	6078      	str	r0, [r7, #4]
 8001a90:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8001a92:	683b      	ldr	r3, [r7, #0]
 8001a94:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8001a98:	605a      	str	r2, [r3, #4]
  return 0;
 8001a9a:	2300      	movs	r3, #0
}
 8001a9c:	4618      	mov	r0, r3
 8001a9e:	370c      	adds	r7, #12
 8001aa0:	46bd      	mov	sp, r7
 8001aa2:	bc80      	pop	{r7}
 8001aa4:	4770      	bx	lr

08001aa6 <_isatty>:

int _isatty(int file)
{
 8001aa6:	b480      	push	{r7}
 8001aa8:	b083      	sub	sp, #12
 8001aaa:	af00      	add	r7, sp, #0
 8001aac:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8001aae:	2301      	movs	r3, #1
}
 8001ab0:	4618      	mov	r0, r3
 8001ab2:	370c      	adds	r7, #12
 8001ab4:	46bd      	mov	sp, r7
 8001ab6:	bc80      	pop	{r7}
 8001ab8:	4770      	bx	lr

08001aba <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001aba:	b480      	push	{r7}
 8001abc:	b085      	sub	sp, #20
 8001abe:	af00      	add	r7, sp, #0
 8001ac0:	60f8      	str	r0, [r7, #12]
 8001ac2:	60b9      	str	r1, [r7, #8]
 8001ac4:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8001ac6:	2300      	movs	r3, #0
}
 8001ac8:	4618      	mov	r0, r3
 8001aca:	3714      	adds	r7, #20
 8001acc:	46bd      	mov	sp, r7
 8001ace:	bc80      	pop	{r7}
 8001ad0:	4770      	bx	lr
	...

08001ad4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001ad4:	b580      	push	{r7, lr}
 8001ad6:	b086      	sub	sp, #24
 8001ad8:	af00      	add	r7, sp, #0
 8001ada:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001adc:	4a14      	ldr	r2, [pc, #80]	@ (8001b30 <_sbrk+0x5c>)
 8001ade:	4b15      	ldr	r3, [pc, #84]	@ (8001b34 <_sbrk+0x60>)
 8001ae0:	1ad3      	subs	r3, r2, r3
 8001ae2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001ae4:	697b      	ldr	r3, [r7, #20]
 8001ae6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001ae8:	4b13      	ldr	r3, [pc, #76]	@ (8001b38 <_sbrk+0x64>)
 8001aea:	681b      	ldr	r3, [r3, #0]
 8001aec:	2b00      	cmp	r3, #0
 8001aee:	d102      	bne.n	8001af6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001af0:	4b11      	ldr	r3, [pc, #68]	@ (8001b38 <_sbrk+0x64>)
 8001af2:	4a12      	ldr	r2, [pc, #72]	@ (8001b3c <_sbrk+0x68>)
 8001af4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001af6:	4b10      	ldr	r3, [pc, #64]	@ (8001b38 <_sbrk+0x64>)
 8001af8:	681a      	ldr	r2, [r3, #0]
 8001afa:	687b      	ldr	r3, [r7, #4]
 8001afc:	4413      	add	r3, r2
 8001afe:	693a      	ldr	r2, [r7, #16]
 8001b00:	429a      	cmp	r2, r3
 8001b02:	d207      	bcs.n	8001b14 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001b04:	f003 f984 	bl	8004e10 <__errno>
 8001b08:	4603      	mov	r3, r0
 8001b0a:	220c      	movs	r2, #12
 8001b0c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001b0e:	f04f 33ff 	mov.w	r3, #4294967295
 8001b12:	e009      	b.n	8001b28 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001b14:	4b08      	ldr	r3, [pc, #32]	@ (8001b38 <_sbrk+0x64>)
 8001b16:	681b      	ldr	r3, [r3, #0]
 8001b18:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001b1a:	4b07      	ldr	r3, [pc, #28]	@ (8001b38 <_sbrk+0x64>)
 8001b1c:	681a      	ldr	r2, [r3, #0]
 8001b1e:	687b      	ldr	r3, [r7, #4]
 8001b20:	4413      	add	r3, r2
 8001b22:	4a05      	ldr	r2, [pc, #20]	@ (8001b38 <_sbrk+0x64>)
 8001b24:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001b26:	68fb      	ldr	r3, [r7, #12]
}
 8001b28:	4618      	mov	r0, r3
 8001b2a:	3718      	adds	r7, #24
 8001b2c:	46bd      	mov	sp, r7
 8001b2e:	bd80      	pop	{r7, pc}
 8001b30:	20005000 	.word	0x20005000
 8001b34:	00000400 	.word	0x00000400
 8001b38:	20000674 	.word	0x20000674
 8001b3c:	200007c8 	.word	0x200007c8

08001b40 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001b40:	b480      	push	{r7}
 8001b42:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001b44:	bf00      	nop
 8001b46:	46bd      	mov	sp, r7
 8001b48:	bc80      	pop	{r7}
 8001b4a:	4770      	bx	lr

08001b4c <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8001b4c:	f7ff fff8 	bl	8001b40 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001b50:	480b      	ldr	r0, [pc, #44]	@ (8001b80 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 8001b52:	490c      	ldr	r1, [pc, #48]	@ (8001b84 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8001b54:	4a0c      	ldr	r2, [pc, #48]	@ (8001b88 <LoopFillZerobss+0x16>)
  movs r3, #0
 8001b56:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001b58:	e002      	b.n	8001b60 <LoopCopyDataInit>

08001b5a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001b5a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001b5c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001b5e:	3304      	adds	r3, #4

08001b60 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001b60:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001b62:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001b64:	d3f9      	bcc.n	8001b5a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001b66:	4a09      	ldr	r2, [pc, #36]	@ (8001b8c <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8001b68:	4c09      	ldr	r4, [pc, #36]	@ (8001b90 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001b6a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001b6c:	e001      	b.n	8001b72 <LoopFillZerobss>

08001b6e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001b6e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001b70:	3204      	adds	r2, #4

08001b72 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001b72:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001b74:	d3fb      	bcc.n	8001b6e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001b76:	f003 f951 	bl	8004e1c <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8001b7a:	f7ff fb65 	bl	8001248 <main>
  bx lr
 8001b7e:	4770      	bx	lr
  ldr r0, =_sdata
 8001b80:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001b84:	200001d4 	.word	0x200001d4
  ldr r2, =_sidata
 8001b88:	08008bc4 	.word	0x08008bc4
  ldr r2, =_sbss
 8001b8c:	200001d4 	.word	0x200001d4
  ldr r4, =_ebss
 8001b90:	200007c8 	.word	0x200007c8

08001b94 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001b94:	e7fe      	b.n	8001b94 <ADC1_2_IRQHandler>
	...

08001b98 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001b98:	b580      	push	{r7, lr}
 8001b9a:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001b9c:	4b08      	ldr	r3, [pc, #32]	@ (8001bc0 <HAL_Init+0x28>)
 8001b9e:	681b      	ldr	r3, [r3, #0]
 8001ba0:	4a07      	ldr	r2, [pc, #28]	@ (8001bc0 <HAL_Init+0x28>)
 8001ba2:	f043 0310 	orr.w	r3, r3, #16
 8001ba6:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001ba8:	2003      	movs	r0, #3
 8001baa:	f000 fd83 	bl	80026b4 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001bae:	200f      	movs	r0, #15
 8001bb0:	f000 f808 	bl	8001bc4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001bb4:	f7ff fe2a 	bl	800180c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001bb8:	2300      	movs	r3, #0
}
 8001bba:	4618      	mov	r0, r3
 8001bbc:	bd80      	pop	{r7, pc}
 8001bbe:	bf00      	nop
 8001bc0:	40022000 	.word	0x40022000

08001bc4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001bc4:	b580      	push	{r7, lr}
 8001bc6:	b082      	sub	sp, #8
 8001bc8:	af00      	add	r7, sp, #0
 8001bca:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001bcc:	4b12      	ldr	r3, [pc, #72]	@ (8001c18 <HAL_InitTick+0x54>)
 8001bce:	681a      	ldr	r2, [r3, #0]
 8001bd0:	4b12      	ldr	r3, [pc, #72]	@ (8001c1c <HAL_InitTick+0x58>)
 8001bd2:	781b      	ldrb	r3, [r3, #0]
 8001bd4:	4619      	mov	r1, r3
 8001bd6:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001bda:	fbb3 f3f1 	udiv	r3, r3, r1
 8001bde:	fbb2 f3f3 	udiv	r3, r2, r3
 8001be2:	4618      	mov	r0, r3
 8001be4:	f000 fd8d 	bl	8002702 <HAL_SYSTICK_Config>
 8001be8:	4603      	mov	r3, r0
 8001bea:	2b00      	cmp	r3, #0
 8001bec:	d001      	beq.n	8001bf2 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001bee:	2301      	movs	r3, #1
 8001bf0:	e00e      	b.n	8001c10 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001bf2:	687b      	ldr	r3, [r7, #4]
 8001bf4:	2b0f      	cmp	r3, #15
 8001bf6:	d80a      	bhi.n	8001c0e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001bf8:	2200      	movs	r2, #0
 8001bfa:	6879      	ldr	r1, [r7, #4]
 8001bfc:	f04f 30ff 	mov.w	r0, #4294967295
 8001c00:	f000 fd63 	bl	80026ca <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001c04:	4a06      	ldr	r2, [pc, #24]	@ (8001c20 <HAL_InitTick+0x5c>)
 8001c06:	687b      	ldr	r3, [r7, #4]
 8001c08:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001c0a:	2300      	movs	r3, #0
 8001c0c:	e000      	b.n	8001c10 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001c0e:	2301      	movs	r3, #1
}
 8001c10:	4618      	mov	r0, r3
 8001c12:	3708      	adds	r7, #8
 8001c14:	46bd      	mov	sp, r7
 8001c16:	bd80      	pop	{r7, pc}
 8001c18:	20000000 	.word	0x20000000
 8001c1c:	20000008 	.word	0x20000008
 8001c20:	20000004 	.word	0x20000004

08001c24 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001c24:	b480      	push	{r7}
 8001c26:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001c28:	4b05      	ldr	r3, [pc, #20]	@ (8001c40 <HAL_IncTick+0x1c>)
 8001c2a:	781b      	ldrb	r3, [r3, #0]
 8001c2c:	461a      	mov	r2, r3
 8001c2e:	4b05      	ldr	r3, [pc, #20]	@ (8001c44 <HAL_IncTick+0x20>)
 8001c30:	681b      	ldr	r3, [r3, #0]
 8001c32:	4413      	add	r3, r2
 8001c34:	4a03      	ldr	r2, [pc, #12]	@ (8001c44 <HAL_IncTick+0x20>)
 8001c36:	6013      	str	r3, [r2, #0]
}
 8001c38:	bf00      	nop
 8001c3a:	46bd      	mov	sp, r7
 8001c3c:	bc80      	pop	{r7}
 8001c3e:	4770      	bx	lr
 8001c40:	20000008 	.word	0x20000008
 8001c44:	20000678 	.word	0x20000678

08001c48 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001c48:	b480      	push	{r7}
 8001c4a:	af00      	add	r7, sp, #0
  return uwTick;
 8001c4c:	4b02      	ldr	r3, [pc, #8]	@ (8001c58 <HAL_GetTick+0x10>)
 8001c4e:	681b      	ldr	r3, [r3, #0]
}
 8001c50:	4618      	mov	r0, r3
 8001c52:	46bd      	mov	sp, r7
 8001c54:	bc80      	pop	{r7}
 8001c56:	4770      	bx	lr
 8001c58:	20000678 	.word	0x20000678

08001c5c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001c5c:	b580      	push	{r7, lr}
 8001c5e:	b084      	sub	sp, #16
 8001c60:	af00      	add	r7, sp, #0
 8001c62:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001c64:	f7ff fff0 	bl	8001c48 <HAL_GetTick>
 8001c68:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001c6a:	687b      	ldr	r3, [r7, #4]
 8001c6c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001c6e:	68fb      	ldr	r3, [r7, #12]
 8001c70:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001c74:	d005      	beq.n	8001c82 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001c76:	4b0a      	ldr	r3, [pc, #40]	@ (8001ca0 <HAL_Delay+0x44>)
 8001c78:	781b      	ldrb	r3, [r3, #0]
 8001c7a:	461a      	mov	r2, r3
 8001c7c:	68fb      	ldr	r3, [r7, #12]
 8001c7e:	4413      	add	r3, r2
 8001c80:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001c82:	bf00      	nop
 8001c84:	f7ff ffe0 	bl	8001c48 <HAL_GetTick>
 8001c88:	4602      	mov	r2, r0
 8001c8a:	68bb      	ldr	r3, [r7, #8]
 8001c8c:	1ad3      	subs	r3, r2, r3
 8001c8e:	68fa      	ldr	r2, [r7, #12]
 8001c90:	429a      	cmp	r2, r3
 8001c92:	d8f7      	bhi.n	8001c84 <HAL_Delay+0x28>
  {
  }
}
 8001c94:	bf00      	nop
 8001c96:	bf00      	nop
 8001c98:	3710      	adds	r7, #16
 8001c9a:	46bd      	mov	sp, r7
 8001c9c:	bd80      	pop	{r7, pc}
 8001c9e:	bf00      	nop
 8001ca0:	20000008 	.word	0x20000008

08001ca4 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8001ca4:	b580      	push	{r7, lr}
 8001ca6:	b086      	sub	sp, #24
 8001ca8:	af00      	add	r7, sp, #0
 8001caa:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001cac:	2300      	movs	r3, #0
 8001cae:	75fb      	strb	r3, [r7, #23]
  uint32_t tmp_cr1 = 0U;
 8001cb0:	2300      	movs	r3, #0
 8001cb2:	613b      	str	r3, [r7, #16]
  uint32_t tmp_cr2 = 0U;
 8001cb4:	2300      	movs	r3, #0
 8001cb6:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_sqr1 = 0U;
 8001cb8:	2300      	movs	r3, #0
 8001cba:	60fb      	str	r3, [r7, #12]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8001cbc:	687b      	ldr	r3, [r7, #4]
 8001cbe:	2b00      	cmp	r3, #0
 8001cc0:	d101      	bne.n	8001cc6 <HAL_ADC_Init+0x22>
  {
    return HAL_ERROR;
 8001cc2:	2301      	movs	r3, #1
 8001cc4:	e0be      	b.n	8001e44 <HAL_ADC_Init+0x1a0>
  assert_param(IS_ADC_DATA_ALIGN(hadc->Init.DataAlign));
  assert_param(IS_ADC_SCAN_MODE(hadc->Init.ScanConvMode));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXTTRIG(hadc->Init.ExternalTrigConv));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8001cc6:	687b      	ldr	r3, [r7, #4]
 8001cc8:	689b      	ldr	r3, [r3, #8]
 8001cca:	2b00      	cmp	r3, #0
  /* Refer to header of this file for more details on clock enabling          */
  /* procedure.                                                               */

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8001ccc:	687b      	ldr	r3, [r7, #4]
 8001cce:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001cd0:	2b00      	cmp	r3, #0
 8001cd2:	d109      	bne.n	8001ce8 <HAL_ADC_Init+0x44>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8001cd4:	687b      	ldr	r3, [r7, #4]
 8001cd6:	2200      	movs	r2, #0
 8001cd8:	62da      	str	r2, [r3, #44]	@ 0x2c
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8001cda:	687b      	ldr	r3, [r7, #4]
 8001cdc:	2200      	movs	r2, #0
 8001cde:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001ce2:	6878      	ldr	r0, [r7, #4]
 8001ce4:	f7ff fdc4 	bl	8001870 <HAL_ADC_MspInit>
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  /* Note: In case of ADC already enabled, precaution to not launch an        */
  /*       unwanted conversion while modifying register CR2 by writing 1 to   */
  /*       bit ADON.                                                          */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 8001ce8:	6878      	ldr	r0, [r7, #4]
 8001cea:	f000 fbf1 	bl	80024d0 <ADC_ConversionStop_Disable>
 8001cee:	4603      	mov	r3, r0
 8001cf0:	75fb      	strb	r3, [r7, #23]
  
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8001cf2:	687b      	ldr	r3, [r7, #4]
 8001cf4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001cf6:	f003 0310 	and.w	r3, r3, #16
 8001cfa:	2b00      	cmp	r3, #0
 8001cfc:	f040 8099 	bne.w	8001e32 <HAL_ADC_Init+0x18e>
 8001d00:	7dfb      	ldrb	r3, [r7, #23]
 8001d02:	2b00      	cmp	r3, #0
 8001d04:	f040 8095 	bne.w	8001e32 <HAL_ADC_Init+0x18e>
      (tmp_hal_status == HAL_OK)                                  )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001d08:	687b      	ldr	r3, [r7, #4]
 8001d0a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001d0c:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 8001d10:	f023 0302 	bic.w	r3, r3, #2
 8001d14:	f043 0202 	orr.w	r2, r3, #2
 8001d18:	687b      	ldr	r3, [r7, #4]
 8001d1a:	629a      	str	r2, [r3, #40]	@ 0x28
    /*  - continuous conversion mode                                          */
    /* Note: External trigger polarity (ADC_CR2_EXTTRIG) is set into          */
    /*       HAL_ADC_Start_xxx functions because if set in this function,     */
    /*       a conversion on injected group would start a conversion also on  */
    /*       regular group after ADC enabling.                                */
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8001d1c:	687b      	ldr	r3, [r7, #4]
 8001d1e:	685a      	ldr	r2, [r3, #4]
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8001d20:	687b      	ldr	r3, [r7, #4]
 8001d22:	69db      	ldr	r3, [r3, #28]
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8001d24:	431a      	orrs	r2, r3
                ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)   );
 8001d26:	687b      	ldr	r3, [r7, #4]
 8001d28:	7b1b      	ldrb	r3, [r3, #12]
 8001d2a:	005b      	lsls	r3, r3, #1
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8001d2c:	4313      	orrs	r3, r2
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8001d2e:	68ba      	ldr	r2, [r7, #8]
 8001d30:	4313      	orrs	r3, r2
 8001d32:	60bb      	str	r3, [r7, #8]

    /* Configuration of ADC:                                                  */
    /*  - scan mode                                                           */
    /*  - discontinuous mode disable/enable                                   */
    /*  - discontinuous mode number of conversions                            */
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 8001d34:	687b      	ldr	r3, [r7, #4]
 8001d36:	689b      	ldr	r3, [r3, #8]
 8001d38:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8001d3c:	d003      	beq.n	8001d46 <HAL_ADC_Init+0xa2>
 8001d3e:	687b      	ldr	r3, [r7, #4]
 8001d40:	689b      	ldr	r3, [r3, #8]
 8001d42:	2b01      	cmp	r3, #1
 8001d44:	d102      	bne.n	8001d4c <HAL_ADC_Init+0xa8>
 8001d46:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8001d4a:	e000      	b.n	8001d4e <HAL_ADC_Init+0xaa>
 8001d4c:	2300      	movs	r3, #0
 8001d4e:	693a      	ldr	r2, [r7, #16]
 8001d50:	4313      	orrs	r3, r2
 8001d52:	613b      	str	r3, [r7, #16]
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    /* Note: If parameter "Init.ScanConvMode" is set to disable, parameter    */
    /*       discontinuous is set anyway, but will have no effect on ADC HW.  */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8001d54:	687b      	ldr	r3, [r7, #4]
 8001d56:	7d1b      	ldrb	r3, [r3, #20]
 8001d58:	2b01      	cmp	r3, #1
 8001d5a:	d119      	bne.n	8001d90 <HAL_ADC_Init+0xec>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 8001d5c:	687b      	ldr	r3, [r7, #4]
 8001d5e:	7b1b      	ldrb	r3, [r3, #12]
 8001d60:	2b00      	cmp	r3, #0
 8001d62:	d109      	bne.n	8001d78 <HAL_ADC_Init+0xd4>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmp_cr1, ADC_CR1_DISCEN                                            |
 8001d64:	687b      	ldr	r3, [r7, #4]
 8001d66:	699b      	ldr	r3, [r3, #24]
 8001d68:	3b01      	subs	r3, #1
 8001d6a:	035a      	lsls	r2, r3, #13
 8001d6c:	693b      	ldr	r3, [r7, #16]
 8001d6e:	4313      	orrs	r3, r2
 8001d70:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8001d74:	613b      	str	r3, [r7, #16]
 8001d76:	e00b      	b.n	8001d90 <HAL_ADC_Init+0xec>
      {
        /* ADC regular group settings continuous and sequencer discontinuous*/
        /* cannot be enabled simultaneously.                                */
        
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001d78:	687b      	ldr	r3, [r7, #4]
 8001d7a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001d7c:	f043 0220 	orr.w	r2, r3, #32
 8001d80:	687b      	ldr	r3, [r7, #4]
 8001d82:	629a      	str	r2, [r3, #40]	@ 0x28
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001d84:	687b      	ldr	r3, [r7, #4]
 8001d86:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001d88:	f043 0201 	orr.w	r2, r3, #1
 8001d8c:	687b      	ldr	r3, [r7, #4]
 8001d8e:	62da      	str	r2, [r3, #44]	@ 0x2c
      }
    }
    
    /* Update ADC configuration register CR1 with previous settings */
      MODIFY_REG(hadc->Instance->CR1,
 8001d90:	687b      	ldr	r3, [r7, #4]
 8001d92:	681b      	ldr	r3, [r3, #0]
 8001d94:	685b      	ldr	r3, [r3, #4]
 8001d96:	f423 4169 	bic.w	r1, r3, #59648	@ 0xe900
 8001d9a:	687b      	ldr	r3, [r7, #4]
 8001d9c:	681b      	ldr	r3, [r3, #0]
 8001d9e:	693a      	ldr	r2, [r7, #16]
 8001da0:	430a      	orrs	r2, r1
 8001da2:	605a      	str	r2, [r3, #4]
                 ADC_CR1_DISCEN  |
                 ADC_CR1_DISCNUM    ,
                 tmp_cr1             );
    
    /* Update ADC configuration register CR2 with previous settings */
      MODIFY_REG(hadc->Instance->CR2,
 8001da4:	687b      	ldr	r3, [r7, #4]
 8001da6:	681b      	ldr	r3, [r3, #0]
 8001da8:	689a      	ldr	r2, [r3, #8]
 8001daa:	4b28      	ldr	r3, [pc, #160]	@ (8001e4c <HAL_ADC_Init+0x1a8>)
 8001dac:	4013      	ands	r3, r2
 8001dae:	687a      	ldr	r2, [r7, #4]
 8001db0:	6812      	ldr	r2, [r2, #0]
 8001db2:	68b9      	ldr	r1, [r7, #8]
 8001db4:	430b      	orrs	r3, r1
 8001db6:	6093      	str	r3, [r2, #8]
    /*   Note: Scan mode is present by hardware on this device and, if        */
    /*   disabled, discards automatically nb of conversions. Anyway, nb of    */
    /*   conversions is forced to 0x00 for alignment over all STM32 devices.  */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 8001db8:	687b      	ldr	r3, [r7, #4]
 8001dba:	689b      	ldr	r3, [r3, #8]
 8001dbc:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8001dc0:	d003      	beq.n	8001dca <HAL_ADC_Init+0x126>
 8001dc2:	687b      	ldr	r3, [r7, #4]
 8001dc4:	689b      	ldr	r3, [r3, #8]
 8001dc6:	2b01      	cmp	r3, #1
 8001dc8:	d104      	bne.n	8001dd4 <HAL_ADC_Init+0x130>
    {
      tmp_sqr1 = ADC_SQR1_L_SHIFT(hadc->Init.NbrOfConversion);
 8001dca:	687b      	ldr	r3, [r7, #4]
 8001dcc:	691b      	ldr	r3, [r3, #16]
 8001dce:	3b01      	subs	r3, #1
 8001dd0:	051b      	lsls	r3, r3, #20
 8001dd2:	60fb      	str	r3, [r7, #12]
    }
      
    MODIFY_REG(hadc->Instance->SQR1,
 8001dd4:	687b      	ldr	r3, [r7, #4]
 8001dd6:	681b      	ldr	r3, [r3, #0]
 8001dd8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001dda:	f423 0170 	bic.w	r1, r3, #15728640	@ 0xf00000
 8001dde:	687b      	ldr	r3, [r7, #4]
 8001de0:	681b      	ldr	r3, [r3, #0]
 8001de2:	68fa      	ldr	r2, [r7, #12]
 8001de4:	430a      	orrs	r2, r1
 8001de6:	62da      	str	r2, [r3, #44]	@ 0x2c
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CR2 (excluding bits set in other functions:     */
    /* execution control bits (ADON, JSWSTART, SWSTART), regular group bits   */
    /* (DMA), injected group bits (JEXTTRIG and JEXTSEL), channel internal    */
    /* measurement path bit (TSVREFE).                                        */
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8001de8:	687b      	ldr	r3, [r7, #4]
 8001dea:	681b      	ldr	r3, [r3, #0]
 8001dec:	689a      	ldr	r2, [r3, #8]
 8001dee:	4b18      	ldr	r3, [pc, #96]	@ (8001e50 <HAL_ADC_Init+0x1ac>)
 8001df0:	4013      	ands	r3, r2
 8001df2:	68ba      	ldr	r2, [r7, #8]
 8001df4:	429a      	cmp	r2, r3
 8001df6:	d10b      	bne.n	8001e10 <HAL_ADC_Init+0x16c>
                                        ADC_CR2_JEXTTRIG | ADC_CR2_JEXTSEL |
                                        ADC_CR2_TSVREFE                     ))
         == tmp_cr2)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 8001df8:	687b      	ldr	r3, [r7, #4]
 8001dfa:	2200      	movs	r2, #0
 8001dfc:	62da      	str	r2, [r3, #44]	@ 0x2c
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8001dfe:	687b      	ldr	r3, [r7, #4]
 8001e00:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001e02:	f023 0303 	bic.w	r3, r3, #3
 8001e06:	f043 0201 	orr.w	r2, r3, #1
 8001e0a:	687b      	ldr	r3, [r7, #4]
 8001e0c:	629a      	str	r2, [r3, #40]	@ 0x28
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8001e0e:	e018      	b.n	8001e42 <HAL_ADC_Init+0x19e>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 8001e10:	687b      	ldr	r3, [r7, #4]
 8001e12:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001e14:	f023 0312 	bic.w	r3, r3, #18
 8001e18:	f043 0210 	orr.w	r2, r3, #16
 8001e1c:	687b      	ldr	r3, [r7, #4]
 8001e1e:	629a      	str	r2, [r3, #40]	@ 0x28
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001e20:	687b      	ldr	r3, [r7, #4]
 8001e22:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001e24:	f043 0201 	orr.w	r2, r3, #1
 8001e28:	687b      	ldr	r3, [r7, #4]
 8001e2a:	62da      	str	r2, [r3, #44]	@ 0x2c
      
      tmp_hal_status = HAL_ERROR;
 8001e2c:	2301      	movs	r3, #1
 8001e2e:	75fb      	strb	r3, [r7, #23]
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8001e30:	e007      	b.n	8001e42 <HAL_ADC_Init+0x19e>
  
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001e32:	687b      	ldr	r3, [r7, #4]
 8001e34:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001e36:	f043 0210 	orr.w	r2, r3, #16
 8001e3a:	687b      	ldr	r3, [r7, #4]
 8001e3c:	629a      	str	r2, [r3, #40]	@ 0x28
        
    tmp_hal_status = HAL_ERROR;
 8001e3e:	2301      	movs	r3, #1
 8001e40:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 8001e42:	7dfb      	ldrb	r3, [r7, #23]
}
 8001e44:	4618      	mov	r0, r3
 8001e46:	3718      	adds	r7, #24
 8001e48:	46bd      	mov	sp, r7
 8001e4a:	bd80      	pop	{r7, pc}
 8001e4c:	ffe1f7fd 	.word	0xffe1f7fd
 8001e50:	ff1f0efe 	.word	0xff1f0efe

08001e54 <HAL_ADC_Start>:
  *         Interruptions enabled in this function: None.
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 8001e54:	b580      	push	{r7, lr}
 8001e56:	b084      	sub	sp, #16
 8001e58:	af00      	add	r7, sp, #0
 8001e5a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001e5c:	2300      	movs	r3, #0
 8001e5e:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001e60:	687b      	ldr	r3, [r7, #4]
 8001e62:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8001e66:	2b01      	cmp	r3, #1
 8001e68:	d101      	bne.n	8001e6e <HAL_ADC_Start+0x1a>
 8001e6a:	2302      	movs	r3, #2
 8001e6c:	e098      	b.n	8001fa0 <HAL_ADC_Start+0x14c>
 8001e6e:	687b      	ldr	r3, [r7, #4]
 8001e70:	2201      	movs	r2, #1
 8001e72:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
   
  /* Enable the ADC peripheral */
  tmp_hal_status = ADC_Enable(hadc);
 8001e76:	6878      	ldr	r0, [r7, #4]
 8001e78:	f000 fad0 	bl	800241c <ADC_Enable>
 8001e7c:	4603      	mov	r3, r0
 8001e7e:	73fb      	strb	r3, [r7, #15]
  
  /* Start conversion if ADC is effectively enabled */
  if (tmp_hal_status == HAL_OK)
 8001e80:	7bfb      	ldrb	r3, [r7, #15]
 8001e82:	2b00      	cmp	r3, #0
 8001e84:	f040 8087 	bne.w	8001f96 <HAL_ADC_Start+0x142>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular operation                      */
    ADC_STATE_CLR_SET(hadc->State,
 8001e88:	687b      	ldr	r3, [r7, #4]
 8001e8a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001e8c:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8001e90:	f023 0301 	bic.w	r3, r3, #1
 8001e94:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8001e98:	687b      	ldr	r3, [r7, #4]
 8001e9a:	629a      	str	r2, [r3, #40]	@ 0x28
                      HAL_ADC_STATE_REG_BUSY);
    
    /* Set group injected state (from auto-injection) and multimode state     */
    /* for all cases of multimode: independent mode, multimode ADC master     */
    /* or multimode ADC slave (for devices with several ADCs):                */
    if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 8001e9c:	687b      	ldr	r3, [r7, #4]
 8001e9e:	681b      	ldr	r3, [r3, #0]
 8001ea0:	4a41      	ldr	r2, [pc, #260]	@ (8001fa8 <HAL_ADC_Start+0x154>)
 8001ea2:	4293      	cmp	r3, r2
 8001ea4:	d105      	bne.n	8001eb2 <HAL_ADC_Start+0x5e>
 8001ea6:	4b41      	ldr	r3, [pc, #260]	@ (8001fac <HAL_ADC_Start+0x158>)
 8001ea8:	685b      	ldr	r3, [r3, #4]
 8001eaa:	f403 2370 	and.w	r3, r3, #983040	@ 0xf0000
 8001eae:	2b00      	cmp	r3, #0
 8001eb0:	d115      	bne.n	8001ede <HAL_ADC_Start+0x8a>
    {
      /* Set ADC state (ADC independent or master) */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8001eb2:	687b      	ldr	r3, [r7, #4]
 8001eb4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001eb6:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 8001eba:	687b      	ldr	r3, [r7, #4]
 8001ebc:	629a      	str	r2, [r3, #40]	@ 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8001ebe:	687b      	ldr	r3, [r7, #4]
 8001ec0:	681b      	ldr	r3, [r3, #0]
 8001ec2:	685b      	ldr	r3, [r3, #4]
 8001ec4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001ec8:	2b00      	cmp	r3, #0
 8001eca:	d026      	beq.n	8001f1a <HAL_ADC_Start+0xc6>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8001ecc:	687b      	ldr	r3, [r7, #4]
 8001ece:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001ed0:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 8001ed4:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 8001ed8:	687b      	ldr	r3, [r7, #4]
 8001eda:	629a      	str	r2, [r3, #40]	@ 0x28
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8001edc:	e01d      	b.n	8001f1a <HAL_ADC_Start+0xc6>
      }
    }
    else
    {
      /* Set ADC state (ADC slave) */
      SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8001ede:	687b      	ldr	r3, [r7, #4]
 8001ee0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001ee2:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 8001ee6:	687b      	ldr	r3, [r7, #4]
 8001ee8:	629a      	str	r2, [r3, #40]	@ 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (ADC_MULTIMODE_AUTO_INJECTED(hadc))
 8001eea:	687b      	ldr	r3, [r7, #4]
 8001eec:	681b      	ldr	r3, [r3, #0]
 8001eee:	4a2f      	ldr	r2, [pc, #188]	@ (8001fac <HAL_ADC_Start+0x158>)
 8001ef0:	4293      	cmp	r3, r2
 8001ef2:	d004      	beq.n	8001efe <HAL_ADC_Start+0xaa>
 8001ef4:	687b      	ldr	r3, [r7, #4]
 8001ef6:	681b      	ldr	r3, [r3, #0]
 8001ef8:	4a2b      	ldr	r2, [pc, #172]	@ (8001fa8 <HAL_ADC_Start+0x154>)
 8001efa:	4293      	cmp	r3, r2
 8001efc:	d10d      	bne.n	8001f1a <HAL_ADC_Start+0xc6>
 8001efe:	4b2b      	ldr	r3, [pc, #172]	@ (8001fac <HAL_ADC_Start+0x158>)
 8001f00:	685b      	ldr	r3, [r3, #4]
 8001f02:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001f06:	2b00      	cmp	r3, #0
 8001f08:	d007      	beq.n	8001f1a <HAL_ADC_Start+0xc6>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8001f0a:	687b      	ldr	r3, [r7, #4]
 8001f0c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001f0e:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 8001f12:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 8001f16:	687b      	ldr	r3, [r7, #4]
 8001f18:	629a      	str	r2, [r3, #40]	@ 0x28
      }
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001f1a:	687b      	ldr	r3, [r7, #4]
 8001f1c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001f1e:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8001f22:	2b00      	cmp	r3, #0
 8001f24:	d006      	beq.n	8001f34 <HAL_ADC_Start+0xe0>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8001f26:	687b      	ldr	r3, [r7, #4]
 8001f28:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001f2a:	f023 0206 	bic.w	r2, r3, #6
 8001f2e:	687b      	ldr	r3, [r7, #4]
 8001f30:	62da      	str	r2, [r3, #44]	@ 0x2c
 8001f32:	e002      	b.n	8001f3a <HAL_ADC_Start+0xe6>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8001f34:	687b      	ldr	r3, [r7, #4]
 8001f36:	2200      	movs	r2, #0
 8001f38:	62da      	str	r2, [r3, #44]	@ 0x2c
    }
    
    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 8001f3a:	687b      	ldr	r3, [r7, #4]
 8001f3c:	2200      	movs	r2, #0
 8001f3e:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  
    /* Clear regular group conversion flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC);
 8001f42:	687b      	ldr	r3, [r7, #4]
 8001f44:	681b      	ldr	r3, [r3, #0]
 8001f46:	f06f 0202 	mvn.w	r2, #2
 8001f4a:	601a      	str	r2, [r3, #0]
    /*  - if ADC is slave, ADC is enabled only (conversion is not started).   */
    /*  - if ADC is master, ADC is enabled and conversion is started.         */
    /* If ADC is master, ADC is enabled and conversion is started.            */
    /* Note: Alternate trigger for single conversion could be to force an     */
    /*       additional set of bit ADON "hadc->Instance->CR2 |= ADC_CR2_ADON;"*/
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 8001f4c:	687b      	ldr	r3, [r7, #4]
 8001f4e:	681b      	ldr	r3, [r3, #0]
 8001f50:	689b      	ldr	r3, [r3, #8]
 8001f52:	f403 2360 	and.w	r3, r3, #917504	@ 0xe0000
 8001f56:	f5b3 2f60 	cmp.w	r3, #917504	@ 0xe0000
 8001f5a:	d113      	bne.n	8001f84 <HAL_ADC_Start+0x130>
        ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc)  )
 8001f5c:	687b      	ldr	r3, [r7, #4]
 8001f5e:	681b      	ldr	r3, [r3, #0]
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 8001f60:	4a11      	ldr	r2, [pc, #68]	@ (8001fa8 <HAL_ADC_Start+0x154>)
 8001f62:	4293      	cmp	r3, r2
 8001f64:	d105      	bne.n	8001f72 <HAL_ADC_Start+0x11e>
        ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc)  )
 8001f66:	4b11      	ldr	r3, [pc, #68]	@ (8001fac <HAL_ADC_Start+0x158>)
 8001f68:	685b      	ldr	r3, [r3, #4]
 8001f6a:	f403 2370 	and.w	r3, r3, #983040	@ 0xf0000
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 8001f6e:	2b00      	cmp	r3, #0
 8001f70:	d108      	bne.n	8001f84 <HAL_ADC_Start+0x130>
    {
      /* Start ADC conversion on regular group with SW start */
      SET_BIT(hadc->Instance->CR2, (ADC_CR2_SWSTART | ADC_CR2_EXTTRIG));
 8001f72:	687b      	ldr	r3, [r7, #4]
 8001f74:	681b      	ldr	r3, [r3, #0]
 8001f76:	689a      	ldr	r2, [r3, #8]
 8001f78:	687b      	ldr	r3, [r7, #4]
 8001f7a:	681b      	ldr	r3, [r3, #0]
 8001f7c:	f442 02a0 	orr.w	r2, r2, #5242880	@ 0x500000
 8001f80:	609a      	str	r2, [r3, #8]
 8001f82:	e00c      	b.n	8001f9e <HAL_ADC_Start+0x14a>
    }
    else
    {
      /* Start ADC conversion on regular group with external trigger */
      SET_BIT(hadc->Instance->CR2, ADC_CR2_EXTTRIG);
 8001f84:	687b      	ldr	r3, [r7, #4]
 8001f86:	681b      	ldr	r3, [r3, #0]
 8001f88:	689a      	ldr	r2, [r3, #8]
 8001f8a:	687b      	ldr	r3, [r7, #4]
 8001f8c:	681b      	ldr	r3, [r3, #0]
 8001f8e:	f442 1280 	orr.w	r2, r2, #1048576	@ 0x100000
 8001f92:	609a      	str	r2, [r3, #8]
 8001f94:	e003      	b.n	8001f9e <HAL_ADC_Start+0x14a>
    }
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8001f96:	687b      	ldr	r3, [r7, #4]
 8001f98:	2200      	movs	r2, #0
 8001f9a:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  }
    
  /* Return function status */
  return tmp_hal_status;
 8001f9e:	7bfb      	ldrb	r3, [r7, #15]
}
 8001fa0:	4618      	mov	r0, r3
 8001fa2:	3710      	adds	r7, #16
 8001fa4:	46bd      	mov	sp, r7
 8001fa6:	bd80      	pop	{r7, pc}
 8001fa8:	40012800 	.word	0x40012800
 8001fac:	40012400 	.word	0x40012400

08001fb0 <HAL_ADC_Stop>:
  *         should be preliminarily stopped using HAL_ADCEx_InjectedStop function.
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop(ADC_HandleTypeDef* hadc)
{
 8001fb0:	b580      	push	{r7, lr}
 8001fb2:	b084      	sub	sp, #16
 8001fb4:	af00      	add	r7, sp, #0
 8001fb6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001fb8:	2300      	movs	r3, #0
 8001fba:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
     
  /* Process locked */
  __HAL_LOCK(hadc);
 8001fbc:	687b      	ldr	r3, [r7, #4]
 8001fbe:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8001fc2:	2b01      	cmp	r3, #1
 8001fc4:	d101      	bne.n	8001fca <HAL_ADC_Stop+0x1a>
 8001fc6:	2302      	movs	r3, #2
 8001fc8:	e01a      	b.n	8002000 <HAL_ADC_Stop+0x50>
 8001fca:	687b      	ldr	r3, [r7, #4]
 8001fcc:	2201      	movs	r2, #1
 8001fce:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 8001fd2:	6878      	ldr	r0, [r7, #4]
 8001fd4:	f000 fa7c 	bl	80024d0 <ADC_ConversionStop_Disable>
 8001fd8:	4603      	mov	r3, r0
 8001fda:	73fb      	strb	r3, [r7, #15]
  
  /* Check if ADC is effectively disabled */
  if (tmp_hal_status == HAL_OK)
 8001fdc:	7bfb      	ldrb	r3, [r7, #15]
 8001fde:	2b00      	cmp	r3, #0
 8001fe0:	d109      	bne.n	8001ff6 <HAL_ADC_Stop+0x46>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001fe2:	687b      	ldr	r3, [r7, #4]
 8001fe4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001fe6:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 8001fea:	f023 0301 	bic.w	r3, r3, #1
 8001fee:	f043 0201 	orr.w	r2, r3, #1
 8001ff2:	687b      	ldr	r3, [r7, #4]
 8001ff4:	629a      	str	r2, [r3, #40]	@ 0x28
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_READY);
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001ff6:	687b      	ldr	r3, [r7, #4]
 8001ff8:	2200      	movs	r2, #0
 8001ffa:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  
  /* Return function status */
  return tmp_hal_status;
 8001ffe:	7bfb      	ldrb	r3, [r7, #15]
}
 8002000:	4618      	mov	r0, r3
 8002002:	3710      	adds	r7, #16
 8002004:	46bd      	mov	sp, r7
 8002006:	bd80      	pop	{r7, pc}

08002008 <HAL_ADC_PollForConversion>:
  * @param  hadc: ADC handle
  * @param  Timeout: Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef* hadc, uint32_t Timeout)
{
 8002008:	b590      	push	{r4, r7, lr}
 800200a:	b087      	sub	sp, #28
 800200c:	af00      	add	r7, sp, #0
 800200e:	6078      	str	r0, [r7, #4]
 8002010:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8002012:	2300      	movs	r3, #0
 8002014:	617b      	str	r3, [r7, #20]
  
  /* Variables for polling in case of scan mode enabled and polling for each  */
  /* conversion.                                                              */
  __IO uint32_t Conversion_Timeout_CPU_cycles = 0U;
 8002016:	2300      	movs	r3, #0
 8002018:	60fb      	str	r3, [r7, #12]
  uint32_t Conversion_Timeout_CPU_cycles_max = 0U;
 800201a:	2300      	movs	r3, #0
 800201c:	613b      	str	r3, [r7, #16]
 
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Get tick count */
  tickstart = HAL_GetTick();
 800201e:	f7ff fe13 	bl	8001c48 <HAL_GetTick>
 8002022:	6178      	str	r0, [r7, #20]
  
  /* Verification that ADC configuration is compliant with polling for        */
  /* each conversion:                                                         */
  /* Particular case is ADC configured in DMA mode                            */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_DMA))
 8002024:	687b      	ldr	r3, [r7, #4]
 8002026:	681b      	ldr	r3, [r3, #0]
 8002028:	689b      	ldr	r3, [r3, #8]
 800202a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800202e:	2b00      	cmp	r3, #0
 8002030:	d00b      	beq.n	800204a <HAL_ADC_PollForConversion+0x42>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002032:	687b      	ldr	r3, [r7, #4]
 8002034:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002036:	f043 0220 	orr.w	r2, r3, #32
 800203a:	687b      	ldr	r3, [r7, #4]
 800203c:	629a      	str	r2, [r3, #40]	@ 0x28
    
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 800203e:	687b      	ldr	r3, [r7, #4]
 8002040:	2200      	movs	r2, #0
 8002042:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
    
    return HAL_ERROR;
 8002046:	2301      	movs	r3, #1
 8002048:	e0d3      	b.n	80021f2 <HAL_ADC_PollForConversion+0x1ea>
  /*    from ADC conversion time (selected sampling time + conversion time of */
  /*    12.5 ADC clock cycles) and APB2/ADC clock prescalers (depending on    */
  /*    settings, conversion time range can be from 28 to 32256 CPU cycles).  */
  /*    As flag EOC is not set after each conversion, no timeout status can   */
  /*    be set.                                                               */
  if (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_SCAN) &&
 800204a:	687b      	ldr	r3, [r7, #4]
 800204c:	681b      	ldr	r3, [r3, #0]
 800204e:	685b      	ldr	r3, [r3, #4]
 8002050:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002054:	2b00      	cmp	r3, #0
 8002056:	d131      	bne.n	80020bc <HAL_ADC_PollForConversion+0xb4>
      HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L)    )
 8002058:	687b      	ldr	r3, [r7, #4]
 800205a:	681b      	ldr	r3, [r3, #0]
 800205c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800205e:	f403 0370 	and.w	r3, r3, #15728640	@ 0xf00000
  if (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_SCAN) &&
 8002062:	2b00      	cmp	r3, #0
 8002064:	d12a      	bne.n	80020bc <HAL_ADC_PollForConversion+0xb4>
  {
    /* Wait until End of Conversion flag is raised */
    while(HAL_IS_BIT_CLR(hadc->Instance->SR, ADC_FLAG_EOC))
 8002066:	e021      	b.n	80020ac <HAL_ADC_PollForConversion+0xa4>
    {
      /* Check if timeout is disabled (set to infinite wait) */
      if(Timeout != HAL_MAX_DELAY)
 8002068:	683b      	ldr	r3, [r7, #0]
 800206a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800206e:	d01d      	beq.n	80020ac <HAL_ADC_PollForConversion+0xa4>
      {
        if((Timeout == 0U) || ((HAL_GetTick() - tickstart ) > Timeout))
 8002070:	683b      	ldr	r3, [r7, #0]
 8002072:	2b00      	cmp	r3, #0
 8002074:	d007      	beq.n	8002086 <HAL_ADC_PollForConversion+0x7e>
 8002076:	f7ff fde7 	bl	8001c48 <HAL_GetTick>
 800207a:	4602      	mov	r2, r0
 800207c:	697b      	ldr	r3, [r7, #20]
 800207e:	1ad3      	subs	r3, r2, r3
 8002080:	683a      	ldr	r2, [r7, #0]
 8002082:	429a      	cmp	r2, r3
 8002084:	d212      	bcs.n	80020ac <HAL_ADC_PollForConversion+0xa4>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if(HAL_IS_BIT_CLR(hadc->Instance->SR, ADC_FLAG_EOC))
 8002086:	687b      	ldr	r3, [r7, #4]
 8002088:	681b      	ldr	r3, [r3, #0]
 800208a:	681b      	ldr	r3, [r3, #0]
 800208c:	f003 0302 	and.w	r3, r3, #2
 8002090:	2b00      	cmp	r3, #0
 8002092:	d10b      	bne.n	80020ac <HAL_ADC_PollForConversion+0xa4>
          {
            /* Update ADC state machine to timeout */
            SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8002094:	687b      	ldr	r3, [r7, #4]
 8002096:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002098:	f043 0204 	orr.w	r2, r3, #4
 800209c:	687b      	ldr	r3, [r7, #4]
 800209e:	629a      	str	r2, [r3, #40]	@ 0x28
            
            /* Process unlocked */
            __HAL_UNLOCK(hadc);
 80020a0:	687b      	ldr	r3, [r7, #4]
 80020a2:	2200      	movs	r2, #0
 80020a4:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
            
            return HAL_TIMEOUT;
 80020a8:	2303      	movs	r3, #3
 80020aa:	e0a2      	b.n	80021f2 <HAL_ADC_PollForConversion+0x1ea>
    while(HAL_IS_BIT_CLR(hadc->Instance->SR, ADC_FLAG_EOC))
 80020ac:	687b      	ldr	r3, [r7, #4]
 80020ae:	681b      	ldr	r3, [r3, #0]
 80020b0:	681b      	ldr	r3, [r3, #0]
 80020b2:	f003 0302 	and.w	r3, r3, #2
 80020b6:	2b00      	cmp	r3, #0
 80020b8:	d0d6      	beq.n	8002068 <HAL_ADC_PollForConversion+0x60>
  if (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_SCAN) &&
 80020ba:	e070      	b.n	800219e <HAL_ADC_PollForConversion+0x196>
    /* Replace polling by wait for maximum conversion time */
    /*  - Computation of CPU clock cycles corresponding to ADC clock cycles   */
    /*    and ADC maximum conversion cycles on all channels.                  */
    /*  - Wait for the expected ADC clock cycles delay                        */
    Conversion_Timeout_CPU_cycles_max = ((SystemCoreClock
                                          / HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_ADC))
 80020bc:	4b4f      	ldr	r3, [pc, #316]	@ (80021fc <HAL_ADC_PollForConversion+0x1f4>)
 80020be:	681c      	ldr	r4, [r3, #0]
 80020c0:	2002      	movs	r0, #2
 80020c2:	f001 fe11 	bl	8003ce8 <HAL_RCCEx_GetPeriphCLKFreq>
 80020c6:	4603      	mov	r3, r0
 80020c8:	fbb4 f2f3 	udiv	r2, r4, r3
                                         * ADC_CONVCYCLES_MAX_RANGE(hadc)                 );
 80020cc:	687b      	ldr	r3, [r7, #4]
 80020ce:	681b      	ldr	r3, [r3, #0]
 80020d0:	6919      	ldr	r1, [r3, #16]
 80020d2:	4b4b      	ldr	r3, [pc, #300]	@ (8002200 <HAL_ADC_PollForConversion+0x1f8>)
 80020d4:	400b      	ands	r3, r1
 80020d6:	2b00      	cmp	r3, #0
 80020d8:	d118      	bne.n	800210c <HAL_ADC_PollForConversion+0x104>
 80020da:	687b      	ldr	r3, [r7, #4]
 80020dc:	681b      	ldr	r3, [r3, #0]
 80020de:	68d9      	ldr	r1, [r3, #12]
 80020e0:	4b48      	ldr	r3, [pc, #288]	@ (8002204 <HAL_ADC_PollForConversion+0x1fc>)
 80020e2:	400b      	ands	r3, r1
 80020e4:	2b00      	cmp	r3, #0
 80020e6:	d111      	bne.n	800210c <HAL_ADC_PollForConversion+0x104>
 80020e8:	687b      	ldr	r3, [r7, #4]
 80020ea:	681b      	ldr	r3, [r3, #0]
 80020ec:	6919      	ldr	r1, [r3, #16]
 80020ee:	4b46      	ldr	r3, [pc, #280]	@ (8002208 <HAL_ADC_PollForConversion+0x200>)
 80020f0:	400b      	ands	r3, r1
 80020f2:	2b00      	cmp	r3, #0
 80020f4:	d108      	bne.n	8002108 <HAL_ADC_PollForConversion+0x100>
 80020f6:	687b      	ldr	r3, [r7, #4]
 80020f8:	681b      	ldr	r3, [r3, #0]
 80020fa:	68d9      	ldr	r1, [r3, #12]
 80020fc:	4b43      	ldr	r3, [pc, #268]	@ (800220c <HAL_ADC_PollForConversion+0x204>)
 80020fe:	400b      	ands	r3, r1
 8002100:	2b00      	cmp	r3, #0
 8002102:	d101      	bne.n	8002108 <HAL_ADC_PollForConversion+0x100>
 8002104:	2314      	movs	r3, #20
 8002106:	e020      	b.n	800214a <HAL_ADC_PollForConversion+0x142>
 8002108:	2329      	movs	r3, #41	@ 0x29
 800210a:	e01e      	b.n	800214a <HAL_ADC_PollForConversion+0x142>
 800210c:	687b      	ldr	r3, [r7, #4]
 800210e:	681b      	ldr	r3, [r3, #0]
 8002110:	6919      	ldr	r1, [r3, #16]
 8002112:	4b3d      	ldr	r3, [pc, #244]	@ (8002208 <HAL_ADC_PollForConversion+0x200>)
 8002114:	400b      	ands	r3, r1
 8002116:	2b00      	cmp	r3, #0
 8002118:	d106      	bne.n	8002128 <HAL_ADC_PollForConversion+0x120>
 800211a:	687b      	ldr	r3, [r7, #4]
 800211c:	681b      	ldr	r3, [r3, #0]
 800211e:	68d9      	ldr	r1, [r3, #12]
 8002120:	4b3a      	ldr	r3, [pc, #232]	@ (800220c <HAL_ADC_PollForConversion+0x204>)
 8002122:	400b      	ands	r3, r1
 8002124:	2b00      	cmp	r3, #0
 8002126:	d00d      	beq.n	8002144 <HAL_ADC_PollForConversion+0x13c>
 8002128:	687b      	ldr	r3, [r7, #4]
 800212a:	681b      	ldr	r3, [r3, #0]
 800212c:	6919      	ldr	r1, [r3, #16]
 800212e:	4b38      	ldr	r3, [pc, #224]	@ (8002210 <HAL_ADC_PollForConversion+0x208>)
 8002130:	400b      	ands	r3, r1
 8002132:	2b00      	cmp	r3, #0
 8002134:	d108      	bne.n	8002148 <HAL_ADC_PollForConversion+0x140>
 8002136:	687b      	ldr	r3, [r7, #4]
 8002138:	681b      	ldr	r3, [r3, #0]
 800213a:	68d9      	ldr	r1, [r3, #12]
 800213c:	4b34      	ldr	r3, [pc, #208]	@ (8002210 <HAL_ADC_PollForConversion+0x208>)
 800213e:	400b      	ands	r3, r1
 8002140:	2b00      	cmp	r3, #0
 8002142:	d101      	bne.n	8002148 <HAL_ADC_PollForConversion+0x140>
 8002144:	2354      	movs	r3, #84	@ 0x54
 8002146:	e000      	b.n	800214a <HAL_ADC_PollForConversion+0x142>
 8002148:	23fc      	movs	r3, #252	@ 0xfc
    Conversion_Timeout_CPU_cycles_max = ((SystemCoreClock
 800214a:	fb02 f303 	mul.w	r3, r2, r3
 800214e:	613b      	str	r3, [r7, #16]
    
    while(Conversion_Timeout_CPU_cycles < Conversion_Timeout_CPU_cycles_max)
 8002150:	e021      	b.n	8002196 <HAL_ADC_PollForConversion+0x18e>
    {
      /* Check if timeout is disabled (set to infinite wait) */
      if(Timeout != HAL_MAX_DELAY)
 8002152:	683b      	ldr	r3, [r7, #0]
 8002154:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002158:	d01a      	beq.n	8002190 <HAL_ADC_PollForConversion+0x188>
      {
        if((Timeout == 0U) || ((HAL_GetTick() - tickstart) > Timeout))
 800215a:	683b      	ldr	r3, [r7, #0]
 800215c:	2b00      	cmp	r3, #0
 800215e:	d007      	beq.n	8002170 <HAL_ADC_PollForConversion+0x168>
 8002160:	f7ff fd72 	bl	8001c48 <HAL_GetTick>
 8002164:	4602      	mov	r2, r0
 8002166:	697b      	ldr	r3, [r7, #20]
 8002168:	1ad3      	subs	r3, r2, r3
 800216a:	683a      	ldr	r2, [r7, #0]
 800216c:	429a      	cmp	r2, r3
 800216e:	d20f      	bcs.n	8002190 <HAL_ADC_PollForConversion+0x188>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if(Conversion_Timeout_CPU_cycles < Conversion_Timeout_CPU_cycles_max)
 8002170:	68fb      	ldr	r3, [r7, #12]
 8002172:	693a      	ldr	r2, [r7, #16]
 8002174:	429a      	cmp	r2, r3
 8002176:	d90b      	bls.n	8002190 <HAL_ADC_PollForConversion+0x188>
          {
            /* Update ADC state machine to timeout */
            SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8002178:	687b      	ldr	r3, [r7, #4]
 800217a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800217c:	f043 0204 	orr.w	r2, r3, #4
 8002180:	687b      	ldr	r3, [r7, #4]
 8002182:	629a      	str	r2, [r3, #40]	@ 0x28

            /* Process unlocked */
            __HAL_UNLOCK(hadc);
 8002184:	687b      	ldr	r3, [r7, #4]
 8002186:	2200      	movs	r2, #0
 8002188:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

            return HAL_TIMEOUT;
 800218c:	2303      	movs	r3, #3
 800218e:	e030      	b.n	80021f2 <HAL_ADC_PollForConversion+0x1ea>
          }
        }
      }
      Conversion_Timeout_CPU_cycles ++;
 8002190:	68fb      	ldr	r3, [r7, #12]
 8002192:	3301      	adds	r3, #1
 8002194:	60fb      	str	r3, [r7, #12]
    while(Conversion_Timeout_CPU_cycles < Conversion_Timeout_CPU_cycles_max)
 8002196:	68fb      	ldr	r3, [r7, #12]
 8002198:	693a      	ldr	r2, [r7, #16]
 800219a:	429a      	cmp	r2, r3
 800219c:	d8d9      	bhi.n	8002152 <HAL_ADC_PollForConversion+0x14a>
    }
  }
  
  /* Clear regular group conversion flag */
  __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 800219e:	687b      	ldr	r3, [r7, #4]
 80021a0:	681b      	ldr	r3, [r3, #0]
 80021a2:	f06f 0212 	mvn.w	r2, #18
 80021a6:	601a      	str	r2, [r3, #0]
  
  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 80021a8:	687b      	ldr	r3, [r7, #4]
 80021aa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80021ac:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 80021b0:	687b      	ldr	r3, [r7, #4]
 80021b2:	629a      	str	r2, [r3, #40]	@ 0x28
  /* Determine whether any further conversion upcoming on group regular       */
  /* by external trigger, continuous mode or scan sequence on going.          */
  /* Note: On STM32F1 devices, in case of sequencer enabled                   */
  /*       (several ranks selected), end of conversion flag is raised         */
  /*       at the end of the sequence.                                        */
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 80021b4:	687b      	ldr	r3, [r7, #4]
 80021b6:	681b      	ldr	r3, [r3, #0]
 80021b8:	689b      	ldr	r3, [r3, #8]
 80021ba:	f403 2360 	and.w	r3, r3, #917504	@ 0xe0000
 80021be:	f5b3 2f60 	cmp.w	r3, #917504	@ 0xe0000
 80021c2:	d115      	bne.n	80021f0 <HAL_ADC_PollForConversion+0x1e8>
     (hadc->Init.ContinuousConvMode == DISABLE)   )
 80021c4:	687b      	ldr	r3, [r7, #4]
 80021c6:	7b1b      	ldrb	r3, [r3, #12]
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 80021c8:	2b00      	cmp	r3, #0
 80021ca:	d111      	bne.n	80021f0 <HAL_ADC_PollForConversion+0x1e8>
  {   
    /* Set ADC state */
    CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 80021cc:	687b      	ldr	r3, [r7, #4]
 80021ce:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80021d0:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 80021d4:	687b      	ldr	r3, [r7, #4]
 80021d6:	629a      	str	r2, [r3, #40]	@ 0x28

    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80021d8:	687b      	ldr	r3, [r7, #4]
 80021da:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80021dc:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80021e0:	2b00      	cmp	r3, #0
 80021e2:	d105      	bne.n	80021f0 <HAL_ADC_PollForConversion+0x1e8>
    { 
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80021e4:	687b      	ldr	r3, [r7, #4]
 80021e6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80021e8:	f043 0201 	orr.w	r2, r3, #1
 80021ec:	687b      	ldr	r3, [r7, #4]
 80021ee:	629a      	str	r2, [r3, #40]	@ 0x28
    }
  }
  
  /* Return ADC state */
  return HAL_OK;
 80021f0:	2300      	movs	r3, #0
}
 80021f2:	4618      	mov	r0, r3
 80021f4:	371c      	adds	r7, #28
 80021f6:	46bd      	mov	sp, r7
 80021f8:	bd90      	pop	{r4, r7, pc}
 80021fa:	bf00      	nop
 80021fc:	20000000 	.word	0x20000000
 8002200:	24924924 	.word	0x24924924
 8002204:	00924924 	.word	0x00924924
 8002208:	12492492 	.word	0x12492492
 800220c:	00492492 	.word	0x00492492
 8002210:	00249249 	.word	0x00249249

08002214 <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param  hadc: ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{
 8002214:	b480      	push	{r7}
 8002216:	b083      	sub	sp, #12
 8002218:	af00      	add	r7, sp, #0
 800221a:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */
  
  /* Return ADC converted value */ 
  return hadc->Instance->DR;
 800221c:	687b      	ldr	r3, [r7, #4]
 800221e:	681b      	ldr	r3, [r3, #0]
 8002220:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
}
 8002222:	4618      	mov	r0, r3
 8002224:	370c      	adds	r7, #12
 8002226:	46bd      	mov	sp, r7
 8002228:	bc80      	pop	{r7}
 800222a:	4770      	bx	lr

0800222c <HAL_ADC_ConfigChannel>:
  * @param  hadc: ADC handle
  * @param  sConfig: Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{ 
 800222c:	b480      	push	{r7}
 800222e:	b085      	sub	sp, #20
 8002230:	af00      	add	r7, sp, #0
 8002232:	6078      	str	r0, [r7, #4]
 8002234:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002236:	2300      	movs	r3, #0
 8002238:	73fb      	strb	r3, [r7, #15]
  __IO uint32_t wait_loop_index = 0U;
 800223a:	2300      	movs	r3, #0
 800223c:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 800223e:	687b      	ldr	r3, [r7, #4]
 8002240:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8002244:	2b01      	cmp	r3, #1
 8002246:	d101      	bne.n	800224c <HAL_ADC_ConfigChannel+0x20>
 8002248:	2302      	movs	r3, #2
 800224a:	e0dc      	b.n	8002406 <HAL_ADC_ConfigChannel+0x1da>
 800224c:	687b      	ldr	r3, [r7, #4]
 800224e:	2201      	movs	r2, #1
 8002250:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  
  
  /* Regular sequence configuration */
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8002254:	683b      	ldr	r3, [r7, #0]
 8002256:	685b      	ldr	r3, [r3, #4]
 8002258:	2b06      	cmp	r3, #6
 800225a:	d81c      	bhi.n	8002296 <HAL_ADC_ConfigChannel+0x6a>
  {
    MODIFY_REG(hadc->Instance->SQR3                        ,
 800225c:	687b      	ldr	r3, [r7, #4]
 800225e:	681b      	ldr	r3, [r3, #0]
 8002260:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8002262:	683b      	ldr	r3, [r7, #0]
 8002264:	685a      	ldr	r2, [r3, #4]
 8002266:	4613      	mov	r3, r2
 8002268:	009b      	lsls	r3, r3, #2
 800226a:	4413      	add	r3, r2
 800226c:	3b05      	subs	r3, #5
 800226e:	221f      	movs	r2, #31
 8002270:	fa02 f303 	lsl.w	r3, r2, r3
 8002274:	43db      	mvns	r3, r3
 8002276:	4019      	ands	r1, r3
 8002278:	683b      	ldr	r3, [r7, #0]
 800227a:	6818      	ldr	r0, [r3, #0]
 800227c:	683b      	ldr	r3, [r7, #0]
 800227e:	685a      	ldr	r2, [r3, #4]
 8002280:	4613      	mov	r3, r2
 8002282:	009b      	lsls	r3, r3, #2
 8002284:	4413      	add	r3, r2
 8002286:	3b05      	subs	r3, #5
 8002288:	fa00 f203 	lsl.w	r2, r0, r3
 800228c:	687b      	ldr	r3, [r7, #4]
 800228e:	681b      	ldr	r3, [r3, #0]
 8002290:	430a      	orrs	r2, r1
 8002292:	635a      	str	r2, [r3, #52]	@ 0x34
 8002294:	e03c      	b.n	8002310 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank)    ,
               ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8002296:	683b      	ldr	r3, [r7, #0]
 8002298:	685b      	ldr	r3, [r3, #4]
 800229a:	2b0c      	cmp	r3, #12
 800229c:	d81c      	bhi.n	80022d8 <HAL_ADC_ConfigChannel+0xac>
  {
    MODIFY_REG(hadc->Instance->SQR2                        ,
 800229e:	687b      	ldr	r3, [r7, #4]
 80022a0:	681b      	ldr	r3, [r3, #0]
 80022a2:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 80022a4:	683b      	ldr	r3, [r7, #0]
 80022a6:	685a      	ldr	r2, [r3, #4]
 80022a8:	4613      	mov	r3, r2
 80022aa:	009b      	lsls	r3, r3, #2
 80022ac:	4413      	add	r3, r2
 80022ae:	3b23      	subs	r3, #35	@ 0x23
 80022b0:	221f      	movs	r2, #31
 80022b2:	fa02 f303 	lsl.w	r3, r2, r3
 80022b6:	43db      	mvns	r3, r3
 80022b8:	4019      	ands	r1, r3
 80022ba:	683b      	ldr	r3, [r7, #0]
 80022bc:	6818      	ldr	r0, [r3, #0]
 80022be:	683b      	ldr	r3, [r7, #0]
 80022c0:	685a      	ldr	r2, [r3, #4]
 80022c2:	4613      	mov	r3, r2
 80022c4:	009b      	lsls	r3, r3, #2
 80022c6:	4413      	add	r3, r2
 80022c8:	3b23      	subs	r3, #35	@ 0x23
 80022ca:	fa00 f203 	lsl.w	r2, r0, r3
 80022ce:	687b      	ldr	r3, [r7, #4]
 80022d0:	681b      	ldr	r3, [r3, #0]
 80022d2:	430a      	orrs	r2, r1
 80022d4:	631a      	str	r2, [r3, #48]	@ 0x30
 80022d6:	e01b      	b.n	8002310 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 13 to 16 */
  else
  {
    MODIFY_REG(hadc->Instance->SQR1                        ,
 80022d8:	687b      	ldr	r3, [r7, #4]
 80022da:	681b      	ldr	r3, [r3, #0]
 80022dc:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 80022de:	683b      	ldr	r3, [r7, #0]
 80022e0:	685a      	ldr	r2, [r3, #4]
 80022e2:	4613      	mov	r3, r2
 80022e4:	009b      	lsls	r3, r3, #2
 80022e6:	4413      	add	r3, r2
 80022e8:	3b41      	subs	r3, #65	@ 0x41
 80022ea:	221f      	movs	r2, #31
 80022ec:	fa02 f303 	lsl.w	r3, r2, r3
 80022f0:	43db      	mvns	r3, r3
 80022f2:	4019      	ands	r1, r3
 80022f4:	683b      	ldr	r3, [r7, #0]
 80022f6:	6818      	ldr	r0, [r3, #0]
 80022f8:	683b      	ldr	r3, [r7, #0]
 80022fa:	685a      	ldr	r2, [r3, #4]
 80022fc:	4613      	mov	r3, r2
 80022fe:	009b      	lsls	r3, r3, #2
 8002300:	4413      	add	r3, r2
 8002302:	3b41      	subs	r3, #65	@ 0x41
 8002304:	fa00 f203 	lsl.w	r2, r0, r3
 8002308:	687b      	ldr	r3, [r7, #4]
 800230a:	681b      	ldr	r3, [r3, #0]
 800230c:	430a      	orrs	r2, r1
 800230e:	62da      	str	r2, [r3, #44]	@ 0x2c
  }
  
  
  /* Channel sampling time configuration */
  /* For channels 10 to 17 */
  if (sConfig->Channel >= ADC_CHANNEL_10)
 8002310:	683b      	ldr	r3, [r7, #0]
 8002312:	681b      	ldr	r3, [r3, #0]
 8002314:	2b09      	cmp	r3, #9
 8002316:	d91c      	bls.n	8002352 <HAL_ADC_ConfigChannel+0x126>
  {
    MODIFY_REG(hadc->Instance->SMPR1                             ,
 8002318:	687b      	ldr	r3, [r7, #4]
 800231a:	681b      	ldr	r3, [r3, #0]
 800231c:	68d9      	ldr	r1, [r3, #12]
 800231e:	683b      	ldr	r3, [r7, #0]
 8002320:	681a      	ldr	r2, [r3, #0]
 8002322:	4613      	mov	r3, r2
 8002324:	005b      	lsls	r3, r3, #1
 8002326:	4413      	add	r3, r2
 8002328:	3b1e      	subs	r3, #30
 800232a:	2207      	movs	r2, #7
 800232c:	fa02 f303 	lsl.w	r3, r2, r3
 8002330:	43db      	mvns	r3, r3
 8002332:	4019      	ands	r1, r3
 8002334:	683b      	ldr	r3, [r7, #0]
 8002336:	6898      	ldr	r0, [r3, #8]
 8002338:	683b      	ldr	r3, [r7, #0]
 800233a:	681a      	ldr	r2, [r3, #0]
 800233c:	4613      	mov	r3, r2
 800233e:	005b      	lsls	r3, r3, #1
 8002340:	4413      	add	r3, r2
 8002342:	3b1e      	subs	r3, #30
 8002344:	fa00 f203 	lsl.w	r2, r0, r3
 8002348:	687b      	ldr	r3, [r7, #4]
 800234a:	681b      	ldr	r3, [r3, #0]
 800234c:	430a      	orrs	r2, r1
 800234e:	60da      	str	r2, [r3, #12]
 8002350:	e019      	b.n	8002386 <HAL_ADC_ConfigChannel+0x15a>
               ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel)      ,
               ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel) );
  }
  else /* For channels 0 to 9 */
  {
    MODIFY_REG(hadc->Instance->SMPR2                             ,
 8002352:	687b      	ldr	r3, [r7, #4]
 8002354:	681b      	ldr	r3, [r3, #0]
 8002356:	6919      	ldr	r1, [r3, #16]
 8002358:	683b      	ldr	r3, [r7, #0]
 800235a:	681a      	ldr	r2, [r3, #0]
 800235c:	4613      	mov	r3, r2
 800235e:	005b      	lsls	r3, r3, #1
 8002360:	4413      	add	r3, r2
 8002362:	2207      	movs	r2, #7
 8002364:	fa02 f303 	lsl.w	r3, r2, r3
 8002368:	43db      	mvns	r3, r3
 800236a:	4019      	ands	r1, r3
 800236c:	683b      	ldr	r3, [r7, #0]
 800236e:	6898      	ldr	r0, [r3, #8]
 8002370:	683b      	ldr	r3, [r7, #0]
 8002372:	681a      	ldr	r2, [r3, #0]
 8002374:	4613      	mov	r3, r2
 8002376:	005b      	lsls	r3, r3, #1
 8002378:	4413      	add	r3, r2
 800237a:	fa00 f203 	lsl.w	r2, r0, r3
 800237e:	687b      	ldr	r3, [r7, #4]
 8002380:	681b      	ldr	r3, [r3, #0]
 8002382:	430a      	orrs	r2, r1
 8002384:	611a      	str	r2, [r3, #16]
               ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
  }
  
  /* If ADC1 Channel_16 or Channel_17 is selected, enable Temperature sensor  */
  /* and VREFINT measurement path.                                            */
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8002386:	683b      	ldr	r3, [r7, #0]
 8002388:	681b      	ldr	r3, [r3, #0]
 800238a:	2b10      	cmp	r3, #16
 800238c:	d003      	beq.n	8002396 <HAL_ADC_ConfigChannel+0x16a>
      (sConfig->Channel == ADC_CHANNEL_VREFINT)      )
 800238e:	683b      	ldr	r3, [r7, #0]
 8002390:	681b      	ldr	r3, [r3, #0]
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8002392:	2b11      	cmp	r3, #17
 8002394:	d132      	bne.n	80023fc <HAL_ADC_ConfigChannel+0x1d0>
  {
    /* For STM32F1 devices with several ADC: Only ADC1 can access internal    */
    /* measurement channels (VrefInt/TempSensor). If these channels are       */
    /* intended to be set on other ADC instances, an error is reported.       */
    if (hadc->Instance == ADC1)
 8002396:	687b      	ldr	r3, [r7, #4]
 8002398:	681b      	ldr	r3, [r3, #0]
 800239a:	4a1d      	ldr	r2, [pc, #116]	@ (8002410 <HAL_ADC_ConfigChannel+0x1e4>)
 800239c:	4293      	cmp	r3, r2
 800239e:	d125      	bne.n	80023ec <HAL_ADC_ConfigChannel+0x1c0>
    {
      if (READ_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE) == RESET)
 80023a0:	687b      	ldr	r3, [r7, #4]
 80023a2:	681b      	ldr	r3, [r3, #0]
 80023a4:	689b      	ldr	r3, [r3, #8]
 80023a6:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80023aa:	2b00      	cmp	r3, #0
 80023ac:	d126      	bne.n	80023fc <HAL_ADC_ConfigChannel+0x1d0>
      {
        SET_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE);
 80023ae:	687b      	ldr	r3, [r7, #4]
 80023b0:	681b      	ldr	r3, [r3, #0]
 80023b2:	689a      	ldr	r2, [r3, #8]
 80023b4:	687b      	ldr	r3, [r7, #4]
 80023b6:	681b      	ldr	r3, [r3, #0]
 80023b8:	f442 0200 	orr.w	r2, r2, #8388608	@ 0x800000
 80023bc:	609a      	str	r2, [r3, #8]
        
        if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80023be:	683b      	ldr	r3, [r7, #0]
 80023c0:	681b      	ldr	r3, [r3, #0]
 80023c2:	2b10      	cmp	r3, #16
 80023c4:	d11a      	bne.n	80023fc <HAL_ADC_ConfigChannel+0x1d0>
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 80023c6:	4b13      	ldr	r3, [pc, #76]	@ (8002414 <HAL_ADC_ConfigChannel+0x1e8>)
 80023c8:	681b      	ldr	r3, [r3, #0]
 80023ca:	4a13      	ldr	r2, [pc, #76]	@ (8002418 <HAL_ADC_ConfigChannel+0x1ec>)
 80023cc:	fba2 2303 	umull	r2, r3, r2, r3
 80023d0:	0c9a      	lsrs	r2, r3, #18
 80023d2:	4613      	mov	r3, r2
 80023d4:	009b      	lsls	r3, r3, #2
 80023d6:	4413      	add	r3, r2
 80023d8:	005b      	lsls	r3, r3, #1
 80023da:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 80023dc:	e002      	b.n	80023e4 <HAL_ADC_ConfigChannel+0x1b8>
          {
            wait_loop_index--;
 80023de:	68bb      	ldr	r3, [r7, #8]
 80023e0:	3b01      	subs	r3, #1
 80023e2:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 80023e4:	68bb      	ldr	r3, [r7, #8]
 80023e6:	2b00      	cmp	r3, #0
 80023e8:	d1f9      	bne.n	80023de <HAL_ADC_ConfigChannel+0x1b2>
 80023ea:	e007      	b.n	80023fc <HAL_ADC_ConfigChannel+0x1d0>
      }
    }
    else
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80023ec:	687b      	ldr	r3, [r7, #4]
 80023ee:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80023f0:	f043 0220 	orr.w	r2, r3, #32
 80023f4:	687b      	ldr	r3, [r7, #4]
 80023f6:	629a      	str	r2, [r3, #40]	@ 0x28
      
      tmp_hal_status = HAL_ERROR;
 80023f8:	2301      	movs	r3, #1
 80023fa:	73fb      	strb	r3, [r7, #15]
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80023fc:	687b      	ldr	r3, [r7, #4]
 80023fe:	2200      	movs	r2, #0
 8002400:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  
  /* Return function status */
  return tmp_hal_status;
 8002404:	7bfb      	ldrb	r3, [r7, #15]
}
 8002406:	4618      	mov	r0, r3
 8002408:	3714      	adds	r7, #20
 800240a:	46bd      	mov	sp, r7
 800240c:	bc80      	pop	{r7}
 800240e:	4770      	bx	lr
 8002410:	40012400 	.word	0x40012400
 8002414:	20000000 	.word	0x20000000
 8002418:	431bde83 	.word	0x431bde83

0800241c <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 800241c:	b580      	push	{r7, lr}
 800241e:	b084      	sub	sp, #16
 8002420:	af00      	add	r7, sp, #0
 8002422:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8002424:	2300      	movs	r3, #0
 8002426:	60fb      	str	r3, [r7, #12]
  __IO uint32_t wait_loop_index = 0U;
 8002428:	2300      	movs	r3, #0
 800242a:	60bb      	str	r3, [r7, #8]
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 800242c:	687b      	ldr	r3, [r7, #4]
 800242e:	681b      	ldr	r3, [r3, #0]
 8002430:	689b      	ldr	r3, [r3, #8]
 8002432:	f003 0301 	and.w	r3, r3, #1
 8002436:	2b01      	cmp	r3, #1
 8002438:	d040      	beq.n	80024bc <ADC_Enable+0xa0>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 800243a:	687b      	ldr	r3, [r7, #4]
 800243c:	681b      	ldr	r3, [r3, #0]
 800243e:	689a      	ldr	r2, [r3, #8]
 8002440:	687b      	ldr	r3, [r7, #4]
 8002442:	681b      	ldr	r3, [r3, #0]
 8002444:	f042 0201 	orr.w	r2, r2, #1
 8002448:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 800244a:	4b1f      	ldr	r3, [pc, #124]	@ (80024c8 <ADC_Enable+0xac>)
 800244c:	681b      	ldr	r3, [r3, #0]
 800244e:	4a1f      	ldr	r2, [pc, #124]	@ (80024cc <ADC_Enable+0xb0>)
 8002450:	fba2 2303 	umull	r2, r3, r2, r3
 8002454:	0c9b      	lsrs	r3, r3, #18
 8002456:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 8002458:	e002      	b.n	8002460 <ADC_Enable+0x44>
    {
      wait_loop_index--;
 800245a:	68bb      	ldr	r3, [r7, #8]
 800245c:	3b01      	subs	r3, #1
 800245e:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 8002460:	68bb      	ldr	r3, [r7, #8]
 8002462:	2b00      	cmp	r3, #0
 8002464:	d1f9      	bne.n	800245a <ADC_Enable+0x3e>
    }
    
    /* Get tick count */
    tickstart = HAL_GetTick();
 8002466:	f7ff fbef 	bl	8001c48 <HAL_GetTick>
 800246a:	60f8      	str	r0, [r7, #12]

    /* Wait for ADC effectively enabled */
    while(ADC_IS_ENABLE(hadc) == RESET)
 800246c:	e01f      	b.n	80024ae <ADC_Enable+0x92>
    {
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 800246e:	f7ff fbeb 	bl	8001c48 <HAL_GetTick>
 8002472:	4602      	mov	r2, r0
 8002474:	68fb      	ldr	r3, [r7, #12]
 8002476:	1ad3      	subs	r3, r2, r3
 8002478:	2b02      	cmp	r3, #2
 800247a:	d918      	bls.n	80024ae <ADC_Enable+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) == RESET)
 800247c:	687b      	ldr	r3, [r7, #4]
 800247e:	681b      	ldr	r3, [r3, #0]
 8002480:	689b      	ldr	r3, [r3, #8]
 8002482:	f003 0301 	and.w	r3, r3, #1
 8002486:	2b01      	cmp	r3, #1
 8002488:	d011      	beq.n	80024ae <ADC_Enable+0x92>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800248a:	687b      	ldr	r3, [r7, #4]
 800248c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800248e:	f043 0210 	orr.w	r2, r3, #16
 8002492:	687b      	ldr	r3, [r7, #4]
 8002494:	629a      	str	r2, [r3, #40]	@ 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002496:	687b      	ldr	r3, [r7, #4]
 8002498:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800249a:	f043 0201 	orr.w	r2, r3, #1
 800249e:	687b      	ldr	r3, [r7, #4]
 80024a0:	62da      	str	r2, [r3, #44]	@ 0x2c

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 80024a2:	687b      	ldr	r3, [r7, #4]
 80024a4:	2200      	movs	r2, #0
 80024a6:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

          return HAL_ERROR;
 80024aa:	2301      	movs	r3, #1
 80024ac:	e007      	b.n	80024be <ADC_Enable+0xa2>
    while(ADC_IS_ENABLE(hadc) == RESET)
 80024ae:	687b      	ldr	r3, [r7, #4]
 80024b0:	681b      	ldr	r3, [r3, #0]
 80024b2:	689b      	ldr	r3, [r3, #8]
 80024b4:	f003 0301 	and.w	r3, r3, #1
 80024b8:	2b01      	cmp	r3, #1
 80024ba:	d1d8      	bne.n	800246e <ADC_Enable+0x52>
      }
    }
  }
   
  /* Return HAL status */
  return HAL_OK;
 80024bc:	2300      	movs	r3, #0
}
 80024be:	4618      	mov	r0, r3
 80024c0:	3710      	adds	r7, #16
 80024c2:	46bd      	mov	sp, r7
 80024c4:	bd80      	pop	{r7, pc}
 80024c6:	bf00      	nop
 80024c8:	20000000 	.word	0x20000000
 80024cc:	431bde83 	.word	0x431bde83

080024d0 <ADC_ConversionStop_Disable>:
  *         stopped to disable the ADC.
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop_Disable(ADC_HandleTypeDef* hadc)
{
 80024d0:	b580      	push	{r7, lr}
 80024d2:	b084      	sub	sp, #16
 80024d4:	af00      	add	r7, sp, #0
 80024d6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80024d8:	2300      	movs	r3, #0
 80024da:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled */
  if (ADC_IS_ENABLE(hadc) != RESET)
 80024dc:	687b      	ldr	r3, [r7, #4]
 80024de:	681b      	ldr	r3, [r3, #0]
 80024e0:	689b      	ldr	r3, [r3, #8]
 80024e2:	f003 0301 	and.w	r3, r3, #1
 80024e6:	2b01      	cmp	r3, #1
 80024e8:	d12e      	bne.n	8002548 <ADC_ConversionStop_Disable+0x78>
  {
    /* Disable the ADC peripheral */
    __HAL_ADC_DISABLE(hadc);
 80024ea:	687b      	ldr	r3, [r7, #4]
 80024ec:	681b      	ldr	r3, [r3, #0]
 80024ee:	689a      	ldr	r2, [r3, #8]
 80024f0:	687b      	ldr	r3, [r7, #4]
 80024f2:	681b      	ldr	r3, [r3, #0]
 80024f4:	f022 0201 	bic.w	r2, r2, #1
 80024f8:	609a      	str	r2, [r3, #8]
     
    /* Get tick count */
    tickstart = HAL_GetTick();
 80024fa:	f7ff fba5 	bl	8001c48 <HAL_GetTick>
 80024fe:	60f8      	str	r0, [r7, #12]
    
    /* Wait for ADC effectively disabled */
    while(ADC_IS_ENABLE(hadc) != RESET)
 8002500:	e01b      	b.n	800253a <ADC_ConversionStop_Disable+0x6a>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8002502:	f7ff fba1 	bl	8001c48 <HAL_GetTick>
 8002506:	4602      	mov	r2, r0
 8002508:	68fb      	ldr	r3, [r7, #12]
 800250a:	1ad3      	subs	r3, r2, r3
 800250c:	2b02      	cmp	r3, #2
 800250e:	d914      	bls.n	800253a <ADC_ConversionStop_Disable+0x6a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) != RESET)
 8002510:	687b      	ldr	r3, [r7, #4]
 8002512:	681b      	ldr	r3, [r3, #0]
 8002514:	689b      	ldr	r3, [r3, #8]
 8002516:	f003 0301 	and.w	r3, r3, #1
 800251a:	2b01      	cmp	r3, #1
 800251c:	d10d      	bne.n	800253a <ADC_ConversionStop_Disable+0x6a>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800251e:	687b      	ldr	r3, [r7, #4]
 8002520:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002522:	f043 0210 	orr.w	r2, r3, #16
 8002526:	687b      	ldr	r3, [r7, #4]
 8002528:	629a      	str	r2, [r3, #40]	@ 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800252a:	687b      	ldr	r3, [r7, #4]
 800252c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800252e:	f043 0201 	orr.w	r2, r3, #1
 8002532:	687b      	ldr	r3, [r7, #4]
 8002534:	62da      	str	r2, [r3, #44]	@ 0x2c

          return HAL_ERROR;
 8002536:	2301      	movs	r3, #1
 8002538:	e007      	b.n	800254a <ADC_ConversionStop_Disable+0x7a>
    while(ADC_IS_ENABLE(hadc) != RESET)
 800253a:	687b      	ldr	r3, [r7, #4]
 800253c:	681b      	ldr	r3, [r3, #0]
 800253e:	689b      	ldr	r3, [r3, #8]
 8002540:	f003 0301 	and.w	r3, r3, #1
 8002544:	2b01      	cmp	r3, #1
 8002546:	d0dc      	beq.n	8002502 <ADC_ConversionStop_Disable+0x32>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 8002548:	2300      	movs	r3, #0
}
 800254a:	4618      	mov	r0, r3
 800254c:	3710      	adds	r7, #16
 800254e:	46bd      	mov	sp, r7
 8002550:	bd80      	pop	{r7, pc}
	...

08002554 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002554:	b480      	push	{r7}
 8002556:	b085      	sub	sp, #20
 8002558:	af00      	add	r7, sp, #0
 800255a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800255c:	687b      	ldr	r3, [r7, #4]
 800255e:	f003 0307 	and.w	r3, r3, #7
 8002562:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002564:	4b0c      	ldr	r3, [pc, #48]	@ (8002598 <__NVIC_SetPriorityGrouping+0x44>)
 8002566:	68db      	ldr	r3, [r3, #12]
 8002568:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800256a:	68ba      	ldr	r2, [r7, #8]
 800256c:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8002570:	4013      	ands	r3, r2
 8002572:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8002574:	68fb      	ldr	r3, [r7, #12]
 8002576:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002578:	68bb      	ldr	r3, [r7, #8]
 800257a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800257c:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8002580:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002584:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002586:	4a04      	ldr	r2, [pc, #16]	@ (8002598 <__NVIC_SetPriorityGrouping+0x44>)
 8002588:	68bb      	ldr	r3, [r7, #8]
 800258a:	60d3      	str	r3, [r2, #12]
}
 800258c:	bf00      	nop
 800258e:	3714      	adds	r7, #20
 8002590:	46bd      	mov	sp, r7
 8002592:	bc80      	pop	{r7}
 8002594:	4770      	bx	lr
 8002596:	bf00      	nop
 8002598:	e000ed00 	.word	0xe000ed00

0800259c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800259c:	b480      	push	{r7}
 800259e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80025a0:	4b04      	ldr	r3, [pc, #16]	@ (80025b4 <__NVIC_GetPriorityGrouping+0x18>)
 80025a2:	68db      	ldr	r3, [r3, #12]
 80025a4:	0a1b      	lsrs	r3, r3, #8
 80025a6:	f003 0307 	and.w	r3, r3, #7
}
 80025aa:	4618      	mov	r0, r3
 80025ac:	46bd      	mov	sp, r7
 80025ae:	bc80      	pop	{r7}
 80025b0:	4770      	bx	lr
 80025b2:	bf00      	nop
 80025b4:	e000ed00 	.word	0xe000ed00

080025b8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80025b8:	b480      	push	{r7}
 80025ba:	b083      	sub	sp, #12
 80025bc:	af00      	add	r7, sp, #0
 80025be:	4603      	mov	r3, r0
 80025c0:	6039      	str	r1, [r7, #0]
 80025c2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80025c4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80025c8:	2b00      	cmp	r3, #0
 80025ca:	db0a      	blt.n	80025e2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80025cc:	683b      	ldr	r3, [r7, #0]
 80025ce:	b2da      	uxtb	r2, r3
 80025d0:	490c      	ldr	r1, [pc, #48]	@ (8002604 <__NVIC_SetPriority+0x4c>)
 80025d2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80025d6:	0112      	lsls	r2, r2, #4
 80025d8:	b2d2      	uxtb	r2, r2
 80025da:	440b      	add	r3, r1
 80025dc:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80025e0:	e00a      	b.n	80025f8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80025e2:	683b      	ldr	r3, [r7, #0]
 80025e4:	b2da      	uxtb	r2, r3
 80025e6:	4908      	ldr	r1, [pc, #32]	@ (8002608 <__NVIC_SetPriority+0x50>)
 80025e8:	79fb      	ldrb	r3, [r7, #7]
 80025ea:	f003 030f 	and.w	r3, r3, #15
 80025ee:	3b04      	subs	r3, #4
 80025f0:	0112      	lsls	r2, r2, #4
 80025f2:	b2d2      	uxtb	r2, r2
 80025f4:	440b      	add	r3, r1
 80025f6:	761a      	strb	r2, [r3, #24]
}
 80025f8:	bf00      	nop
 80025fa:	370c      	adds	r7, #12
 80025fc:	46bd      	mov	sp, r7
 80025fe:	bc80      	pop	{r7}
 8002600:	4770      	bx	lr
 8002602:	bf00      	nop
 8002604:	e000e100 	.word	0xe000e100
 8002608:	e000ed00 	.word	0xe000ed00

0800260c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800260c:	b480      	push	{r7}
 800260e:	b089      	sub	sp, #36	@ 0x24
 8002610:	af00      	add	r7, sp, #0
 8002612:	60f8      	str	r0, [r7, #12]
 8002614:	60b9      	str	r1, [r7, #8]
 8002616:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002618:	68fb      	ldr	r3, [r7, #12]
 800261a:	f003 0307 	and.w	r3, r3, #7
 800261e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002620:	69fb      	ldr	r3, [r7, #28]
 8002622:	f1c3 0307 	rsb	r3, r3, #7
 8002626:	2b04      	cmp	r3, #4
 8002628:	bf28      	it	cs
 800262a:	2304      	movcs	r3, #4
 800262c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800262e:	69fb      	ldr	r3, [r7, #28]
 8002630:	3304      	adds	r3, #4
 8002632:	2b06      	cmp	r3, #6
 8002634:	d902      	bls.n	800263c <NVIC_EncodePriority+0x30>
 8002636:	69fb      	ldr	r3, [r7, #28]
 8002638:	3b03      	subs	r3, #3
 800263a:	e000      	b.n	800263e <NVIC_EncodePriority+0x32>
 800263c:	2300      	movs	r3, #0
 800263e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002640:	f04f 32ff 	mov.w	r2, #4294967295
 8002644:	69bb      	ldr	r3, [r7, #24]
 8002646:	fa02 f303 	lsl.w	r3, r2, r3
 800264a:	43da      	mvns	r2, r3
 800264c:	68bb      	ldr	r3, [r7, #8]
 800264e:	401a      	ands	r2, r3
 8002650:	697b      	ldr	r3, [r7, #20]
 8002652:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002654:	f04f 31ff 	mov.w	r1, #4294967295
 8002658:	697b      	ldr	r3, [r7, #20]
 800265a:	fa01 f303 	lsl.w	r3, r1, r3
 800265e:	43d9      	mvns	r1, r3
 8002660:	687b      	ldr	r3, [r7, #4]
 8002662:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002664:	4313      	orrs	r3, r2
         );
}
 8002666:	4618      	mov	r0, r3
 8002668:	3724      	adds	r7, #36	@ 0x24
 800266a:	46bd      	mov	sp, r7
 800266c:	bc80      	pop	{r7}
 800266e:	4770      	bx	lr

08002670 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002670:	b580      	push	{r7, lr}
 8002672:	b082      	sub	sp, #8
 8002674:	af00      	add	r7, sp, #0
 8002676:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002678:	687b      	ldr	r3, [r7, #4]
 800267a:	3b01      	subs	r3, #1
 800267c:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8002680:	d301      	bcc.n	8002686 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002682:	2301      	movs	r3, #1
 8002684:	e00f      	b.n	80026a6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002686:	4a0a      	ldr	r2, [pc, #40]	@ (80026b0 <SysTick_Config+0x40>)
 8002688:	687b      	ldr	r3, [r7, #4]
 800268a:	3b01      	subs	r3, #1
 800268c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800268e:	210f      	movs	r1, #15
 8002690:	f04f 30ff 	mov.w	r0, #4294967295
 8002694:	f7ff ff90 	bl	80025b8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002698:	4b05      	ldr	r3, [pc, #20]	@ (80026b0 <SysTick_Config+0x40>)
 800269a:	2200      	movs	r2, #0
 800269c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800269e:	4b04      	ldr	r3, [pc, #16]	@ (80026b0 <SysTick_Config+0x40>)
 80026a0:	2207      	movs	r2, #7
 80026a2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80026a4:	2300      	movs	r3, #0
}
 80026a6:	4618      	mov	r0, r3
 80026a8:	3708      	adds	r7, #8
 80026aa:	46bd      	mov	sp, r7
 80026ac:	bd80      	pop	{r7, pc}
 80026ae:	bf00      	nop
 80026b0:	e000e010 	.word	0xe000e010

080026b4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80026b4:	b580      	push	{r7, lr}
 80026b6:	b082      	sub	sp, #8
 80026b8:	af00      	add	r7, sp, #0
 80026ba:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80026bc:	6878      	ldr	r0, [r7, #4]
 80026be:	f7ff ff49 	bl	8002554 <__NVIC_SetPriorityGrouping>
}
 80026c2:	bf00      	nop
 80026c4:	3708      	adds	r7, #8
 80026c6:	46bd      	mov	sp, r7
 80026c8:	bd80      	pop	{r7, pc}

080026ca <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80026ca:	b580      	push	{r7, lr}
 80026cc:	b086      	sub	sp, #24
 80026ce:	af00      	add	r7, sp, #0
 80026d0:	4603      	mov	r3, r0
 80026d2:	60b9      	str	r1, [r7, #8]
 80026d4:	607a      	str	r2, [r7, #4]
 80026d6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80026d8:	2300      	movs	r3, #0
 80026da:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80026dc:	f7ff ff5e 	bl	800259c <__NVIC_GetPriorityGrouping>
 80026e0:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80026e2:	687a      	ldr	r2, [r7, #4]
 80026e4:	68b9      	ldr	r1, [r7, #8]
 80026e6:	6978      	ldr	r0, [r7, #20]
 80026e8:	f7ff ff90 	bl	800260c <NVIC_EncodePriority>
 80026ec:	4602      	mov	r2, r0
 80026ee:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80026f2:	4611      	mov	r1, r2
 80026f4:	4618      	mov	r0, r3
 80026f6:	f7ff ff5f 	bl	80025b8 <__NVIC_SetPriority>
}
 80026fa:	bf00      	nop
 80026fc:	3718      	adds	r7, #24
 80026fe:	46bd      	mov	sp, r7
 8002700:	bd80      	pop	{r7, pc}

08002702 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002702:	b580      	push	{r7, lr}
 8002704:	b082      	sub	sp, #8
 8002706:	af00      	add	r7, sp, #0
 8002708:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800270a:	6878      	ldr	r0, [r7, #4]
 800270c:	f7ff ffb0 	bl	8002670 <SysTick_Config>
 8002710:	4603      	mov	r3, r0
}
 8002712:	4618      	mov	r0, r3
 8002714:	3708      	adds	r7, #8
 8002716:	46bd      	mov	sp, r7
 8002718:	bd80      	pop	{r7, pc}
	...

0800271c <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800271c:	b480      	push	{r7}
 800271e:	b08b      	sub	sp, #44	@ 0x2c
 8002720:	af00      	add	r7, sp, #0
 8002722:	6078      	str	r0, [r7, #4]
 8002724:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8002726:	2300      	movs	r3, #0
 8002728:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 800272a:	2300      	movs	r3, #0
 800272c:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800272e:	e169      	b.n	8002a04 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8002730:	2201      	movs	r2, #1
 8002732:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002734:	fa02 f303 	lsl.w	r3, r2, r3
 8002738:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800273a:	683b      	ldr	r3, [r7, #0]
 800273c:	681b      	ldr	r3, [r3, #0]
 800273e:	69fa      	ldr	r2, [r7, #28]
 8002740:	4013      	ands	r3, r2
 8002742:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8002744:	69ba      	ldr	r2, [r7, #24]
 8002746:	69fb      	ldr	r3, [r7, #28]
 8002748:	429a      	cmp	r2, r3
 800274a:	f040 8158 	bne.w	80029fe <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 800274e:	683b      	ldr	r3, [r7, #0]
 8002750:	685b      	ldr	r3, [r3, #4]
 8002752:	4a9a      	ldr	r2, [pc, #616]	@ (80029bc <HAL_GPIO_Init+0x2a0>)
 8002754:	4293      	cmp	r3, r2
 8002756:	d05e      	beq.n	8002816 <HAL_GPIO_Init+0xfa>
 8002758:	4a98      	ldr	r2, [pc, #608]	@ (80029bc <HAL_GPIO_Init+0x2a0>)
 800275a:	4293      	cmp	r3, r2
 800275c:	d875      	bhi.n	800284a <HAL_GPIO_Init+0x12e>
 800275e:	4a98      	ldr	r2, [pc, #608]	@ (80029c0 <HAL_GPIO_Init+0x2a4>)
 8002760:	4293      	cmp	r3, r2
 8002762:	d058      	beq.n	8002816 <HAL_GPIO_Init+0xfa>
 8002764:	4a96      	ldr	r2, [pc, #600]	@ (80029c0 <HAL_GPIO_Init+0x2a4>)
 8002766:	4293      	cmp	r3, r2
 8002768:	d86f      	bhi.n	800284a <HAL_GPIO_Init+0x12e>
 800276a:	4a96      	ldr	r2, [pc, #600]	@ (80029c4 <HAL_GPIO_Init+0x2a8>)
 800276c:	4293      	cmp	r3, r2
 800276e:	d052      	beq.n	8002816 <HAL_GPIO_Init+0xfa>
 8002770:	4a94      	ldr	r2, [pc, #592]	@ (80029c4 <HAL_GPIO_Init+0x2a8>)
 8002772:	4293      	cmp	r3, r2
 8002774:	d869      	bhi.n	800284a <HAL_GPIO_Init+0x12e>
 8002776:	4a94      	ldr	r2, [pc, #592]	@ (80029c8 <HAL_GPIO_Init+0x2ac>)
 8002778:	4293      	cmp	r3, r2
 800277a:	d04c      	beq.n	8002816 <HAL_GPIO_Init+0xfa>
 800277c:	4a92      	ldr	r2, [pc, #584]	@ (80029c8 <HAL_GPIO_Init+0x2ac>)
 800277e:	4293      	cmp	r3, r2
 8002780:	d863      	bhi.n	800284a <HAL_GPIO_Init+0x12e>
 8002782:	4a92      	ldr	r2, [pc, #584]	@ (80029cc <HAL_GPIO_Init+0x2b0>)
 8002784:	4293      	cmp	r3, r2
 8002786:	d046      	beq.n	8002816 <HAL_GPIO_Init+0xfa>
 8002788:	4a90      	ldr	r2, [pc, #576]	@ (80029cc <HAL_GPIO_Init+0x2b0>)
 800278a:	4293      	cmp	r3, r2
 800278c:	d85d      	bhi.n	800284a <HAL_GPIO_Init+0x12e>
 800278e:	2b12      	cmp	r3, #18
 8002790:	d82a      	bhi.n	80027e8 <HAL_GPIO_Init+0xcc>
 8002792:	2b12      	cmp	r3, #18
 8002794:	d859      	bhi.n	800284a <HAL_GPIO_Init+0x12e>
 8002796:	a201      	add	r2, pc, #4	@ (adr r2, 800279c <HAL_GPIO_Init+0x80>)
 8002798:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800279c:	08002817 	.word	0x08002817
 80027a0:	080027f1 	.word	0x080027f1
 80027a4:	08002803 	.word	0x08002803
 80027a8:	08002845 	.word	0x08002845
 80027ac:	0800284b 	.word	0x0800284b
 80027b0:	0800284b 	.word	0x0800284b
 80027b4:	0800284b 	.word	0x0800284b
 80027b8:	0800284b 	.word	0x0800284b
 80027bc:	0800284b 	.word	0x0800284b
 80027c0:	0800284b 	.word	0x0800284b
 80027c4:	0800284b 	.word	0x0800284b
 80027c8:	0800284b 	.word	0x0800284b
 80027cc:	0800284b 	.word	0x0800284b
 80027d0:	0800284b 	.word	0x0800284b
 80027d4:	0800284b 	.word	0x0800284b
 80027d8:	0800284b 	.word	0x0800284b
 80027dc:	0800284b 	.word	0x0800284b
 80027e0:	080027f9 	.word	0x080027f9
 80027e4:	0800280d 	.word	0x0800280d
 80027e8:	4a79      	ldr	r2, [pc, #484]	@ (80029d0 <HAL_GPIO_Init+0x2b4>)
 80027ea:	4293      	cmp	r3, r2
 80027ec:	d013      	beq.n	8002816 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 80027ee:	e02c      	b.n	800284a <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 80027f0:	683b      	ldr	r3, [r7, #0]
 80027f2:	68db      	ldr	r3, [r3, #12]
 80027f4:	623b      	str	r3, [r7, #32]
          break;
 80027f6:	e029      	b.n	800284c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 80027f8:	683b      	ldr	r3, [r7, #0]
 80027fa:	68db      	ldr	r3, [r3, #12]
 80027fc:	3304      	adds	r3, #4
 80027fe:	623b      	str	r3, [r7, #32]
          break;
 8002800:	e024      	b.n	800284c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8002802:	683b      	ldr	r3, [r7, #0]
 8002804:	68db      	ldr	r3, [r3, #12]
 8002806:	3308      	adds	r3, #8
 8002808:	623b      	str	r3, [r7, #32]
          break;
 800280a:	e01f      	b.n	800284c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 800280c:	683b      	ldr	r3, [r7, #0]
 800280e:	68db      	ldr	r3, [r3, #12]
 8002810:	330c      	adds	r3, #12
 8002812:	623b      	str	r3, [r7, #32]
          break;
 8002814:	e01a      	b.n	800284c <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8002816:	683b      	ldr	r3, [r7, #0]
 8002818:	689b      	ldr	r3, [r3, #8]
 800281a:	2b00      	cmp	r3, #0
 800281c:	d102      	bne.n	8002824 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 800281e:	2304      	movs	r3, #4
 8002820:	623b      	str	r3, [r7, #32]
          break;
 8002822:	e013      	b.n	800284c <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8002824:	683b      	ldr	r3, [r7, #0]
 8002826:	689b      	ldr	r3, [r3, #8]
 8002828:	2b01      	cmp	r3, #1
 800282a:	d105      	bne.n	8002838 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 800282c:	2308      	movs	r3, #8
 800282e:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8002830:	687b      	ldr	r3, [r7, #4]
 8002832:	69fa      	ldr	r2, [r7, #28]
 8002834:	611a      	str	r2, [r3, #16]
          break;
 8002836:	e009      	b.n	800284c <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8002838:	2308      	movs	r3, #8
 800283a:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 800283c:	687b      	ldr	r3, [r7, #4]
 800283e:	69fa      	ldr	r2, [r7, #28]
 8002840:	615a      	str	r2, [r3, #20]
          break;
 8002842:	e003      	b.n	800284c <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8002844:	2300      	movs	r3, #0
 8002846:	623b      	str	r3, [r7, #32]
          break;
 8002848:	e000      	b.n	800284c <HAL_GPIO_Init+0x130>
          break;
 800284a:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 800284c:	69bb      	ldr	r3, [r7, #24]
 800284e:	2bff      	cmp	r3, #255	@ 0xff
 8002850:	d801      	bhi.n	8002856 <HAL_GPIO_Init+0x13a>
 8002852:	687b      	ldr	r3, [r7, #4]
 8002854:	e001      	b.n	800285a <HAL_GPIO_Init+0x13e>
 8002856:	687b      	ldr	r3, [r7, #4]
 8002858:	3304      	adds	r3, #4
 800285a:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 800285c:	69bb      	ldr	r3, [r7, #24]
 800285e:	2bff      	cmp	r3, #255	@ 0xff
 8002860:	d802      	bhi.n	8002868 <HAL_GPIO_Init+0x14c>
 8002862:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002864:	009b      	lsls	r3, r3, #2
 8002866:	e002      	b.n	800286e <HAL_GPIO_Init+0x152>
 8002868:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800286a:	3b08      	subs	r3, #8
 800286c:	009b      	lsls	r3, r3, #2
 800286e:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8002870:	697b      	ldr	r3, [r7, #20]
 8002872:	681a      	ldr	r2, [r3, #0]
 8002874:	210f      	movs	r1, #15
 8002876:	693b      	ldr	r3, [r7, #16]
 8002878:	fa01 f303 	lsl.w	r3, r1, r3
 800287c:	43db      	mvns	r3, r3
 800287e:	401a      	ands	r2, r3
 8002880:	6a39      	ldr	r1, [r7, #32]
 8002882:	693b      	ldr	r3, [r7, #16]
 8002884:	fa01 f303 	lsl.w	r3, r1, r3
 8002888:	431a      	orrs	r2, r3
 800288a:	697b      	ldr	r3, [r7, #20]
 800288c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800288e:	683b      	ldr	r3, [r7, #0]
 8002890:	685b      	ldr	r3, [r3, #4]
 8002892:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002896:	2b00      	cmp	r3, #0
 8002898:	f000 80b1 	beq.w	80029fe <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 800289c:	4b4d      	ldr	r3, [pc, #308]	@ (80029d4 <HAL_GPIO_Init+0x2b8>)
 800289e:	699b      	ldr	r3, [r3, #24]
 80028a0:	4a4c      	ldr	r2, [pc, #304]	@ (80029d4 <HAL_GPIO_Init+0x2b8>)
 80028a2:	f043 0301 	orr.w	r3, r3, #1
 80028a6:	6193      	str	r3, [r2, #24]
 80028a8:	4b4a      	ldr	r3, [pc, #296]	@ (80029d4 <HAL_GPIO_Init+0x2b8>)
 80028aa:	699b      	ldr	r3, [r3, #24]
 80028ac:	f003 0301 	and.w	r3, r3, #1
 80028b0:	60bb      	str	r3, [r7, #8]
 80028b2:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 80028b4:	4a48      	ldr	r2, [pc, #288]	@ (80029d8 <HAL_GPIO_Init+0x2bc>)
 80028b6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80028b8:	089b      	lsrs	r3, r3, #2
 80028ba:	3302      	adds	r3, #2
 80028bc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80028c0:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 80028c2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80028c4:	f003 0303 	and.w	r3, r3, #3
 80028c8:	009b      	lsls	r3, r3, #2
 80028ca:	220f      	movs	r2, #15
 80028cc:	fa02 f303 	lsl.w	r3, r2, r3
 80028d0:	43db      	mvns	r3, r3
 80028d2:	68fa      	ldr	r2, [r7, #12]
 80028d4:	4013      	ands	r3, r2
 80028d6:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 80028d8:	687b      	ldr	r3, [r7, #4]
 80028da:	4a40      	ldr	r2, [pc, #256]	@ (80029dc <HAL_GPIO_Init+0x2c0>)
 80028dc:	4293      	cmp	r3, r2
 80028de:	d013      	beq.n	8002908 <HAL_GPIO_Init+0x1ec>
 80028e0:	687b      	ldr	r3, [r7, #4]
 80028e2:	4a3f      	ldr	r2, [pc, #252]	@ (80029e0 <HAL_GPIO_Init+0x2c4>)
 80028e4:	4293      	cmp	r3, r2
 80028e6:	d00d      	beq.n	8002904 <HAL_GPIO_Init+0x1e8>
 80028e8:	687b      	ldr	r3, [r7, #4]
 80028ea:	4a3e      	ldr	r2, [pc, #248]	@ (80029e4 <HAL_GPIO_Init+0x2c8>)
 80028ec:	4293      	cmp	r3, r2
 80028ee:	d007      	beq.n	8002900 <HAL_GPIO_Init+0x1e4>
 80028f0:	687b      	ldr	r3, [r7, #4]
 80028f2:	4a3d      	ldr	r2, [pc, #244]	@ (80029e8 <HAL_GPIO_Init+0x2cc>)
 80028f4:	4293      	cmp	r3, r2
 80028f6:	d101      	bne.n	80028fc <HAL_GPIO_Init+0x1e0>
 80028f8:	2303      	movs	r3, #3
 80028fa:	e006      	b.n	800290a <HAL_GPIO_Init+0x1ee>
 80028fc:	2304      	movs	r3, #4
 80028fe:	e004      	b.n	800290a <HAL_GPIO_Init+0x1ee>
 8002900:	2302      	movs	r3, #2
 8002902:	e002      	b.n	800290a <HAL_GPIO_Init+0x1ee>
 8002904:	2301      	movs	r3, #1
 8002906:	e000      	b.n	800290a <HAL_GPIO_Init+0x1ee>
 8002908:	2300      	movs	r3, #0
 800290a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800290c:	f002 0203 	and.w	r2, r2, #3
 8002910:	0092      	lsls	r2, r2, #2
 8002912:	4093      	lsls	r3, r2
 8002914:	68fa      	ldr	r2, [r7, #12]
 8002916:	4313      	orrs	r3, r2
 8002918:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 800291a:	492f      	ldr	r1, [pc, #188]	@ (80029d8 <HAL_GPIO_Init+0x2bc>)
 800291c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800291e:	089b      	lsrs	r3, r3, #2
 8002920:	3302      	adds	r3, #2
 8002922:	68fa      	ldr	r2, [r7, #12]
 8002924:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8002928:	683b      	ldr	r3, [r7, #0]
 800292a:	685b      	ldr	r3, [r3, #4]
 800292c:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8002930:	2b00      	cmp	r3, #0
 8002932:	d006      	beq.n	8002942 <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8002934:	4b2d      	ldr	r3, [pc, #180]	@ (80029ec <HAL_GPIO_Init+0x2d0>)
 8002936:	689a      	ldr	r2, [r3, #8]
 8002938:	492c      	ldr	r1, [pc, #176]	@ (80029ec <HAL_GPIO_Init+0x2d0>)
 800293a:	69bb      	ldr	r3, [r7, #24]
 800293c:	4313      	orrs	r3, r2
 800293e:	608b      	str	r3, [r1, #8]
 8002940:	e006      	b.n	8002950 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8002942:	4b2a      	ldr	r3, [pc, #168]	@ (80029ec <HAL_GPIO_Init+0x2d0>)
 8002944:	689a      	ldr	r2, [r3, #8]
 8002946:	69bb      	ldr	r3, [r7, #24]
 8002948:	43db      	mvns	r3, r3
 800294a:	4928      	ldr	r1, [pc, #160]	@ (80029ec <HAL_GPIO_Init+0x2d0>)
 800294c:	4013      	ands	r3, r2
 800294e:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8002950:	683b      	ldr	r3, [r7, #0]
 8002952:	685b      	ldr	r3, [r3, #4]
 8002954:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002958:	2b00      	cmp	r3, #0
 800295a:	d006      	beq.n	800296a <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 800295c:	4b23      	ldr	r3, [pc, #140]	@ (80029ec <HAL_GPIO_Init+0x2d0>)
 800295e:	68da      	ldr	r2, [r3, #12]
 8002960:	4922      	ldr	r1, [pc, #136]	@ (80029ec <HAL_GPIO_Init+0x2d0>)
 8002962:	69bb      	ldr	r3, [r7, #24]
 8002964:	4313      	orrs	r3, r2
 8002966:	60cb      	str	r3, [r1, #12]
 8002968:	e006      	b.n	8002978 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 800296a:	4b20      	ldr	r3, [pc, #128]	@ (80029ec <HAL_GPIO_Init+0x2d0>)
 800296c:	68da      	ldr	r2, [r3, #12]
 800296e:	69bb      	ldr	r3, [r7, #24]
 8002970:	43db      	mvns	r3, r3
 8002972:	491e      	ldr	r1, [pc, #120]	@ (80029ec <HAL_GPIO_Init+0x2d0>)
 8002974:	4013      	ands	r3, r2
 8002976:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8002978:	683b      	ldr	r3, [r7, #0]
 800297a:	685b      	ldr	r3, [r3, #4]
 800297c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002980:	2b00      	cmp	r3, #0
 8002982:	d006      	beq.n	8002992 <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8002984:	4b19      	ldr	r3, [pc, #100]	@ (80029ec <HAL_GPIO_Init+0x2d0>)
 8002986:	685a      	ldr	r2, [r3, #4]
 8002988:	4918      	ldr	r1, [pc, #96]	@ (80029ec <HAL_GPIO_Init+0x2d0>)
 800298a:	69bb      	ldr	r3, [r7, #24]
 800298c:	4313      	orrs	r3, r2
 800298e:	604b      	str	r3, [r1, #4]
 8002990:	e006      	b.n	80029a0 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8002992:	4b16      	ldr	r3, [pc, #88]	@ (80029ec <HAL_GPIO_Init+0x2d0>)
 8002994:	685a      	ldr	r2, [r3, #4]
 8002996:	69bb      	ldr	r3, [r7, #24]
 8002998:	43db      	mvns	r3, r3
 800299a:	4914      	ldr	r1, [pc, #80]	@ (80029ec <HAL_GPIO_Init+0x2d0>)
 800299c:	4013      	ands	r3, r2
 800299e:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80029a0:	683b      	ldr	r3, [r7, #0]
 80029a2:	685b      	ldr	r3, [r3, #4]
 80029a4:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80029a8:	2b00      	cmp	r3, #0
 80029aa:	d021      	beq.n	80029f0 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 80029ac:	4b0f      	ldr	r3, [pc, #60]	@ (80029ec <HAL_GPIO_Init+0x2d0>)
 80029ae:	681a      	ldr	r2, [r3, #0]
 80029b0:	490e      	ldr	r1, [pc, #56]	@ (80029ec <HAL_GPIO_Init+0x2d0>)
 80029b2:	69bb      	ldr	r3, [r7, #24]
 80029b4:	4313      	orrs	r3, r2
 80029b6:	600b      	str	r3, [r1, #0]
 80029b8:	e021      	b.n	80029fe <HAL_GPIO_Init+0x2e2>
 80029ba:	bf00      	nop
 80029bc:	10320000 	.word	0x10320000
 80029c0:	10310000 	.word	0x10310000
 80029c4:	10220000 	.word	0x10220000
 80029c8:	10210000 	.word	0x10210000
 80029cc:	10120000 	.word	0x10120000
 80029d0:	10110000 	.word	0x10110000
 80029d4:	40021000 	.word	0x40021000
 80029d8:	40010000 	.word	0x40010000
 80029dc:	40010800 	.word	0x40010800
 80029e0:	40010c00 	.word	0x40010c00
 80029e4:	40011000 	.word	0x40011000
 80029e8:	40011400 	.word	0x40011400
 80029ec:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 80029f0:	4b0b      	ldr	r3, [pc, #44]	@ (8002a20 <HAL_GPIO_Init+0x304>)
 80029f2:	681a      	ldr	r2, [r3, #0]
 80029f4:	69bb      	ldr	r3, [r7, #24]
 80029f6:	43db      	mvns	r3, r3
 80029f8:	4909      	ldr	r1, [pc, #36]	@ (8002a20 <HAL_GPIO_Init+0x304>)
 80029fa:	4013      	ands	r3, r2
 80029fc:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 80029fe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002a00:	3301      	adds	r3, #1
 8002a02:	627b      	str	r3, [r7, #36]	@ 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002a04:	683b      	ldr	r3, [r7, #0]
 8002a06:	681a      	ldr	r2, [r3, #0]
 8002a08:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002a0a:	fa22 f303 	lsr.w	r3, r2, r3
 8002a0e:	2b00      	cmp	r3, #0
 8002a10:	f47f ae8e 	bne.w	8002730 <HAL_GPIO_Init+0x14>
  }
}
 8002a14:	bf00      	nop
 8002a16:	bf00      	nop
 8002a18:	372c      	adds	r7, #44	@ 0x2c
 8002a1a:	46bd      	mov	sp, r7
 8002a1c:	bc80      	pop	{r7}
 8002a1e:	4770      	bx	lr
 8002a20:	40010400 	.word	0x40010400

08002a24 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002a24:	b580      	push	{r7, lr}
 8002a26:	b084      	sub	sp, #16
 8002a28:	af00      	add	r7, sp, #0
 8002a2a:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002a2c:	687b      	ldr	r3, [r7, #4]
 8002a2e:	2b00      	cmp	r3, #0
 8002a30:	d101      	bne.n	8002a36 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8002a32:	2301      	movs	r3, #1
 8002a34:	e12b      	b.n	8002c8e <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8002a36:	687b      	ldr	r3, [r7, #4]
 8002a38:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002a3c:	b2db      	uxtb	r3, r3
 8002a3e:	2b00      	cmp	r3, #0
 8002a40:	d106      	bne.n	8002a50 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8002a42:	687b      	ldr	r3, [r7, #4]
 8002a44:	2200      	movs	r2, #0
 8002a46:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8002a4a:	6878      	ldr	r0, [r7, #4]
 8002a4c:	f7fe ff4c 	bl	80018e8 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002a50:	687b      	ldr	r3, [r7, #4]
 8002a52:	2224      	movs	r2, #36	@ 0x24
 8002a54:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002a58:	687b      	ldr	r3, [r7, #4]
 8002a5a:	681b      	ldr	r3, [r3, #0]
 8002a5c:	681a      	ldr	r2, [r3, #0]
 8002a5e:	687b      	ldr	r3, [r7, #4]
 8002a60:	681b      	ldr	r3, [r3, #0]
 8002a62:	f022 0201 	bic.w	r2, r2, #1
 8002a66:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8002a68:	687b      	ldr	r3, [r7, #4]
 8002a6a:	681b      	ldr	r3, [r3, #0]
 8002a6c:	681a      	ldr	r2, [r3, #0]
 8002a6e:	687b      	ldr	r3, [r7, #4]
 8002a70:	681b      	ldr	r3, [r3, #0]
 8002a72:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8002a76:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8002a78:	687b      	ldr	r3, [r7, #4]
 8002a7a:	681b      	ldr	r3, [r3, #0]
 8002a7c:	681a      	ldr	r2, [r3, #0]
 8002a7e:	687b      	ldr	r3, [r7, #4]
 8002a80:	681b      	ldr	r3, [r3, #0]
 8002a82:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8002a86:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8002a88:	f001 f832 	bl	8003af0 <HAL_RCC_GetPCLK1Freq>
 8002a8c:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8002a8e:	687b      	ldr	r3, [r7, #4]
 8002a90:	685b      	ldr	r3, [r3, #4]
 8002a92:	4a81      	ldr	r2, [pc, #516]	@ (8002c98 <HAL_I2C_Init+0x274>)
 8002a94:	4293      	cmp	r3, r2
 8002a96:	d807      	bhi.n	8002aa8 <HAL_I2C_Init+0x84>
 8002a98:	68fb      	ldr	r3, [r7, #12]
 8002a9a:	4a80      	ldr	r2, [pc, #512]	@ (8002c9c <HAL_I2C_Init+0x278>)
 8002a9c:	4293      	cmp	r3, r2
 8002a9e:	bf94      	ite	ls
 8002aa0:	2301      	movls	r3, #1
 8002aa2:	2300      	movhi	r3, #0
 8002aa4:	b2db      	uxtb	r3, r3
 8002aa6:	e006      	b.n	8002ab6 <HAL_I2C_Init+0x92>
 8002aa8:	68fb      	ldr	r3, [r7, #12]
 8002aaa:	4a7d      	ldr	r2, [pc, #500]	@ (8002ca0 <HAL_I2C_Init+0x27c>)
 8002aac:	4293      	cmp	r3, r2
 8002aae:	bf94      	ite	ls
 8002ab0:	2301      	movls	r3, #1
 8002ab2:	2300      	movhi	r3, #0
 8002ab4:	b2db      	uxtb	r3, r3
 8002ab6:	2b00      	cmp	r3, #0
 8002ab8:	d001      	beq.n	8002abe <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8002aba:	2301      	movs	r3, #1
 8002abc:	e0e7      	b.n	8002c8e <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8002abe:	68fb      	ldr	r3, [r7, #12]
 8002ac0:	4a78      	ldr	r2, [pc, #480]	@ (8002ca4 <HAL_I2C_Init+0x280>)
 8002ac2:	fba2 2303 	umull	r2, r3, r2, r3
 8002ac6:	0c9b      	lsrs	r3, r3, #18
 8002ac8:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8002aca:	687b      	ldr	r3, [r7, #4]
 8002acc:	681b      	ldr	r3, [r3, #0]
 8002ace:	685b      	ldr	r3, [r3, #4]
 8002ad0:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8002ad4:	687b      	ldr	r3, [r7, #4]
 8002ad6:	681b      	ldr	r3, [r3, #0]
 8002ad8:	68ba      	ldr	r2, [r7, #8]
 8002ada:	430a      	orrs	r2, r1
 8002adc:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8002ade:	687b      	ldr	r3, [r7, #4]
 8002ae0:	681b      	ldr	r3, [r3, #0]
 8002ae2:	6a1b      	ldr	r3, [r3, #32]
 8002ae4:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8002ae8:	687b      	ldr	r3, [r7, #4]
 8002aea:	685b      	ldr	r3, [r3, #4]
 8002aec:	4a6a      	ldr	r2, [pc, #424]	@ (8002c98 <HAL_I2C_Init+0x274>)
 8002aee:	4293      	cmp	r3, r2
 8002af0:	d802      	bhi.n	8002af8 <HAL_I2C_Init+0xd4>
 8002af2:	68bb      	ldr	r3, [r7, #8]
 8002af4:	3301      	adds	r3, #1
 8002af6:	e009      	b.n	8002b0c <HAL_I2C_Init+0xe8>
 8002af8:	68bb      	ldr	r3, [r7, #8]
 8002afa:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 8002afe:	fb02 f303 	mul.w	r3, r2, r3
 8002b02:	4a69      	ldr	r2, [pc, #420]	@ (8002ca8 <HAL_I2C_Init+0x284>)
 8002b04:	fba2 2303 	umull	r2, r3, r2, r3
 8002b08:	099b      	lsrs	r3, r3, #6
 8002b0a:	3301      	adds	r3, #1
 8002b0c:	687a      	ldr	r2, [r7, #4]
 8002b0e:	6812      	ldr	r2, [r2, #0]
 8002b10:	430b      	orrs	r3, r1
 8002b12:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8002b14:	687b      	ldr	r3, [r7, #4]
 8002b16:	681b      	ldr	r3, [r3, #0]
 8002b18:	69db      	ldr	r3, [r3, #28]
 8002b1a:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 8002b1e:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 8002b22:	687b      	ldr	r3, [r7, #4]
 8002b24:	685b      	ldr	r3, [r3, #4]
 8002b26:	495c      	ldr	r1, [pc, #368]	@ (8002c98 <HAL_I2C_Init+0x274>)
 8002b28:	428b      	cmp	r3, r1
 8002b2a:	d819      	bhi.n	8002b60 <HAL_I2C_Init+0x13c>
 8002b2c:	68fb      	ldr	r3, [r7, #12]
 8002b2e:	1e59      	subs	r1, r3, #1
 8002b30:	687b      	ldr	r3, [r7, #4]
 8002b32:	685b      	ldr	r3, [r3, #4]
 8002b34:	005b      	lsls	r3, r3, #1
 8002b36:	fbb1 f3f3 	udiv	r3, r1, r3
 8002b3a:	1c59      	adds	r1, r3, #1
 8002b3c:	f640 73fc 	movw	r3, #4092	@ 0xffc
 8002b40:	400b      	ands	r3, r1
 8002b42:	2b00      	cmp	r3, #0
 8002b44:	d00a      	beq.n	8002b5c <HAL_I2C_Init+0x138>
 8002b46:	68fb      	ldr	r3, [r7, #12]
 8002b48:	1e59      	subs	r1, r3, #1
 8002b4a:	687b      	ldr	r3, [r7, #4]
 8002b4c:	685b      	ldr	r3, [r3, #4]
 8002b4e:	005b      	lsls	r3, r3, #1
 8002b50:	fbb1 f3f3 	udiv	r3, r1, r3
 8002b54:	3301      	adds	r3, #1
 8002b56:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002b5a:	e051      	b.n	8002c00 <HAL_I2C_Init+0x1dc>
 8002b5c:	2304      	movs	r3, #4
 8002b5e:	e04f      	b.n	8002c00 <HAL_I2C_Init+0x1dc>
 8002b60:	687b      	ldr	r3, [r7, #4]
 8002b62:	689b      	ldr	r3, [r3, #8]
 8002b64:	2b00      	cmp	r3, #0
 8002b66:	d111      	bne.n	8002b8c <HAL_I2C_Init+0x168>
 8002b68:	68fb      	ldr	r3, [r7, #12]
 8002b6a:	1e58      	subs	r0, r3, #1
 8002b6c:	687b      	ldr	r3, [r7, #4]
 8002b6e:	6859      	ldr	r1, [r3, #4]
 8002b70:	460b      	mov	r3, r1
 8002b72:	005b      	lsls	r3, r3, #1
 8002b74:	440b      	add	r3, r1
 8002b76:	fbb0 f3f3 	udiv	r3, r0, r3
 8002b7a:	3301      	adds	r3, #1
 8002b7c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002b80:	2b00      	cmp	r3, #0
 8002b82:	bf0c      	ite	eq
 8002b84:	2301      	moveq	r3, #1
 8002b86:	2300      	movne	r3, #0
 8002b88:	b2db      	uxtb	r3, r3
 8002b8a:	e012      	b.n	8002bb2 <HAL_I2C_Init+0x18e>
 8002b8c:	68fb      	ldr	r3, [r7, #12]
 8002b8e:	1e58      	subs	r0, r3, #1
 8002b90:	687b      	ldr	r3, [r7, #4]
 8002b92:	6859      	ldr	r1, [r3, #4]
 8002b94:	460b      	mov	r3, r1
 8002b96:	009b      	lsls	r3, r3, #2
 8002b98:	440b      	add	r3, r1
 8002b9a:	0099      	lsls	r1, r3, #2
 8002b9c:	440b      	add	r3, r1
 8002b9e:	fbb0 f3f3 	udiv	r3, r0, r3
 8002ba2:	3301      	adds	r3, #1
 8002ba4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002ba8:	2b00      	cmp	r3, #0
 8002baa:	bf0c      	ite	eq
 8002bac:	2301      	moveq	r3, #1
 8002bae:	2300      	movne	r3, #0
 8002bb0:	b2db      	uxtb	r3, r3
 8002bb2:	2b00      	cmp	r3, #0
 8002bb4:	d001      	beq.n	8002bba <HAL_I2C_Init+0x196>
 8002bb6:	2301      	movs	r3, #1
 8002bb8:	e022      	b.n	8002c00 <HAL_I2C_Init+0x1dc>
 8002bba:	687b      	ldr	r3, [r7, #4]
 8002bbc:	689b      	ldr	r3, [r3, #8]
 8002bbe:	2b00      	cmp	r3, #0
 8002bc0:	d10e      	bne.n	8002be0 <HAL_I2C_Init+0x1bc>
 8002bc2:	68fb      	ldr	r3, [r7, #12]
 8002bc4:	1e58      	subs	r0, r3, #1
 8002bc6:	687b      	ldr	r3, [r7, #4]
 8002bc8:	6859      	ldr	r1, [r3, #4]
 8002bca:	460b      	mov	r3, r1
 8002bcc:	005b      	lsls	r3, r3, #1
 8002bce:	440b      	add	r3, r1
 8002bd0:	fbb0 f3f3 	udiv	r3, r0, r3
 8002bd4:	3301      	adds	r3, #1
 8002bd6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002bda:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8002bde:	e00f      	b.n	8002c00 <HAL_I2C_Init+0x1dc>
 8002be0:	68fb      	ldr	r3, [r7, #12]
 8002be2:	1e58      	subs	r0, r3, #1
 8002be4:	687b      	ldr	r3, [r7, #4]
 8002be6:	6859      	ldr	r1, [r3, #4]
 8002be8:	460b      	mov	r3, r1
 8002bea:	009b      	lsls	r3, r3, #2
 8002bec:	440b      	add	r3, r1
 8002bee:	0099      	lsls	r1, r3, #2
 8002bf0:	440b      	add	r3, r1
 8002bf2:	fbb0 f3f3 	udiv	r3, r0, r3
 8002bf6:	3301      	adds	r3, #1
 8002bf8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002bfc:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8002c00:	6879      	ldr	r1, [r7, #4]
 8002c02:	6809      	ldr	r1, [r1, #0]
 8002c04:	4313      	orrs	r3, r2
 8002c06:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8002c08:	687b      	ldr	r3, [r7, #4]
 8002c0a:	681b      	ldr	r3, [r3, #0]
 8002c0c:	681b      	ldr	r3, [r3, #0]
 8002c0e:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 8002c12:	687b      	ldr	r3, [r7, #4]
 8002c14:	69da      	ldr	r2, [r3, #28]
 8002c16:	687b      	ldr	r3, [r7, #4]
 8002c18:	6a1b      	ldr	r3, [r3, #32]
 8002c1a:	431a      	orrs	r2, r3
 8002c1c:	687b      	ldr	r3, [r7, #4]
 8002c1e:	681b      	ldr	r3, [r3, #0]
 8002c20:	430a      	orrs	r2, r1
 8002c22:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8002c24:	687b      	ldr	r3, [r7, #4]
 8002c26:	681b      	ldr	r3, [r3, #0]
 8002c28:	689b      	ldr	r3, [r3, #8]
 8002c2a:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 8002c2e:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 8002c32:	687a      	ldr	r2, [r7, #4]
 8002c34:	6911      	ldr	r1, [r2, #16]
 8002c36:	687a      	ldr	r2, [r7, #4]
 8002c38:	68d2      	ldr	r2, [r2, #12]
 8002c3a:	4311      	orrs	r1, r2
 8002c3c:	687a      	ldr	r2, [r7, #4]
 8002c3e:	6812      	ldr	r2, [r2, #0]
 8002c40:	430b      	orrs	r3, r1
 8002c42:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8002c44:	687b      	ldr	r3, [r7, #4]
 8002c46:	681b      	ldr	r3, [r3, #0]
 8002c48:	68db      	ldr	r3, [r3, #12]
 8002c4a:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 8002c4e:	687b      	ldr	r3, [r7, #4]
 8002c50:	695a      	ldr	r2, [r3, #20]
 8002c52:	687b      	ldr	r3, [r7, #4]
 8002c54:	699b      	ldr	r3, [r3, #24]
 8002c56:	431a      	orrs	r2, r3
 8002c58:	687b      	ldr	r3, [r7, #4]
 8002c5a:	681b      	ldr	r3, [r3, #0]
 8002c5c:	430a      	orrs	r2, r1
 8002c5e:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002c60:	687b      	ldr	r3, [r7, #4]
 8002c62:	681b      	ldr	r3, [r3, #0]
 8002c64:	681a      	ldr	r2, [r3, #0]
 8002c66:	687b      	ldr	r3, [r7, #4]
 8002c68:	681b      	ldr	r3, [r3, #0]
 8002c6a:	f042 0201 	orr.w	r2, r2, #1
 8002c6e:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002c70:	687b      	ldr	r3, [r7, #4]
 8002c72:	2200      	movs	r2, #0
 8002c74:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8002c76:	687b      	ldr	r3, [r7, #4]
 8002c78:	2220      	movs	r2, #32
 8002c7a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8002c7e:	687b      	ldr	r3, [r7, #4]
 8002c80:	2200      	movs	r2, #0
 8002c82:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002c84:	687b      	ldr	r3, [r7, #4]
 8002c86:	2200      	movs	r2, #0
 8002c88:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 8002c8c:	2300      	movs	r3, #0
}
 8002c8e:	4618      	mov	r0, r3
 8002c90:	3710      	adds	r7, #16
 8002c92:	46bd      	mov	sp, r7
 8002c94:	bd80      	pop	{r7, pc}
 8002c96:	bf00      	nop
 8002c98:	000186a0 	.word	0x000186a0
 8002c9c:	001e847f 	.word	0x001e847f
 8002ca0:	003d08ff 	.word	0x003d08ff
 8002ca4:	431bde83 	.word	0x431bde83
 8002ca8:	10624dd3 	.word	0x10624dd3

08002cac <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002cac:	b580      	push	{r7, lr}
 8002cae:	b088      	sub	sp, #32
 8002cb0:	af02      	add	r7, sp, #8
 8002cb2:	60f8      	str	r0, [r7, #12]
 8002cb4:	607a      	str	r2, [r7, #4]
 8002cb6:	461a      	mov	r2, r3
 8002cb8:	460b      	mov	r3, r1
 8002cba:	817b      	strh	r3, [r7, #10]
 8002cbc:	4613      	mov	r3, r2
 8002cbe:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8002cc0:	f7fe ffc2 	bl	8001c48 <HAL_GetTick>
 8002cc4:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002cc6:	68fb      	ldr	r3, [r7, #12]
 8002cc8:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002ccc:	b2db      	uxtb	r3, r3
 8002cce:	2b20      	cmp	r3, #32
 8002cd0:	f040 80e0 	bne.w	8002e94 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002cd4:	697b      	ldr	r3, [r7, #20]
 8002cd6:	9300      	str	r3, [sp, #0]
 8002cd8:	2319      	movs	r3, #25
 8002cda:	2201      	movs	r2, #1
 8002cdc:	4970      	ldr	r1, [pc, #448]	@ (8002ea0 <HAL_I2C_Master_Transmit+0x1f4>)
 8002cde:	68f8      	ldr	r0, [r7, #12]
 8002ce0:	f000 f964 	bl	8002fac <I2C_WaitOnFlagUntilTimeout>
 8002ce4:	4603      	mov	r3, r0
 8002ce6:	2b00      	cmp	r3, #0
 8002ce8:	d001      	beq.n	8002cee <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 8002cea:	2302      	movs	r3, #2
 8002cec:	e0d3      	b.n	8002e96 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002cee:	68fb      	ldr	r3, [r7, #12]
 8002cf0:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8002cf4:	2b01      	cmp	r3, #1
 8002cf6:	d101      	bne.n	8002cfc <HAL_I2C_Master_Transmit+0x50>
 8002cf8:	2302      	movs	r3, #2
 8002cfa:	e0cc      	b.n	8002e96 <HAL_I2C_Master_Transmit+0x1ea>
 8002cfc:	68fb      	ldr	r3, [r7, #12]
 8002cfe:	2201      	movs	r2, #1
 8002d00:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8002d04:	68fb      	ldr	r3, [r7, #12]
 8002d06:	681b      	ldr	r3, [r3, #0]
 8002d08:	681b      	ldr	r3, [r3, #0]
 8002d0a:	f003 0301 	and.w	r3, r3, #1
 8002d0e:	2b01      	cmp	r3, #1
 8002d10:	d007      	beq.n	8002d22 <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8002d12:	68fb      	ldr	r3, [r7, #12]
 8002d14:	681b      	ldr	r3, [r3, #0]
 8002d16:	681a      	ldr	r2, [r3, #0]
 8002d18:	68fb      	ldr	r3, [r7, #12]
 8002d1a:	681b      	ldr	r3, [r3, #0]
 8002d1c:	f042 0201 	orr.w	r2, r2, #1
 8002d20:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002d22:	68fb      	ldr	r3, [r7, #12]
 8002d24:	681b      	ldr	r3, [r3, #0]
 8002d26:	681a      	ldr	r2, [r3, #0]
 8002d28:	68fb      	ldr	r3, [r7, #12]
 8002d2a:	681b      	ldr	r3, [r3, #0]
 8002d2c:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8002d30:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8002d32:	68fb      	ldr	r3, [r7, #12]
 8002d34:	2221      	movs	r2, #33	@ 0x21
 8002d36:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8002d3a:	68fb      	ldr	r3, [r7, #12]
 8002d3c:	2210      	movs	r2, #16
 8002d3e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8002d42:	68fb      	ldr	r3, [r7, #12]
 8002d44:	2200      	movs	r2, #0
 8002d46:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8002d48:	68fb      	ldr	r3, [r7, #12]
 8002d4a:	687a      	ldr	r2, [r7, #4]
 8002d4c:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8002d4e:	68fb      	ldr	r3, [r7, #12]
 8002d50:	893a      	ldrh	r2, [r7, #8]
 8002d52:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8002d54:	68fb      	ldr	r3, [r7, #12]
 8002d56:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002d58:	b29a      	uxth	r2, r3
 8002d5a:	68fb      	ldr	r3, [r7, #12]
 8002d5c:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002d5e:	68fb      	ldr	r3, [r7, #12]
 8002d60:	4a50      	ldr	r2, [pc, #320]	@ (8002ea4 <HAL_I2C_Master_Transmit+0x1f8>)
 8002d62:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8002d64:	8979      	ldrh	r1, [r7, #10]
 8002d66:	697b      	ldr	r3, [r7, #20]
 8002d68:	6a3a      	ldr	r2, [r7, #32]
 8002d6a:	68f8      	ldr	r0, [r7, #12]
 8002d6c:	f000 f89c 	bl	8002ea8 <I2C_MasterRequestWrite>
 8002d70:	4603      	mov	r3, r0
 8002d72:	2b00      	cmp	r3, #0
 8002d74:	d001      	beq.n	8002d7a <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 8002d76:	2301      	movs	r3, #1
 8002d78:	e08d      	b.n	8002e96 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002d7a:	2300      	movs	r3, #0
 8002d7c:	613b      	str	r3, [r7, #16]
 8002d7e:	68fb      	ldr	r3, [r7, #12]
 8002d80:	681b      	ldr	r3, [r3, #0]
 8002d82:	695b      	ldr	r3, [r3, #20]
 8002d84:	613b      	str	r3, [r7, #16]
 8002d86:	68fb      	ldr	r3, [r7, #12]
 8002d88:	681b      	ldr	r3, [r3, #0]
 8002d8a:	699b      	ldr	r3, [r3, #24]
 8002d8c:	613b      	str	r3, [r7, #16]
 8002d8e:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8002d90:	e066      	b.n	8002e60 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002d92:	697a      	ldr	r2, [r7, #20]
 8002d94:	6a39      	ldr	r1, [r7, #32]
 8002d96:	68f8      	ldr	r0, [r7, #12]
 8002d98:	f000 fa22 	bl	80031e0 <I2C_WaitOnTXEFlagUntilTimeout>
 8002d9c:	4603      	mov	r3, r0
 8002d9e:	2b00      	cmp	r3, #0
 8002da0:	d00d      	beq.n	8002dbe <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002da2:	68fb      	ldr	r3, [r7, #12]
 8002da4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002da6:	2b04      	cmp	r3, #4
 8002da8:	d107      	bne.n	8002dba <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002daa:	68fb      	ldr	r3, [r7, #12]
 8002dac:	681b      	ldr	r3, [r3, #0]
 8002dae:	681a      	ldr	r2, [r3, #0]
 8002db0:	68fb      	ldr	r3, [r7, #12]
 8002db2:	681b      	ldr	r3, [r3, #0]
 8002db4:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002db8:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8002dba:	2301      	movs	r3, #1
 8002dbc:	e06b      	b.n	8002e96 <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002dbe:	68fb      	ldr	r3, [r7, #12]
 8002dc0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002dc2:	781a      	ldrb	r2, [r3, #0]
 8002dc4:	68fb      	ldr	r3, [r7, #12]
 8002dc6:	681b      	ldr	r3, [r3, #0]
 8002dc8:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002dca:	68fb      	ldr	r3, [r7, #12]
 8002dcc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002dce:	1c5a      	adds	r2, r3, #1
 8002dd0:	68fb      	ldr	r3, [r7, #12]
 8002dd2:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 8002dd4:	68fb      	ldr	r3, [r7, #12]
 8002dd6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002dd8:	b29b      	uxth	r3, r3
 8002dda:	3b01      	subs	r3, #1
 8002ddc:	b29a      	uxth	r2, r3
 8002dde:	68fb      	ldr	r3, [r7, #12]
 8002de0:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 8002de2:	68fb      	ldr	r3, [r7, #12]
 8002de4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002de6:	3b01      	subs	r3, #1
 8002de8:	b29a      	uxth	r2, r3
 8002dea:	68fb      	ldr	r3, [r7, #12]
 8002dec:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8002dee:	68fb      	ldr	r3, [r7, #12]
 8002df0:	681b      	ldr	r3, [r3, #0]
 8002df2:	695b      	ldr	r3, [r3, #20]
 8002df4:	f003 0304 	and.w	r3, r3, #4
 8002df8:	2b04      	cmp	r3, #4
 8002dfa:	d11b      	bne.n	8002e34 <HAL_I2C_Master_Transmit+0x188>
 8002dfc:	68fb      	ldr	r3, [r7, #12]
 8002dfe:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002e00:	2b00      	cmp	r3, #0
 8002e02:	d017      	beq.n	8002e34 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002e04:	68fb      	ldr	r3, [r7, #12]
 8002e06:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002e08:	781a      	ldrb	r2, [r3, #0]
 8002e0a:	68fb      	ldr	r3, [r7, #12]
 8002e0c:	681b      	ldr	r3, [r3, #0]
 8002e0e:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8002e10:	68fb      	ldr	r3, [r7, #12]
 8002e12:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002e14:	1c5a      	adds	r2, r3, #1
 8002e16:	68fb      	ldr	r3, [r7, #12]
 8002e18:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferCount--;
 8002e1a:	68fb      	ldr	r3, [r7, #12]
 8002e1c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002e1e:	b29b      	uxth	r3, r3
 8002e20:	3b01      	subs	r3, #1
 8002e22:	b29a      	uxth	r2, r3
 8002e24:	68fb      	ldr	r3, [r7, #12]
 8002e26:	855a      	strh	r2, [r3, #42]	@ 0x2a
        hi2c->XferSize--;
 8002e28:	68fb      	ldr	r3, [r7, #12]
 8002e2a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002e2c:	3b01      	subs	r3, #1
 8002e2e:	b29a      	uxth	r2, r3
 8002e30:	68fb      	ldr	r3, [r7, #12]
 8002e32:	851a      	strh	r2, [r3, #40]	@ 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002e34:	697a      	ldr	r2, [r7, #20]
 8002e36:	6a39      	ldr	r1, [r7, #32]
 8002e38:	68f8      	ldr	r0, [r7, #12]
 8002e3a:	f000 fa19 	bl	8003270 <I2C_WaitOnBTFFlagUntilTimeout>
 8002e3e:	4603      	mov	r3, r0
 8002e40:	2b00      	cmp	r3, #0
 8002e42:	d00d      	beq.n	8002e60 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002e44:	68fb      	ldr	r3, [r7, #12]
 8002e46:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002e48:	2b04      	cmp	r3, #4
 8002e4a:	d107      	bne.n	8002e5c <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002e4c:	68fb      	ldr	r3, [r7, #12]
 8002e4e:	681b      	ldr	r3, [r3, #0]
 8002e50:	681a      	ldr	r2, [r3, #0]
 8002e52:	68fb      	ldr	r3, [r7, #12]
 8002e54:	681b      	ldr	r3, [r3, #0]
 8002e56:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002e5a:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8002e5c:	2301      	movs	r3, #1
 8002e5e:	e01a      	b.n	8002e96 <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8002e60:	68fb      	ldr	r3, [r7, #12]
 8002e62:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002e64:	2b00      	cmp	r3, #0
 8002e66:	d194      	bne.n	8002d92 <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002e68:	68fb      	ldr	r3, [r7, #12]
 8002e6a:	681b      	ldr	r3, [r3, #0]
 8002e6c:	681a      	ldr	r2, [r3, #0]
 8002e6e:	68fb      	ldr	r3, [r7, #12]
 8002e70:	681b      	ldr	r3, [r3, #0]
 8002e72:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002e76:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002e78:	68fb      	ldr	r3, [r7, #12]
 8002e7a:	2220      	movs	r2, #32
 8002e7c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002e80:	68fb      	ldr	r3, [r7, #12]
 8002e82:	2200      	movs	r2, #0
 8002e84:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002e88:	68fb      	ldr	r3, [r7, #12]
 8002e8a:	2200      	movs	r2, #0
 8002e8c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 8002e90:	2300      	movs	r3, #0
 8002e92:	e000      	b.n	8002e96 <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8002e94:	2302      	movs	r3, #2
  }
}
 8002e96:	4618      	mov	r0, r3
 8002e98:	3718      	adds	r7, #24
 8002e9a:	46bd      	mov	sp, r7
 8002e9c:	bd80      	pop	{r7, pc}
 8002e9e:	bf00      	nop
 8002ea0:	00100002 	.word	0x00100002
 8002ea4:	ffff0000 	.word	0xffff0000

08002ea8 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8002ea8:	b580      	push	{r7, lr}
 8002eaa:	b088      	sub	sp, #32
 8002eac:	af02      	add	r7, sp, #8
 8002eae:	60f8      	str	r0, [r7, #12]
 8002eb0:	607a      	str	r2, [r7, #4]
 8002eb2:	603b      	str	r3, [r7, #0]
 8002eb4:	460b      	mov	r3, r1
 8002eb6:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8002eb8:	68fb      	ldr	r3, [r7, #12]
 8002eba:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002ebc:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8002ebe:	697b      	ldr	r3, [r7, #20]
 8002ec0:	2b08      	cmp	r3, #8
 8002ec2:	d006      	beq.n	8002ed2 <I2C_MasterRequestWrite+0x2a>
 8002ec4:	697b      	ldr	r3, [r7, #20]
 8002ec6:	2b01      	cmp	r3, #1
 8002ec8:	d003      	beq.n	8002ed2 <I2C_MasterRequestWrite+0x2a>
 8002eca:	697b      	ldr	r3, [r7, #20]
 8002ecc:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8002ed0:	d108      	bne.n	8002ee4 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002ed2:	68fb      	ldr	r3, [r7, #12]
 8002ed4:	681b      	ldr	r3, [r3, #0]
 8002ed6:	681a      	ldr	r2, [r3, #0]
 8002ed8:	68fb      	ldr	r3, [r7, #12]
 8002eda:	681b      	ldr	r3, [r3, #0]
 8002edc:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8002ee0:	601a      	str	r2, [r3, #0]
 8002ee2:	e00b      	b.n	8002efc <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8002ee4:	68fb      	ldr	r3, [r7, #12]
 8002ee6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002ee8:	2b12      	cmp	r3, #18
 8002eea:	d107      	bne.n	8002efc <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002eec:	68fb      	ldr	r3, [r7, #12]
 8002eee:	681b      	ldr	r3, [r3, #0]
 8002ef0:	681a      	ldr	r2, [r3, #0]
 8002ef2:	68fb      	ldr	r3, [r7, #12]
 8002ef4:	681b      	ldr	r3, [r3, #0]
 8002ef6:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8002efa:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8002efc:	683b      	ldr	r3, [r7, #0]
 8002efe:	9300      	str	r3, [sp, #0]
 8002f00:	687b      	ldr	r3, [r7, #4]
 8002f02:	2200      	movs	r2, #0
 8002f04:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8002f08:	68f8      	ldr	r0, [r7, #12]
 8002f0a:	f000 f84f 	bl	8002fac <I2C_WaitOnFlagUntilTimeout>
 8002f0e:	4603      	mov	r3, r0
 8002f10:	2b00      	cmp	r3, #0
 8002f12:	d00d      	beq.n	8002f30 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8002f14:	68fb      	ldr	r3, [r7, #12]
 8002f16:	681b      	ldr	r3, [r3, #0]
 8002f18:	681b      	ldr	r3, [r3, #0]
 8002f1a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002f1e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8002f22:	d103      	bne.n	8002f2c <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8002f24:	68fb      	ldr	r3, [r7, #12]
 8002f26:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8002f2a:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8002f2c:	2303      	movs	r3, #3
 8002f2e:	e035      	b.n	8002f9c <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8002f30:	68fb      	ldr	r3, [r7, #12]
 8002f32:	691b      	ldr	r3, [r3, #16]
 8002f34:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8002f38:	d108      	bne.n	8002f4c <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8002f3a:	897b      	ldrh	r3, [r7, #10]
 8002f3c:	b2db      	uxtb	r3, r3
 8002f3e:	461a      	mov	r2, r3
 8002f40:	68fb      	ldr	r3, [r7, #12]
 8002f42:	681b      	ldr	r3, [r3, #0]
 8002f44:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8002f48:	611a      	str	r2, [r3, #16]
 8002f4a:	e01b      	b.n	8002f84 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8002f4c:	897b      	ldrh	r3, [r7, #10]
 8002f4e:	11db      	asrs	r3, r3, #7
 8002f50:	b2db      	uxtb	r3, r3
 8002f52:	f003 0306 	and.w	r3, r3, #6
 8002f56:	b2db      	uxtb	r3, r3
 8002f58:	f063 030f 	orn	r3, r3, #15
 8002f5c:	b2da      	uxtb	r2, r3
 8002f5e:	68fb      	ldr	r3, [r7, #12]
 8002f60:	681b      	ldr	r3, [r3, #0]
 8002f62:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8002f64:	683b      	ldr	r3, [r7, #0]
 8002f66:	687a      	ldr	r2, [r7, #4]
 8002f68:	490e      	ldr	r1, [pc, #56]	@ (8002fa4 <I2C_MasterRequestWrite+0xfc>)
 8002f6a:	68f8      	ldr	r0, [r7, #12]
 8002f6c:	f000 f898 	bl	80030a0 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002f70:	4603      	mov	r3, r0
 8002f72:	2b00      	cmp	r3, #0
 8002f74:	d001      	beq.n	8002f7a <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 8002f76:	2301      	movs	r3, #1
 8002f78:	e010      	b.n	8002f9c <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8002f7a:	897b      	ldrh	r3, [r7, #10]
 8002f7c:	b2da      	uxtb	r2, r3
 8002f7e:	68fb      	ldr	r3, [r7, #12]
 8002f80:	681b      	ldr	r3, [r3, #0]
 8002f82:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8002f84:	683b      	ldr	r3, [r7, #0]
 8002f86:	687a      	ldr	r2, [r7, #4]
 8002f88:	4907      	ldr	r1, [pc, #28]	@ (8002fa8 <I2C_MasterRequestWrite+0x100>)
 8002f8a:	68f8      	ldr	r0, [r7, #12]
 8002f8c:	f000 f888 	bl	80030a0 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002f90:	4603      	mov	r3, r0
 8002f92:	2b00      	cmp	r3, #0
 8002f94:	d001      	beq.n	8002f9a <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 8002f96:	2301      	movs	r3, #1
 8002f98:	e000      	b.n	8002f9c <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 8002f9a:	2300      	movs	r3, #0
}
 8002f9c:	4618      	mov	r0, r3
 8002f9e:	3718      	adds	r7, #24
 8002fa0:	46bd      	mov	sp, r7
 8002fa2:	bd80      	pop	{r7, pc}
 8002fa4:	00010008 	.word	0x00010008
 8002fa8:	00010002 	.word	0x00010002

08002fac <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8002fac:	b580      	push	{r7, lr}
 8002fae:	b084      	sub	sp, #16
 8002fb0:	af00      	add	r7, sp, #0
 8002fb2:	60f8      	str	r0, [r7, #12]
 8002fb4:	60b9      	str	r1, [r7, #8]
 8002fb6:	603b      	str	r3, [r7, #0]
 8002fb8:	4613      	mov	r3, r2
 8002fba:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002fbc:	e048      	b.n	8003050 <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002fbe:	683b      	ldr	r3, [r7, #0]
 8002fc0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002fc4:	d044      	beq.n	8003050 <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002fc6:	f7fe fe3f 	bl	8001c48 <HAL_GetTick>
 8002fca:	4602      	mov	r2, r0
 8002fcc:	69bb      	ldr	r3, [r7, #24]
 8002fce:	1ad3      	subs	r3, r2, r3
 8002fd0:	683a      	ldr	r2, [r7, #0]
 8002fd2:	429a      	cmp	r2, r3
 8002fd4:	d302      	bcc.n	8002fdc <I2C_WaitOnFlagUntilTimeout+0x30>
 8002fd6:	683b      	ldr	r3, [r7, #0]
 8002fd8:	2b00      	cmp	r3, #0
 8002fda:	d139      	bne.n	8003050 <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8002fdc:	68bb      	ldr	r3, [r7, #8]
 8002fde:	0c1b      	lsrs	r3, r3, #16
 8002fe0:	b2db      	uxtb	r3, r3
 8002fe2:	2b01      	cmp	r3, #1
 8002fe4:	d10d      	bne.n	8003002 <I2C_WaitOnFlagUntilTimeout+0x56>
 8002fe6:	68fb      	ldr	r3, [r7, #12]
 8002fe8:	681b      	ldr	r3, [r3, #0]
 8002fea:	695b      	ldr	r3, [r3, #20]
 8002fec:	43da      	mvns	r2, r3
 8002fee:	68bb      	ldr	r3, [r7, #8]
 8002ff0:	4013      	ands	r3, r2
 8002ff2:	b29b      	uxth	r3, r3
 8002ff4:	2b00      	cmp	r3, #0
 8002ff6:	bf0c      	ite	eq
 8002ff8:	2301      	moveq	r3, #1
 8002ffa:	2300      	movne	r3, #0
 8002ffc:	b2db      	uxtb	r3, r3
 8002ffe:	461a      	mov	r2, r3
 8003000:	e00c      	b.n	800301c <I2C_WaitOnFlagUntilTimeout+0x70>
 8003002:	68fb      	ldr	r3, [r7, #12]
 8003004:	681b      	ldr	r3, [r3, #0]
 8003006:	699b      	ldr	r3, [r3, #24]
 8003008:	43da      	mvns	r2, r3
 800300a:	68bb      	ldr	r3, [r7, #8]
 800300c:	4013      	ands	r3, r2
 800300e:	b29b      	uxth	r3, r3
 8003010:	2b00      	cmp	r3, #0
 8003012:	bf0c      	ite	eq
 8003014:	2301      	moveq	r3, #1
 8003016:	2300      	movne	r3, #0
 8003018:	b2db      	uxtb	r3, r3
 800301a:	461a      	mov	r2, r3
 800301c:	79fb      	ldrb	r3, [r7, #7]
 800301e:	429a      	cmp	r2, r3
 8003020:	d116      	bne.n	8003050 <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 8003022:	68fb      	ldr	r3, [r7, #12]
 8003024:	2200      	movs	r2, #0
 8003026:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 8003028:	68fb      	ldr	r3, [r7, #12]
 800302a:	2220      	movs	r2, #32
 800302c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 8003030:	68fb      	ldr	r3, [r7, #12]
 8003032:	2200      	movs	r2, #0
 8003034:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8003038:	68fb      	ldr	r3, [r7, #12]
 800303a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800303c:	f043 0220 	orr.w	r2, r3, #32
 8003040:	68fb      	ldr	r3, [r7, #12]
 8003042:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003044:	68fb      	ldr	r3, [r7, #12]
 8003046:	2200      	movs	r2, #0
 8003048:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 800304c:	2301      	movs	r3, #1
 800304e:	e023      	b.n	8003098 <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003050:	68bb      	ldr	r3, [r7, #8]
 8003052:	0c1b      	lsrs	r3, r3, #16
 8003054:	b2db      	uxtb	r3, r3
 8003056:	2b01      	cmp	r3, #1
 8003058:	d10d      	bne.n	8003076 <I2C_WaitOnFlagUntilTimeout+0xca>
 800305a:	68fb      	ldr	r3, [r7, #12]
 800305c:	681b      	ldr	r3, [r3, #0]
 800305e:	695b      	ldr	r3, [r3, #20]
 8003060:	43da      	mvns	r2, r3
 8003062:	68bb      	ldr	r3, [r7, #8]
 8003064:	4013      	ands	r3, r2
 8003066:	b29b      	uxth	r3, r3
 8003068:	2b00      	cmp	r3, #0
 800306a:	bf0c      	ite	eq
 800306c:	2301      	moveq	r3, #1
 800306e:	2300      	movne	r3, #0
 8003070:	b2db      	uxtb	r3, r3
 8003072:	461a      	mov	r2, r3
 8003074:	e00c      	b.n	8003090 <I2C_WaitOnFlagUntilTimeout+0xe4>
 8003076:	68fb      	ldr	r3, [r7, #12]
 8003078:	681b      	ldr	r3, [r3, #0]
 800307a:	699b      	ldr	r3, [r3, #24]
 800307c:	43da      	mvns	r2, r3
 800307e:	68bb      	ldr	r3, [r7, #8]
 8003080:	4013      	ands	r3, r2
 8003082:	b29b      	uxth	r3, r3
 8003084:	2b00      	cmp	r3, #0
 8003086:	bf0c      	ite	eq
 8003088:	2301      	moveq	r3, #1
 800308a:	2300      	movne	r3, #0
 800308c:	b2db      	uxtb	r3, r3
 800308e:	461a      	mov	r2, r3
 8003090:	79fb      	ldrb	r3, [r7, #7]
 8003092:	429a      	cmp	r2, r3
 8003094:	d093      	beq.n	8002fbe <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8003096:	2300      	movs	r3, #0
}
 8003098:	4618      	mov	r0, r3
 800309a:	3710      	adds	r7, #16
 800309c:	46bd      	mov	sp, r7
 800309e:	bd80      	pop	{r7, pc}

080030a0 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 80030a0:	b580      	push	{r7, lr}
 80030a2:	b084      	sub	sp, #16
 80030a4:	af00      	add	r7, sp, #0
 80030a6:	60f8      	str	r0, [r7, #12]
 80030a8:	60b9      	str	r1, [r7, #8]
 80030aa:	607a      	str	r2, [r7, #4]
 80030ac:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80030ae:	e071      	b.n	8003194 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80030b0:	68fb      	ldr	r3, [r7, #12]
 80030b2:	681b      	ldr	r3, [r3, #0]
 80030b4:	695b      	ldr	r3, [r3, #20]
 80030b6:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80030ba:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80030be:	d123      	bne.n	8003108 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80030c0:	68fb      	ldr	r3, [r7, #12]
 80030c2:	681b      	ldr	r3, [r3, #0]
 80030c4:	681a      	ldr	r2, [r3, #0]
 80030c6:	68fb      	ldr	r3, [r7, #12]
 80030c8:	681b      	ldr	r3, [r3, #0]
 80030ca:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80030ce:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80030d0:	68fb      	ldr	r3, [r7, #12]
 80030d2:	681b      	ldr	r3, [r3, #0]
 80030d4:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 80030d8:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80030da:	68fb      	ldr	r3, [r7, #12]
 80030dc:	2200      	movs	r2, #0
 80030de:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80030e0:	68fb      	ldr	r3, [r7, #12]
 80030e2:	2220      	movs	r2, #32
 80030e4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80030e8:	68fb      	ldr	r3, [r7, #12]
 80030ea:	2200      	movs	r2, #0
 80030ec:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80030f0:	68fb      	ldr	r3, [r7, #12]
 80030f2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80030f4:	f043 0204 	orr.w	r2, r3, #4
 80030f8:	68fb      	ldr	r3, [r7, #12]
 80030fa:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80030fc:	68fb      	ldr	r3, [r7, #12]
 80030fe:	2200      	movs	r2, #0
 8003100:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 8003104:	2301      	movs	r3, #1
 8003106:	e067      	b.n	80031d8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003108:	687b      	ldr	r3, [r7, #4]
 800310a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800310e:	d041      	beq.n	8003194 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003110:	f7fe fd9a 	bl	8001c48 <HAL_GetTick>
 8003114:	4602      	mov	r2, r0
 8003116:	683b      	ldr	r3, [r7, #0]
 8003118:	1ad3      	subs	r3, r2, r3
 800311a:	687a      	ldr	r2, [r7, #4]
 800311c:	429a      	cmp	r2, r3
 800311e:	d302      	bcc.n	8003126 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8003120:	687b      	ldr	r3, [r7, #4]
 8003122:	2b00      	cmp	r3, #0
 8003124:	d136      	bne.n	8003194 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 8003126:	68bb      	ldr	r3, [r7, #8]
 8003128:	0c1b      	lsrs	r3, r3, #16
 800312a:	b2db      	uxtb	r3, r3
 800312c:	2b01      	cmp	r3, #1
 800312e:	d10c      	bne.n	800314a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 8003130:	68fb      	ldr	r3, [r7, #12]
 8003132:	681b      	ldr	r3, [r3, #0]
 8003134:	695b      	ldr	r3, [r3, #20]
 8003136:	43da      	mvns	r2, r3
 8003138:	68bb      	ldr	r3, [r7, #8]
 800313a:	4013      	ands	r3, r2
 800313c:	b29b      	uxth	r3, r3
 800313e:	2b00      	cmp	r3, #0
 8003140:	bf14      	ite	ne
 8003142:	2301      	movne	r3, #1
 8003144:	2300      	moveq	r3, #0
 8003146:	b2db      	uxtb	r3, r3
 8003148:	e00b      	b.n	8003162 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 800314a:	68fb      	ldr	r3, [r7, #12]
 800314c:	681b      	ldr	r3, [r3, #0]
 800314e:	699b      	ldr	r3, [r3, #24]
 8003150:	43da      	mvns	r2, r3
 8003152:	68bb      	ldr	r3, [r7, #8]
 8003154:	4013      	ands	r3, r2
 8003156:	b29b      	uxth	r3, r3
 8003158:	2b00      	cmp	r3, #0
 800315a:	bf14      	ite	ne
 800315c:	2301      	movne	r3, #1
 800315e:	2300      	moveq	r3, #0
 8003160:	b2db      	uxtb	r3, r3
 8003162:	2b00      	cmp	r3, #0
 8003164:	d016      	beq.n	8003194 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8003166:	68fb      	ldr	r3, [r7, #12]
 8003168:	2200      	movs	r2, #0
 800316a:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 800316c:	68fb      	ldr	r3, [r7, #12]
 800316e:	2220      	movs	r2, #32
 8003170:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003174:	68fb      	ldr	r3, [r7, #12]
 8003176:	2200      	movs	r2, #0
 8003178:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800317c:	68fb      	ldr	r3, [r7, #12]
 800317e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003180:	f043 0220 	orr.w	r2, r3, #32
 8003184:	68fb      	ldr	r3, [r7, #12]
 8003186:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003188:	68fb      	ldr	r3, [r7, #12]
 800318a:	2200      	movs	r2, #0
 800318c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8003190:	2301      	movs	r3, #1
 8003192:	e021      	b.n	80031d8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8003194:	68bb      	ldr	r3, [r7, #8]
 8003196:	0c1b      	lsrs	r3, r3, #16
 8003198:	b2db      	uxtb	r3, r3
 800319a:	2b01      	cmp	r3, #1
 800319c:	d10c      	bne.n	80031b8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 800319e:	68fb      	ldr	r3, [r7, #12]
 80031a0:	681b      	ldr	r3, [r3, #0]
 80031a2:	695b      	ldr	r3, [r3, #20]
 80031a4:	43da      	mvns	r2, r3
 80031a6:	68bb      	ldr	r3, [r7, #8]
 80031a8:	4013      	ands	r3, r2
 80031aa:	b29b      	uxth	r3, r3
 80031ac:	2b00      	cmp	r3, #0
 80031ae:	bf14      	ite	ne
 80031b0:	2301      	movne	r3, #1
 80031b2:	2300      	moveq	r3, #0
 80031b4:	b2db      	uxtb	r3, r3
 80031b6:	e00b      	b.n	80031d0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 80031b8:	68fb      	ldr	r3, [r7, #12]
 80031ba:	681b      	ldr	r3, [r3, #0]
 80031bc:	699b      	ldr	r3, [r3, #24]
 80031be:	43da      	mvns	r2, r3
 80031c0:	68bb      	ldr	r3, [r7, #8]
 80031c2:	4013      	ands	r3, r2
 80031c4:	b29b      	uxth	r3, r3
 80031c6:	2b00      	cmp	r3, #0
 80031c8:	bf14      	ite	ne
 80031ca:	2301      	movne	r3, #1
 80031cc:	2300      	moveq	r3, #0
 80031ce:	b2db      	uxtb	r3, r3
 80031d0:	2b00      	cmp	r3, #0
 80031d2:	f47f af6d 	bne.w	80030b0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 80031d6:	2300      	movs	r3, #0
}
 80031d8:	4618      	mov	r0, r3
 80031da:	3710      	adds	r7, #16
 80031dc:	46bd      	mov	sp, r7
 80031de:	bd80      	pop	{r7, pc}

080031e0 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80031e0:	b580      	push	{r7, lr}
 80031e2:	b084      	sub	sp, #16
 80031e4:	af00      	add	r7, sp, #0
 80031e6:	60f8      	str	r0, [r7, #12]
 80031e8:	60b9      	str	r1, [r7, #8]
 80031ea:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80031ec:	e034      	b.n	8003258 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80031ee:	68f8      	ldr	r0, [r7, #12]
 80031f0:	f000 f886 	bl	8003300 <I2C_IsAcknowledgeFailed>
 80031f4:	4603      	mov	r3, r0
 80031f6:	2b00      	cmp	r3, #0
 80031f8:	d001      	beq.n	80031fe <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80031fa:	2301      	movs	r3, #1
 80031fc:	e034      	b.n	8003268 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80031fe:	68bb      	ldr	r3, [r7, #8]
 8003200:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003204:	d028      	beq.n	8003258 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003206:	f7fe fd1f 	bl	8001c48 <HAL_GetTick>
 800320a:	4602      	mov	r2, r0
 800320c:	687b      	ldr	r3, [r7, #4]
 800320e:	1ad3      	subs	r3, r2, r3
 8003210:	68ba      	ldr	r2, [r7, #8]
 8003212:	429a      	cmp	r2, r3
 8003214:	d302      	bcc.n	800321c <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8003216:	68bb      	ldr	r3, [r7, #8]
 8003218:	2b00      	cmp	r3, #0
 800321a:	d11d      	bne.n	8003258 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 800321c:	68fb      	ldr	r3, [r7, #12]
 800321e:	681b      	ldr	r3, [r3, #0]
 8003220:	695b      	ldr	r3, [r3, #20]
 8003222:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003226:	2b80      	cmp	r3, #128	@ 0x80
 8003228:	d016      	beq.n	8003258 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 800322a:	68fb      	ldr	r3, [r7, #12]
 800322c:	2200      	movs	r2, #0
 800322e:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8003230:	68fb      	ldr	r3, [r7, #12]
 8003232:	2220      	movs	r2, #32
 8003234:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003238:	68fb      	ldr	r3, [r7, #12]
 800323a:	2200      	movs	r2, #0
 800323c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003240:	68fb      	ldr	r3, [r7, #12]
 8003242:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003244:	f043 0220 	orr.w	r2, r3, #32
 8003248:	68fb      	ldr	r3, [r7, #12]
 800324a:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800324c:	68fb      	ldr	r3, [r7, #12]
 800324e:	2200      	movs	r2, #0
 8003250:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8003254:	2301      	movs	r3, #1
 8003256:	e007      	b.n	8003268 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003258:	68fb      	ldr	r3, [r7, #12]
 800325a:	681b      	ldr	r3, [r3, #0]
 800325c:	695b      	ldr	r3, [r3, #20]
 800325e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003262:	2b80      	cmp	r3, #128	@ 0x80
 8003264:	d1c3      	bne.n	80031ee <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8003266:	2300      	movs	r3, #0
}
 8003268:	4618      	mov	r0, r3
 800326a:	3710      	adds	r7, #16
 800326c:	46bd      	mov	sp, r7
 800326e:	bd80      	pop	{r7, pc}

08003270 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003270:	b580      	push	{r7, lr}
 8003272:	b084      	sub	sp, #16
 8003274:	af00      	add	r7, sp, #0
 8003276:	60f8      	str	r0, [r7, #12]
 8003278:	60b9      	str	r1, [r7, #8]
 800327a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 800327c:	e034      	b.n	80032e8 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800327e:	68f8      	ldr	r0, [r7, #12]
 8003280:	f000 f83e 	bl	8003300 <I2C_IsAcknowledgeFailed>
 8003284:	4603      	mov	r3, r0
 8003286:	2b00      	cmp	r3, #0
 8003288:	d001      	beq.n	800328e <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800328a:	2301      	movs	r3, #1
 800328c:	e034      	b.n	80032f8 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800328e:	68bb      	ldr	r3, [r7, #8]
 8003290:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003294:	d028      	beq.n	80032e8 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003296:	f7fe fcd7 	bl	8001c48 <HAL_GetTick>
 800329a:	4602      	mov	r2, r0
 800329c:	687b      	ldr	r3, [r7, #4]
 800329e:	1ad3      	subs	r3, r2, r3
 80032a0:	68ba      	ldr	r2, [r7, #8]
 80032a2:	429a      	cmp	r2, r3
 80032a4:	d302      	bcc.n	80032ac <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 80032a6:	68bb      	ldr	r3, [r7, #8]
 80032a8:	2b00      	cmp	r3, #0
 80032aa:	d11d      	bne.n	80032e8 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 80032ac:	68fb      	ldr	r3, [r7, #12]
 80032ae:	681b      	ldr	r3, [r3, #0]
 80032b0:	695b      	ldr	r3, [r3, #20]
 80032b2:	f003 0304 	and.w	r3, r3, #4
 80032b6:	2b04      	cmp	r3, #4
 80032b8:	d016      	beq.n	80032e8 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 80032ba:	68fb      	ldr	r3, [r7, #12]
 80032bc:	2200      	movs	r2, #0
 80032be:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 80032c0:	68fb      	ldr	r3, [r7, #12]
 80032c2:	2220      	movs	r2, #32
 80032c4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 80032c8:	68fb      	ldr	r3, [r7, #12]
 80032ca:	2200      	movs	r2, #0
 80032cc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80032d0:	68fb      	ldr	r3, [r7, #12]
 80032d2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80032d4:	f043 0220 	orr.w	r2, r3, #32
 80032d8:	68fb      	ldr	r3, [r7, #12]
 80032da:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80032dc:	68fb      	ldr	r3, [r7, #12]
 80032de:	2200      	movs	r2, #0
 80032e0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 80032e4:	2301      	movs	r3, #1
 80032e6:	e007      	b.n	80032f8 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80032e8:	68fb      	ldr	r3, [r7, #12]
 80032ea:	681b      	ldr	r3, [r3, #0]
 80032ec:	695b      	ldr	r3, [r3, #20]
 80032ee:	f003 0304 	and.w	r3, r3, #4
 80032f2:	2b04      	cmp	r3, #4
 80032f4:	d1c3      	bne.n	800327e <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 80032f6:	2300      	movs	r3, #0
}
 80032f8:	4618      	mov	r0, r3
 80032fa:	3710      	adds	r7, #16
 80032fc:	46bd      	mov	sp, r7
 80032fe:	bd80      	pop	{r7, pc}

08003300 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8003300:	b480      	push	{r7}
 8003302:	b083      	sub	sp, #12
 8003304:	af00      	add	r7, sp, #0
 8003306:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8003308:	687b      	ldr	r3, [r7, #4]
 800330a:	681b      	ldr	r3, [r3, #0]
 800330c:	695b      	ldr	r3, [r3, #20]
 800330e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003312:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003316:	d11b      	bne.n	8003350 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003318:	687b      	ldr	r3, [r7, #4]
 800331a:	681b      	ldr	r3, [r3, #0]
 800331c:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8003320:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8003322:	687b      	ldr	r3, [r7, #4]
 8003324:	2200      	movs	r2, #0
 8003326:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8003328:	687b      	ldr	r3, [r7, #4]
 800332a:	2220      	movs	r2, #32
 800332c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003330:	687b      	ldr	r3, [r7, #4]
 8003332:	2200      	movs	r2, #0
 8003334:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8003338:	687b      	ldr	r3, [r7, #4]
 800333a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800333c:	f043 0204 	orr.w	r2, r3, #4
 8003340:	687b      	ldr	r3, [r7, #4]
 8003342:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003344:	687b      	ldr	r3, [r7, #4]
 8003346:	2200      	movs	r2, #0
 8003348:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 800334c:	2301      	movs	r3, #1
 800334e:	e000      	b.n	8003352 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8003350:	2300      	movs	r3, #0
}
 8003352:	4618      	mov	r0, r3
 8003354:	370c      	adds	r7, #12
 8003356:	46bd      	mov	sp, r7
 8003358:	bc80      	pop	{r7}
 800335a:	4770      	bx	lr

0800335c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800335c:	b580      	push	{r7, lr}
 800335e:	b086      	sub	sp, #24
 8003360:	af00      	add	r7, sp, #0
 8003362:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8003364:	687b      	ldr	r3, [r7, #4]
 8003366:	2b00      	cmp	r3, #0
 8003368:	d101      	bne.n	800336e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800336a:	2301      	movs	r3, #1
 800336c:	e272      	b.n	8003854 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800336e:	687b      	ldr	r3, [r7, #4]
 8003370:	681b      	ldr	r3, [r3, #0]
 8003372:	f003 0301 	and.w	r3, r3, #1
 8003376:	2b00      	cmp	r3, #0
 8003378:	f000 8087 	beq.w	800348a <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 800337c:	4b92      	ldr	r3, [pc, #584]	@ (80035c8 <HAL_RCC_OscConfig+0x26c>)
 800337e:	685b      	ldr	r3, [r3, #4]
 8003380:	f003 030c 	and.w	r3, r3, #12
 8003384:	2b04      	cmp	r3, #4
 8003386:	d00c      	beq.n	80033a2 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8003388:	4b8f      	ldr	r3, [pc, #572]	@ (80035c8 <HAL_RCC_OscConfig+0x26c>)
 800338a:	685b      	ldr	r3, [r3, #4]
 800338c:	f003 030c 	and.w	r3, r3, #12
 8003390:	2b08      	cmp	r3, #8
 8003392:	d112      	bne.n	80033ba <HAL_RCC_OscConfig+0x5e>
 8003394:	4b8c      	ldr	r3, [pc, #560]	@ (80035c8 <HAL_RCC_OscConfig+0x26c>)
 8003396:	685b      	ldr	r3, [r3, #4]
 8003398:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800339c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80033a0:	d10b      	bne.n	80033ba <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80033a2:	4b89      	ldr	r3, [pc, #548]	@ (80035c8 <HAL_RCC_OscConfig+0x26c>)
 80033a4:	681b      	ldr	r3, [r3, #0]
 80033a6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80033aa:	2b00      	cmp	r3, #0
 80033ac:	d06c      	beq.n	8003488 <HAL_RCC_OscConfig+0x12c>
 80033ae:	687b      	ldr	r3, [r7, #4]
 80033b0:	685b      	ldr	r3, [r3, #4]
 80033b2:	2b00      	cmp	r3, #0
 80033b4:	d168      	bne.n	8003488 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 80033b6:	2301      	movs	r3, #1
 80033b8:	e24c      	b.n	8003854 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80033ba:	687b      	ldr	r3, [r7, #4]
 80033bc:	685b      	ldr	r3, [r3, #4]
 80033be:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80033c2:	d106      	bne.n	80033d2 <HAL_RCC_OscConfig+0x76>
 80033c4:	4b80      	ldr	r3, [pc, #512]	@ (80035c8 <HAL_RCC_OscConfig+0x26c>)
 80033c6:	681b      	ldr	r3, [r3, #0]
 80033c8:	4a7f      	ldr	r2, [pc, #508]	@ (80035c8 <HAL_RCC_OscConfig+0x26c>)
 80033ca:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80033ce:	6013      	str	r3, [r2, #0]
 80033d0:	e02e      	b.n	8003430 <HAL_RCC_OscConfig+0xd4>
 80033d2:	687b      	ldr	r3, [r7, #4]
 80033d4:	685b      	ldr	r3, [r3, #4]
 80033d6:	2b00      	cmp	r3, #0
 80033d8:	d10c      	bne.n	80033f4 <HAL_RCC_OscConfig+0x98>
 80033da:	4b7b      	ldr	r3, [pc, #492]	@ (80035c8 <HAL_RCC_OscConfig+0x26c>)
 80033dc:	681b      	ldr	r3, [r3, #0]
 80033de:	4a7a      	ldr	r2, [pc, #488]	@ (80035c8 <HAL_RCC_OscConfig+0x26c>)
 80033e0:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80033e4:	6013      	str	r3, [r2, #0]
 80033e6:	4b78      	ldr	r3, [pc, #480]	@ (80035c8 <HAL_RCC_OscConfig+0x26c>)
 80033e8:	681b      	ldr	r3, [r3, #0]
 80033ea:	4a77      	ldr	r2, [pc, #476]	@ (80035c8 <HAL_RCC_OscConfig+0x26c>)
 80033ec:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80033f0:	6013      	str	r3, [r2, #0]
 80033f2:	e01d      	b.n	8003430 <HAL_RCC_OscConfig+0xd4>
 80033f4:	687b      	ldr	r3, [r7, #4]
 80033f6:	685b      	ldr	r3, [r3, #4]
 80033f8:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80033fc:	d10c      	bne.n	8003418 <HAL_RCC_OscConfig+0xbc>
 80033fe:	4b72      	ldr	r3, [pc, #456]	@ (80035c8 <HAL_RCC_OscConfig+0x26c>)
 8003400:	681b      	ldr	r3, [r3, #0]
 8003402:	4a71      	ldr	r2, [pc, #452]	@ (80035c8 <HAL_RCC_OscConfig+0x26c>)
 8003404:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8003408:	6013      	str	r3, [r2, #0]
 800340a:	4b6f      	ldr	r3, [pc, #444]	@ (80035c8 <HAL_RCC_OscConfig+0x26c>)
 800340c:	681b      	ldr	r3, [r3, #0]
 800340e:	4a6e      	ldr	r2, [pc, #440]	@ (80035c8 <HAL_RCC_OscConfig+0x26c>)
 8003410:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003414:	6013      	str	r3, [r2, #0]
 8003416:	e00b      	b.n	8003430 <HAL_RCC_OscConfig+0xd4>
 8003418:	4b6b      	ldr	r3, [pc, #428]	@ (80035c8 <HAL_RCC_OscConfig+0x26c>)
 800341a:	681b      	ldr	r3, [r3, #0]
 800341c:	4a6a      	ldr	r2, [pc, #424]	@ (80035c8 <HAL_RCC_OscConfig+0x26c>)
 800341e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003422:	6013      	str	r3, [r2, #0]
 8003424:	4b68      	ldr	r3, [pc, #416]	@ (80035c8 <HAL_RCC_OscConfig+0x26c>)
 8003426:	681b      	ldr	r3, [r3, #0]
 8003428:	4a67      	ldr	r2, [pc, #412]	@ (80035c8 <HAL_RCC_OscConfig+0x26c>)
 800342a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800342e:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003430:	687b      	ldr	r3, [r7, #4]
 8003432:	685b      	ldr	r3, [r3, #4]
 8003434:	2b00      	cmp	r3, #0
 8003436:	d013      	beq.n	8003460 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003438:	f7fe fc06 	bl	8001c48 <HAL_GetTick>
 800343c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800343e:	e008      	b.n	8003452 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003440:	f7fe fc02 	bl	8001c48 <HAL_GetTick>
 8003444:	4602      	mov	r2, r0
 8003446:	693b      	ldr	r3, [r7, #16]
 8003448:	1ad3      	subs	r3, r2, r3
 800344a:	2b64      	cmp	r3, #100	@ 0x64
 800344c:	d901      	bls.n	8003452 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 800344e:	2303      	movs	r3, #3
 8003450:	e200      	b.n	8003854 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003452:	4b5d      	ldr	r3, [pc, #372]	@ (80035c8 <HAL_RCC_OscConfig+0x26c>)
 8003454:	681b      	ldr	r3, [r3, #0]
 8003456:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800345a:	2b00      	cmp	r3, #0
 800345c:	d0f0      	beq.n	8003440 <HAL_RCC_OscConfig+0xe4>
 800345e:	e014      	b.n	800348a <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003460:	f7fe fbf2 	bl	8001c48 <HAL_GetTick>
 8003464:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003466:	e008      	b.n	800347a <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003468:	f7fe fbee 	bl	8001c48 <HAL_GetTick>
 800346c:	4602      	mov	r2, r0
 800346e:	693b      	ldr	r3, [r7, #16]
 8003470:	1ad3      	subs	r3, r2, r3
 8003472:	2b64      	cmp	r3, #100	@ 0x64
 8003474:	d901      	bls.n	800347a <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8003476:	2303      	movs	r3, #3
 8003478:	e1ec      	b.n	8003854 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800347a:	4b53      	ldr	r3, [pc, #332]	@ (80035c8 <HAL_RCC_OscConfig+0x26c>)
 800347c:	681b      	ldr	r3, [r3, #0]
 800347e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003482:	2b00      	cmp	r3, #0
 8003484:	d1f0      	bne.n	8003468 <HAL_RCC_OscConfig+0x10c>
 8003486:	e000      	b.n	800348a <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003488:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800348a:	687b      	ldr	r3, [r7, #4]
 800348c:	681b      	ldr	r3, [r3, #0]
 800348e:	f003 0302 	and.w	r3, r3, #2
 8003492:	2b00      	cmp	r3, #0
 8003494:	d063      	beq.n	800355e <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8003496:	4b4c      	ldr	r3, [pc, #304]	@ (80035c8 <HAL_RCC_OscConfig+0x26c>)
 8003498:	685b      	ldr	r3, [r3, #4]
 800349a:	f003 030c 	and.w	r3, r3, #12
 800349e:	2b00      	cmp	r3, #0
 80034a0:	d00b      	beq.n	80034ba <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 80034a2:	4b49      	ldr	r3, [pc, #292]	@ (80035c8 <HAL_RCC_OscConfig+0x26c>)
 80034a4:	685b      	ldr	r3, [r3, #4]
 80034a6:	f003 030c 	and.w	r3, r3, #12
 80034aa:	2b08      	cmp	r3, #8
 80034ac:	d11c      	bne.n	80034e8 <HAL_RCC_OscConfig+0x18c>
 80034ae:	4b46      	ldr	r3, [pc, #280]	@ (80035c8 <HAL_RCC_OscConfig+0x26c>)
 80034b0:	685b      	ldr	r3, [r3, #4]
 80034b2:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80034b6:	2b00      	cmp	r3, #0
 80034b8:	d116      	bne.n	80034e8 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80034ba:	4b43      	ldr	r3, [pc, #268]	@ (80035c8 <HAL_RCC_OscConfig+0x26c>)
 80034bc:	681b      	ldr	r3, [r3, #0]
 80034be:	f003 0302 	and.w	r3, r3, #2
 80034c2:	2b00      	cmp	r3, #0
 80034c4:	d005      	beq.n	80034d2 <HAL_RCC_OscConfig+0x176>
 80034c6:	687b      	ldr	r3, [r7, #4]
 80034c8:	691b      	ldr	r3, [r3, #16]
 80034ca:	2b01      	cmp	r3, #1
 80034cc:	d001      	beq.n	80034d2 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 80034ce:	2301      	movs	r3, #1
 80034d0:	e1c0      	b.n	8003854 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80034d2:	4b3d      	ldr	r3, [pc, #244]	@ (80035c8 <HAL_RCC_OscConfig+0x26c>)
 80034d4:	681b      	ldr	r3, [r3, #0]
 80034d6:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80034da:	687b      	ldr	r3, [r7, #4]
 80034dc:	695b      	ldr	r3, [r3, #20]
 80034de:	00db      	lsls	r3, r3, #3
 80034e0:	4939      	ldr	r1, [pc, #228]	@ (80035c8 <HAL_RCC_OscConfig+0x26c>)
 80034e2:	4313      	orrs	r3, r2
 80034e4:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80034e6:	e03a      	b.n	800355e <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80034e8:	687b      	ldr	r3, [r7, #4]
 80034ea:	691b      	ldr	r3, [r3, #16]
 80034ec:	2b00      	cmp	r3, #0
 80034ee:	d020      	beq.n	8003532 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80034f0:	4b36      	ldr	r3, [pc, #216]	@ (80035cc <HAL_RCC_OscConfig+0x270>)
 80034f2:	2201      	movs	r2, #1
 80034f4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80034f6:	f7fe fba7 	bl	8001c48 <HAL_GetTick>
 80034fa:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80034fc:	e008      	b.n	8003510 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80034fe:	f7fe fba3 	bl	8001c48 <HAL_GetTick>
 8003502:	4602      	mov	r2, r0
 8003504:	693b      	ldr	r3, [r7, #16]
 8003506:	1ad3      	subs	r3, r2, r3
 8003508:	2b02      	cmp	r3, #2
 800350a:	d901      	bls.n	8003510 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 800350c:	2303      	movs	r3, #3
 800350e:	e1a1      	b.n	8003854 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003510:	4b2d      	ldr	r3, [pc, #180]	@ (80035c8 <HAL_RCC_OscConfig+0x26c>)
 8003512:	681b      	ldr	r3, [r3, #0]
 8003514:	f003 0302 	and.w	r3, r3, #2
 8003518:	2b00      	cmp	r3, #0
 800351a:	d0f0      	beq.n	80034fe <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800351c:	4b2a      	ldr	r3, [pc, #168]	@ (80035c8 <HAL_RCC_OscConfig+0x26c>)
 800351e:	681b      	ldr	r3, [r3, #0]
 8003520:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8003524:	687b      	ldr	r3, [r7, #4]
 8003526:	695b      	ldr	r3, [r3, #20]
 8003528:	00db      	lsls	r3, r3, #3
 800352a:	4927      	ldr	r1, [pc, #156]	@ (80035c8 <HAL_RCC_OscConfig+0x26c>)
 800352c:	4313      	orrs	r3, r2
 800352e:	600b      	str	r3, [r1, #0]
 8003530:	e015      	b.n	800355e <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003532:	4b26      	ldr	r3, [pc, #152]	@ (80035cc <HAL_RCC_OscConfig+0x270>)
 8003534:	2200      	movs	r2, #0
 8003536:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003538:	f7fe fb86 	bl	8001c48 <HAL_GetTick>
 800353c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800353e:	e008      	b.n	8003552 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003540:	f7fe fb82 	bl	8001c48 <HAL_GetTick>
 8003544:	4602      	mov	r2, r0
 8003546:	693b      	ldr	r3, [r7, #16]
 8003548:	1ad3      	subs	r3, r2, r3
 800354a:	2b02      	cmp	r3, #2
 800354c:	d901      	bls.n	8003552 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 800354e:	2303      	movs	r3, #3
 8003550:	e180      	b.n	8003854 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003552:	4b1d      	ldr	r3, [pc, #116]	@ (80035c8 <HAL_RCC_OscConfig+0x26c>)
 8003554:	681b      	ldr	r3, [r3, #0]
 8003556:	f003 0302 	and.w	r3, r3, #2
 800355a:	2b00      	cmp	r3, #0
 800355c:	d1f0      	bne.n	8003540 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800355e:	687b      	ldr	r3, [r7, #4]
 8003560:	681b      	ldr	r3, [r3, #0]
 8003562:	f003 0308 	and.w	r3, r3, #8
 8003566:	2b00      	cmp	r3, #0
 8003568:	d03a      	beq.n	80035e0 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800356a:	687b      	ldr	r3, [r7, #4]
 800356c:	699b      	ldr	r3, [r3, #24]
 800356e:	2b00      	cmp	r3, #0
 8003570:	d019      	beq.n	80035a6 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003572:	4b17      	ldr	r3, [pc, #92]	@ (80035d0 <HAL_RCC_OscConfig+0x274>)
 8003574:	2201      	movs	r2, #1
 8003576:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003578:	f7fe fb66 	bl	8001c48 <HAL_GetTick>
 800357c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800357e:	e008      	b.n	8003592 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003580:	f7fe fb62 	bl	8001c48 <HAL_GetTick>
 8003584:	4602      	mov	r2, r0
 8003586:	693b      	ldr	r3, [r7, #16]
 8003588:	1ad3      	subs	r3, r2, r3
 800358a:	2b02      	cmp	r3, #2
 800358c:	d901      	bls.n	8003592 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 800358e:	2303      	movs	r3, #3
 8003590:	e160      	b.n	8003854 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003592:	4b0d      	ldr	r3, [pc, #52]	@ (80035c8 <HAL_RCC_OscConfig+0x26c>)
 8003594:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003596:	f003 0302 	and.w	r3, r3, #2
 800359a:	2b00      	cmp	r3, #0
 800359c:	d0f0      	beq.n	8003580 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 800359e:	2001      	movs	r0, #1
 80035a0:	f000 face 	bl	8003b40 <RCC_Delay>
 80035a4:	e01c      	b.n	80035e0 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80035a6:	4b0a      	ldr	r3, [pc, #40]	@ (80035d0 <HAL_RCC_OscConfig+0x274>)
 80035a8:	2200      	movs	r2, #0
 80035aa:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80035ac:	f7fe fb4c 	bl	8001c48 <HAL_GetTick>
 80035b0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80035b2:	e00f      	b.n	80035d4 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80035b4:	f7fe fb48 	bl	8001c48 <HAL_GetTick>
 80035b8:	4602      	mov	r2, r0
 80035ba:	693b      	ldr	r3, [r7, #16]
 80035bc:	1ad3      	subs	r3, r2, r3
 80035be:	2b02      	cmp	r3, #2
 80035c0:	d908      	bls.n	80035d4 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 80035c2:	2303      	movs	r3, #3
 80035c4:	e146      	b.n	8003854 <HAL_RCC_OscConfig+0x4f8>
 80035c6:	bf00      	nop
 80035c8:	40021000 	.word	0x40021000
 80035cc:	42420000 	.word	0x42420000
 80035d0:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80035d4:	4b92      	ldr	r3, [pc, #584]	@ (8003820 <HAL_RCC_OscConfig+0x4c4>)
 80035d6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80035d8:	f003 0302 	and.w	r3, r3, #2
 80035dc:	2b00      	cmp	r3, #0
 80035de:	d1e9      	bne.n	80035b4 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80035e0:	687b      	ldr	r3, [r7, #4]
 80035e2:	681b      	ldr	r3, [r3, #0]
 80035e4:	f003 0304 	and.w	r3, r3, #4
 80035e8:	2b00      	cmp	r3, #0
 80035ea:	f000 80a6 	beq.w	800373a <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 80035ee:	2300      	movs	r3, #0
 80035f0:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80035f2:	4b8b      	ldr	r3, [pc, #556]	@ (8003820 <HAL_RCC_OscConfig+0x4c4>)
 80035f4:	69db      	ldr	r3, [r3, #28]
 80035f6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80035fa:	2b00      	cmp	r3, #0
 80035fc:	d10d      	bne.n	800361a <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80035fe:	4b88      	ldr	r3, [pc, #544]	@ (8003820 <HAL_RCC_OscConfig+0x4c4>)
 8003600:	69db      	ldr	r3, [r3, #28]
 8003602:	4a87      	ldr	r2, [pc, #540]	@ (8003820 <HAL_RCC_OscConfig+0x4c4>)
 8003604:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003608:	61d3      	str	r3, [r2, #28]
 800360a:	4b85      	ldr	r3, [pc, #532]	@ (8003820 <HAL_RCC_OscConfig+0x4c4>)
 800360c:	69db      	ldr	r3, [r3, #28]
 800360e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003612:	60bb      	str	r3, [r7, #8]
 8003614:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003616:	2301      	movs	r3, #1
 8003618:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800361a:	4b82      	ldr	r3, [pc, #520]	@ (8003824 <HAL_RCC_OscConfig+0x4c8>)
 800361c:	681b      	ldr	r3, [r3, #0]
 800361e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003622:	2b00      	cmp	r3, #0
 8003624:	d118      	bne.n	8003658 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003626:	4b7f      	ldr	r3, [pc, #508]	@ (8003824 <HAL_RCC_OscConfig+0x4c8>)
 8003628:	681b      	ldr	r3, [r3, #0]
 800362a:	4a7e      	ldr	r2, [pc, #504]	@ (8003824 <HAL_RCC_OscConfig+0x4c8>)
 800362c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003630:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003632:	f7fe fb09 	bl	8001c48 <HAL_GetTick>
 8003636:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003638:	e008      	b.n	800364c <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800363a:	f7fe fb05 	bl	8001c48 <HAL_GetTick>
 800363e:	4602      	mov	r2, r0
 8003640:	693b      	ldr	r3, [r7, #16]
 8003642:	1ad3      	subs	r3, r2, r3
 8003644:	2b64      	cmp	r3, #100	@ 0x64
 8003646:	d901      	bls.n	800364c <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8003648:	2303      	movs	r3, #3
 800364a:	e103      	b.n	8003854 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800364c:	4b75      	ldr	r3, [pc, #468]	@ (8003824 <HAL_RCC_OscConfig+0x4c8>)
 800364e:	681b      	ldr	r3, [r3, #0]
 8003650:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003654:	2b00      	cmp	r3, #0
 8003656:	d0f0      	beq.n	800363a <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003658:	687b      	ldr	r3, [r7, #4]
 800365a:	68db      	ldr	r3, [r3, #12]
 800365c:	2b01      	cmp	r3, #1
 800365e:	d106      	bne.n	800366e <HAL_RCC_OscConfig+0x312>
 8003660:	4b6f      	ldr	r3, [pc, #444]	@ (8003820 <HAL_RCC_OscConfig+0x4c4>)
 8003662:	6a1b      	ldr	r3, [r3, #32]
 8003664:	4a6e      	ldr	r2, [pc, #440]	@ (8003820 <HAL_RCC_OscConfig+0x4c4>)
 8003666:	f043 0301 	orr.w	r3, r3, #1
 800366a:	6213      	str	r3, [r2, #32]
 800366c:	e02d      	b.n	80036ca <HAL_RCC_OscConfig+0x36e>
 800366e:	687b      	ldr	r3, [r7, #4]
 8003670:	68db      	ldr	r3, [r3, #12]
 8003672:	2b00      	cmp	r3, #0
 8003674:	d10c      	bne.n	8003690 <HAL_RCC_OscConfig+0x334>
 8003676:	4b6a      	ldr	r3, [pc, #424]	@ (8003820 <HAL_RCC_OscConfig+0x4c4>)
 8003678:	6a1b      	ldr	r3, [r3, #32]
 800367a:	4a69      	ldr	r2, [pc, #420]	@ (8003820 <HAL_RCC_OscConfig+0x4c4>)
 800367c:	f023 0301 	bic.w	r3, r3, #1
 8003680:	6213      	str	r3, [r2, #32]
 8003682:	4b67      	ldr	r3, [pc, #412]	@ (8003820 <HAL_RCC_OscConfig+0x4c4>)
 8003684:	6a1b      	ldr	r3, [r3, #32]
 8003686:	4a66      	ldr	r2, [pc, #408]	@ (8003820 <HAL_RCC_OscConfig+0x4c4>)
 8003688:	f023 0304 	bic.w	r3, r3, #4
 800368c:	6213      	str	r3, [r2, #32]
 800368e:	e01c      	b.n	80036ca <HAL_RCC_OscConfig+0x36e>
 8003690:	687b      	ldr	r3, [r7, #4]
 8003692:	68db      	ldr	r3, [r3, #12]
 8003694:	2b05      	cmp	r3, #5
 8003696:	d10c      	bne.n	80036b2 <HAL_RCC_OscConfig+0x356>
 8003698:	4b61      	ldr	r3, [pc, #388]	@ (8003820 <HAL_RCC_OscConfig+0x4c4>)
 800369a:	6a1b      	ldr	r3, [r3, #32]
 800369c:	4a60      	ldr	r2, [pc, #384]	@ (8003820 <HAL_RCC_OscConfig+0x4c4>)
 800369e:	f043 0304 	orr.w	r3, r3, #4
 80036a2:	6213      	str	r3, [r2, #32]
 80036a4:	4b5e      	ldr	r3, [pc, #376]	@ (8003820 <HAL_RCC_OscConfig+0x4c4>)
 80036a6:	6a1b      	ldr	r3, [r3, #32]
 80036a8:	4a5d      	ldr	r2, [pc, #372]	@ (8003820 <HAL_RCC_OscConfig+0x4c4>)
 80036aa:	f043 0301 	orr.w	r3, r3, #1
 80036ae:	6213      	str	r3, [r2, #32]
 80036b0:	e00b      	b.n	80036ca <HAL_RCC_OscConfig+0x36e>
 80036b2:	4b5b      	ldr	r3, [pc, #364]	@ (8003820 <HAL_RCC_OscConfig+0x4c4>)
 80036b4:	6a1b      	ldr	r3, [r3, #32]
 80036b6:	4a5a      	ldr	r2, [pc, #360]	@ (8003820 <HAL_RCC_OscConfig+0x4c4>)
 80036b8:	f023 0301 	bic.w	r3, r3, #1
 80036bc:	6213      	str	r3, [r2, #32]
 80036be:	4b58      	ldr	r3, [pc, #352]	@ (8003820 <HAL_RCC_OscConfig+0x4c4>)
 80036c0:	6a1b      	ldr	r3, [r3, #32]
 80036c2:	4a57      	ldr	r2, [pc, #348]	@ (8003820 <HAL_RCC_OscConfig+0x4c4>)
 80036c4:	f023 0304 	bic.w	r3, r3, #4
 80036c8:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80036ca:	687b      	ldr	r3, [r7, #4]
 80036cc:	68db      	ldr	r3, [r3, #12]
 80036ce:	2b00      	cmp	r3, #0
 80036d0:	d015      	beq.n	80036fe <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80036d2:	f7fe fab9 	bl	8001c48 <HAL_GetTick>
 80036d6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80036d8:	e00a      	b.n	80036f0 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80036da:	f7fe fab5 	bl	8001c48 <HAL_GetTick>
 80036de:	4602      	mov	r2, r0
 80036e0:	693b      	ldr	r3, [r7, #16]
 80036e2:	1ad3      	subs	r3, r2, r3
 80036e4:	f241 3288 	movw	r2, #5000	@ 0x1388
 80036e8:	4293      	cmp	r3, r2
 80036ea:	d901      	bls.n	80036f0 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 80036ec:	2303      	movs	r3, #3
 80036ee:	e0b1      	b.n	8003854 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80036f0:	4b4b      	ldr	r3, [pc, #300]	@ (8003820 <HAL_RCC_OscConfig+0x4c4>)
 80036f2:	6a1b      	ldr	r3, [r3, #32]
 80036f4:	f003 0302 	and.w	r3, r3, #2
 80036f8:	2b00      	cmp	r3, #0
 80036fa:	d0ee      	beq.n	80036da <HAL_RCC_OscConfig+0x37e>
 80036fc:	e014      	b.n	8003728 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80036fe:	f7fe faa3 	bl	8001c48 <HAL_GetTick>
 8003702:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003704:	e00a      	b.n	800371c <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003706:	f7fe fa9f 	bl	8001c48 <HAL_GetTick>
 800370a:	4602      	mov	r2, r0
 800370c:	693b      	ldr	r3, [r7, #16]
 800370e:	1ad3      	subs	r3, r2, r3
 8003710:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003714:	4293      	cmp	r3, r2
 8003716:	d901      	bls.n	800371c <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8003718:	2303      	movs	r3, #3
 800371a:	e09b      	b.n	8003854 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800371c:	4b40      	ldr	r3, [pc, #256]	@ (8003820 <HAL_RCC_OscConfig+0x4c4>)
 800371e:	6a1b      	ldr	r3, [r3, #32]
 8003720:	f003 0302 	and.w	r3, r3, #2
 8003724:	2b00      	cmp	r3, #0
 8003726:	d1ee      	bne.n	8003706 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8003728:	7dfb      	ldrb	r3, [r7, #23]
 800372a:	2b01      	cmp	r3, #1
 800372c:	d105      	bne.n	800373a <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800372e:	4b3c      	ldr	r3, [pc, #240]	@ (8003820 <HAL_RCC_OscConfig+0x4c4>)
 8003730:	69db      	ldr	r3, [r3, #28]
 8003732:	4a3b      	ldr	r2, [pc, #236]	@ (8003820 <HAL_RCC_OscConfig+0x4c4>)
 8003734:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8003738:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800373a:	687b      	ldr	r3, [r7, #4]
 800373c:	69db      	ldr	r3, [r3, #28]
 800373e:	2b00      	cmp	r3, #0
 8003740:	f000 8087 	beq.w	8003852 <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003744:	4b36      	ldr	r3, [pc, #216]	@ (8003820 <HAL_RCC_OscConfig+0x4c4>)
 8003746:	685b      	ldr	r3, [r3, #4]
 8003748:	f003 030c 	and.w	r3, r3, #12
 800374c:	2b08      	cmp	r3, #8
 800374e:	d061      	beq.n	8003814 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003750:	687b      	ldr	r3, [r7, #4]
 8003752:	69db      	ldr	r3, [r3, #28]
 8003754:	2b02      	cmp	r3, #2
 8003756:	d146      	bne.n	80037e6 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003758:	4b33      	ldr	r3, [pc, #204]	@ (8003828 <HAL_RCC_OscConfig+0x4cc>)
 800375a:	2200      	movs	r2, #0
 800375c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800375e:	f7fe fa73 	bl	8001c48 <HAL_GetTick>
 8003762:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003764:	e008      	b.n	8003778 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003766:	f7fe fa6f 	bl	8001c48 <HAL_GetTick>
 800376a:	4602      	mov	r2, r0
 800376c:	693b      	ldr	r3, [r7, #16]
 800376e:	1ad3      	subs	r3, r2, r3
 8003770:	2b02      	cmp	r3, #2
 8003772:	d901      	bls.n	8003778 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8003774:	2303      	movs	r3, #3
 8003776:	e06d      	b.n	8003854 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003778:	4b29      	ldr	r3, [pc, #164]	@ (8003820 <HAL_RCC_OscConfig+0x4c4>)
 800377a:	681b      	ldr	r3, [r3, #0]
 800377c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003780:	2b00      	cmp	r3, #0
 8003782:	d1f0      	bne.n	8003766 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8003784:	687b      	ldr	r3, [r7, #4]
 8003786:	6a1b      	ldr	r3, [r3, #32]
 8003788:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800378c:	d108      	bne.n	80037a0 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 800378e:	4b24      	ldr	r3, [pc, #144]	@ (8003820 <HAL_RCC_OscConfig+0x4c4>)
 8003790:	685b      	ldr	r3, [r3, #4]
 8003792:	f423 3200 	bic.w	r2, r3, #131072	@ 0x20000
 8003796:	687b      	ldr	r3, [r7, #4]
 8003798:	689b      	ldr	r3, [r3, #8]
 800379a:	4921      	ldr	r1, [pc, #132]	@ (8003820 <HAL_RCC_OscConfig+0x4c4>)
 800379c:	4313      	orrs	r3, r2
 800379e:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80037a0:	4b1f      	ldr	r3, [pc, #124]	@ (8003820 <HAL_RCC_OscConfig+0x4c4>)
 80037a2:	685b      	ldr	r3, [r3, #4]
 80037a4:	f423 1274 	bic.w	r2, r3, #3997696	@ 0x3d0000
 80037a8:	687b      	ldr	r3, [r7, #4]
 80037aa:	6a19      	ldr	r1, [r3, #32]
 80037ac:	687b      	ldr	r3, [r7, #4]
 80037ae:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80037b0:	430b      	orrs	r3, r1
 80037b2:	491b      	ldr	r1, [pc, #108]	@ (8003820 <HAL_RCC_OscConfig+0x4c4>)
 80037b4:	4313      	orrs	r3, r2
 80037b6:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80037b8:	4b1b      	ldr	r3, [pc, #108]	@ (8003828 <HAL_RCC_OscConfig+0x4cc>)
 80037ba:	2201      	movs	r2, #1
 80037bc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80037be:	f7fe fa43 	bl	8001c48 <HAL_GetTick>
 80037c2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80037c4:	e008      	b.n	80037d8 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80037c6:	f7fe fa3f 	bl	8001c48 <HAL_GetTick>
 80037ca:	4602      	mov	r2, r0
 80037cc:	693b      	ldr	r3, [r7, #16]
 80037ce:	1ad3      	subs	r3, r2, r3
 80037d0:	2b02      	cmp	r3, #2
 80037d2:	d901      	bls.n	80037d8 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 80037d4:	2303      	movs	r3, #3
 80037d6:	e03d      	b.n	8003854 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80037d8:	4b11      	ldr	r3, [pc, #68]	@ (8003820 <HAL_RCC_OscConfig+0x4c4>)
 80037da:	681b      	ldr	r3, [r3, #0]
 80037dc:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80037e0:	2b00      	cmp	r3, #0
 80037e2:	d0f0      	beq.n	80037c6 <HAL_RCC_OscConfig+0x46a>
 80037e4:	e035      	b.n	8003852 <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80037e6:	4b10      	ldr	r3, [pc, #64]	@ (8003828 <HAL_RCC_OscConfig+0x4cc>)
 80037e8:	2200      	movs	r2, #0
 80037ea:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80037ec:	f7fe fa2c 	bl	8001c48 <HAL_GetTick>
 80037f0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80037f2:	e008      	b.n	8003806 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80037f4:	f7fe fa28 	bl	8001c48 <HAL_GetTick>
 80037f8:	4602      	mov	r2, r0
 80037fa:	693b      	ldr	r3, [r7, #16]
 80037fc:	1ad3      	subs	r3, r2, r3
 80037fe:	2b02      	cmp	r3, #2
 8003800:	d901      	bls.n	8003806 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8003802:	2303      	movs	r3, #3
 8003804:	e026      	b.n	8003854 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003806:	4b06      	ldr	r3, [pc, #24]	@ (8003820 <HAL_RCC_OscConfig+0x4c4>)
 8003808:	681b      	ldr	r3, [r3, #0]
 800380a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800380e:	2b00      	cmp	r3, #0
 8003810:	d1f0      	bne.n	80037f4 <HAL_RCC_OscConfig+0x498>
 8003812:	e01e      	b.n	8003852 <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003814:	687b      	ldr	r3, [r7, #4]
 8003816:	69db      	ldr	r3, [r3, #28]
 8003818:	2b01      	cmp	r3, #1
 800381a:	d107      	bne.n	800382c <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 800381c:	2301      	movs	r3, #1
 800381e:	e019      	b.n	8003854 <HAL_RCC_OscConfig+0x4f8>
 8003820:	40021000 	.word	0x40021000
 8003824:	40007000 	.word	0x40007000
 8003828:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 800382c:	4b0b      	ldr	r3, [pc, #44]	@ (800385c <HAL_RCC_OscConfig+0x500>)
 800382e:	685b      	ldr	r3, [r3, #4]
 8003830:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003832:	68fb      	ldr	r3, [r7, #12]
 8003834:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 8003838:	687b      	ldr	r3, [r7, #4]
 800383a:	6a1b      	ldr	r3, [r3, #32]
 800383c:	429a      	cmp	r2, r3
 800383e:	d106      	bne.n	800384e <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8003840:	68fb      	ldr	r3, [r7, #12]
 8003842:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 8003846:	687b      	ldr	r3, [r7, #4]
 8003848:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800384a:	429a      	cmp	r2, r3
 800384c:	d001      	beq.n	8003852 <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 800384e:	2301      	movs	r3, #1
 8003850:	e000      	b.n	8003854 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8003852:	2300      	movs	r3, #0
}
 8003854:	4618      	mov	r0, r3
 8003856:	3718      	adds	r7, #24
 8003858:	46bd      	mov	sp, r7
 800385a:	bd80      	pop	{r7, pc}
 800385c:	40021000 	.word	0x40021000

08003860 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003860:	b580      	push	{r7, lr}
 8003862:	b084      	sub	sp, #16
 8003864:	af00      	add	r7, sp, #0
 8003866:	6078      	str	r0, [r7, #4]
 8003868:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800386a:	687b      	ldr	r3, [r7, #4]
 800386c:	2b00      	cmp	r3, #0
 800386e:	d101      	bne.n	8003874 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003870:	2301      	movs	r3, #1
 8003872:	e0d0      	b.n	8003a16 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003874:	4b6a      	ldr	r3, [pc, #424]	@ (8003a20 <HAL_RCC_ClockConfig+0x1c0>)
 8003876:	681b      	ldr	r3, [r3, #0]
 8003878:	f003 0307 	and.w	r3, r3, #7
 800387c:	683a      	ldr	r2, [r7, #0]
 800387e:	429a      	cmp	r2, r3
 8003880:	d910      	bls.n	80038a4 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003882:	4b67      	ldr	r3, [pc, #412]	@ (8003a20 <HAL_RCC_ClockConfig+0x1c0>)
 8003884:	681b      	ldr	r3, [r3, #0]
 8003886:	f023 0207 	bic.w	r2, r3, #7
 800388a:	4965      	ldr	r1, [pc, #404]	@ (8003a20 <HAL_RCC_ClockConfig+0x1c0>)
 800388c:	683b      	ldr	r3, [r7, #0]
 800388e:	4313      	orrs	r3, r2
 8003890:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003892:	4b63      	ldr	r3, [pc, #396]	@ (8003a20 <HAL_RCC_ClockConfig+0x1c0>)
 8003894:	681b      	ldr	r3, [r3, #0]
 8003896:	f003 0307 	and.w	r3, r3, #7
 800389a:	683a      	ldr	r2, [r7, #0]
 800389c:	429a      	cmp	r2, r3
 800389e:	d001      	beq.n	80038a4 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 80038a0:	2301      	movs	r3, #1
 80038a2:	e0b8      	b.n	8003a16 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80038a4:	687b      	ldr	r3, [r7, #4]
 80038a6:	681b      	ldr	r3, [r3, #0]
 80038a8:	f003 0302 	and.w	r3, r3, #2
 80038ac:	2b00      	cmp	r3, #0
 80038ae:	d020      	beq.n	80038f2 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80038b0:	687b      	ldr	r3, [r7, #4]
 80038b2:	681b      	ldr	r3, [r3, #0]
 80038b4:	f003 0304 	and.w	r3, r3, #4
 80038b8:	2b00      	cmp	r3, #0
 80038ba:	d005      	beq.n	80038c8 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80038bc:	4b59      	ldr	r3, [pc, #356]	@ (8003a24 <HAL_RCC_ClockConfig+0x1c4>)
 80038be:	685b      	ldr	r3, [r3, #4]
 80038c0:	4a58      	ldr	r2, [pc, #352]	@ (8003a24 <HAL_RCC_ClockConfig+0x1c4>)
 80038c2:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 80038c6:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80038c8:	687b      	ldr	r3, [r7, #4]
 80038ca:	681b      	ldr	r3, [r3, #0]
 80038cc:	f003 0308 	and.w	r3, r3, #8
 80038d0:	2b00      	cmp	r3, #0
 80038d2:	d005      	beq.n	80038e0 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80038d4:	4b53      	ldr	r3, [pc, #332]	@ (8003a24 <HAL_RCC_ClockConfig+0x1c4>)
 80038d6:	685b      	ldr	r3, [r3, #4]
 80038d8:	4a52      	ldr	r2, [pc, #328]	@ (8003a24 <HAL_RCC_ClockConfig+0x1c4>)
 80038da:	f443 5360 	orr.w	r3, r3, #14336	@ 0x3800
 80038de:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80038e0:	4b50      	ldr	r3, [pc, #320]	@ (8003a24 <HAL_RCC_ClockConfig+0x1c4>)
 80038e2:	685b      	ldr	r3, [r3, #4]
 80038e4:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80038e8:	687b      	ldr	r3, [r7, #4]
 80038ea:	689b      	ldr	r3, [r3, #8]
 80038ec:	494d      	ldr	r1, [pc, #308]	@ (8003a24 <HAL_RCC_ClockConfig+0x1c4>)
 80038ee:	4313      	orrs	r3, r2
 80038f0:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80038f2:	687b      	ldr	r3, [r7, #4]
 80038f4:	681b      	ldr	r3, [r3, #0]
 80038f6:	f003 0301 	and.w	r3, r3, #1
 80038fa:	2b00      	cmp	r3, #0
 80038fc:	d040      	beq.n	8003980 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80038fe:	687b      	ldr	r3, [r7, #4]
 8003900:	685b      	ldr	r3, [r3, #4]
 8003902:	2b01      	cmp	r3, #1
 8003904:	d107      	bne.n	8003916 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003906:	4b47      	ldr	r3, [pc, #284]	@ (8003a24 <HAL_RCC_ClockConfig+0x1c4>)
 8003908:	681b      	ldr	r3, [r3, #0]
 800390a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800390e:	2b00      	cmp	r3, #0
 8003910:	d115      	bne.n	800393e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003912:	2301      	movs	r3, #1
 8003914:	e07f      	b.n	8003a16 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003916:	687b      	ldr	r3, [r7, #4]
 8003918:	685b      	ldr	r3, [r3, #4]
 800391a:	2b02      	cmp	r3, #2
 800391c:	d107      	bne.n	800392e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800391e:	4b41      	ldr	r3, [pc, #260]	@ (8003a24 <HAL_RCC_ClockConfig+0x1c4>)
 8003920:	681b      	ldr	r3, [r3, #0]
 8003922:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003926:	2b00      	cmp	r3, #0
 8003928:	d109      	bne.n	800393e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800392a:	2301      	movs	r3, #1
 800392c:	e073      	b.n	8003a16 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800392e:	4b3d      	ldr	r3, [pc, #244]	@ (8003a24 <HAL_RCC_ClockConfig+0x1c4>)
 8003930:	681b      	ldr	r3, [r3, #0]
 8003932:	f003 0302 	and.w	r3, r3, #2
 8003936:	2b00      	cmp	r3, #0
 8003938:	d101      	bne.n	800393e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800393a:	2301      	movs	r3, #1
 800393c:	e06b      	b.n	8003a16 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800393e:	4b39      	ldr	r3, [pc, #228]	@ (8003a24 <HAL_RCC_ClockConfig+0x1c4>)
 8003940:	685b      	ldr	r3, [r3, #4]
 8003942:	f023 0203 	bic.w	r2, r3, #3
 8003946:	687b      	ldr	r3, [r7, #4]
 8003948:	685b      	ldr	r3, [r3, #4]
 800394a:	4936      	ldr	r1, [pc, #216]	@ (8003a24 <HAL_RCC_ClockConfig+0x1c4>)
 800394c:	4313      	orrs	r3, r2
 800394e:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003950:	f7fe f97a 	bl	8001c48 <HAL_GetTick>
 8003954:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003956:	e00a      	b.n	800396e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003958:	f7fe f976 	bl	8001c48 <HAL_GetTick>
 800395c:	4602      	mov	r2, r0
 800395e:	68fb      	ldr	r3, [r7, #12]
 8003960:	1ad3      	subs	r3, r2, r3
 8003962:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003966:	4293      	cmp	r3, r2
 8003968:	d901      	bls.n	800396e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800396a:	2303      	movs	r3, #3
 800396c:	e053      	b.n	8003a16 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800396e:	4b2d      	ldr	r3, [pc, #180]	@ (8003a24 <HAL_RCC_ClockConfig+0x1c4>)
 8003970:	685b      	ldr	r3, [r3, #4]
 8003972:	f003 020c 	and.w	r2, r3, #12
 8003976:	687b      	ldr	r3, [r7, #4]
 8003978:	685b      	ldr	r3, [r3, #4]
 800397a:	009b      	lsls	r3, r3, #2
 800397c:	429a      	cmp	r2, r3
 800397e:	d1eb      	bne.n	8003958 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003980:	4b27      	ldr	r3, [pc, #156]	@ (8003a20 <HAL_RCC_ClockConfig+0x1c0>)
 8003982:	681b      	ldr	r3, [r3, #0]
 8003984:	f003 0307 	and.w	r3, r3, #7
 8003988:	683a      	ldr	r2, [r7, #0]
 800398a:	429a      	cmp	r2, r3
 800398c:	d210      	bcs.n	80039b0 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800398e:	4b24      	ldr	r3, [pc, #144]	@ (8003a20 <HAL_RCC_ClockConfig+0x1c0>)
 8003990:	681b      	ldr	r3, [r3, #0]
 8003992:	f023 0207 	bic.w	r2, r3, #7
 8003996:	4922      	ldr	r1, [pc, #136]	@ (8003a20 <HAL_RCC_ClockConfig+0x1c0>)
 8003998:	683b      	ldr	r3, [r7, #0]
 800399a:	4313      	orrs	r3, r2
 800399c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800399e:	4b20      	ldr	r3, [pc, #128]	@ (8003a20 <HAL_RCC_ClockConfig+0x1c0>)
 80039a0:	681b      	ldr	r3, [r3, #0]
 80039a2:	f003 0307 	and.w	r3, r3, #7
 80039a6:	683a      	ldr	r2, [r7, #0]
 80039a8:	429a      	cmp	r2, r3
 80039aa:	d001      	beq.n	80039b0 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 80039ac:	2301      	movs	r3, #1
 80039ae:	e032      	b.n	8003a16 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80039b0:	687b      	ldr	r3, [r7, #4]
 80039b2:	681b      	ldr	r3, [r3, #0]
 80039b4:	f003 0304 	and.w	r3, r3, #4
 80039b8:	2b00      	cmp	r3, #0
 80039ba:	d008      	beq.n	80039ce <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80039bc:	4b19      	ldr	r3, [pc, #100]	@ (8003a24 <HAL_RCC_ClockConfig+0x1c4>)
 80039be:	685b      	ldr	r3, [r3, #4]
 80039c0:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 80039c4:	687b      	ldr	r3, [r7, #4]
 80039c6:	68db      	ldr	r3, [r3, #12]
 80039c8:	4916      	ldr	r1, [pc, #88]	@ (8003a24 <HAL_RCC_ClockConfig+0x1c4>)
 80039ca:	4313      	orrs	r3, r2
 80039cc:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80039ce:	687b      	ldr	r3, [r7, #4]
 80039d0:	681b      	ldr	r3, [r3, #0]
 80039d2:	f003 0308 	and.w	r3, r3, #8
 80039d6:	2b00      	cmp	r3, #0
 80039d8:	d009      	beq.n	80039ee <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80039da:	4b12      	ldr	r3, [pc, #72]	@ (8003a24 <HAL_RCC_ClockConfig+0x1c4>)
 80039dc:	685b      	ldr	r3, [r3, #4]
 80039de:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 80039e2:	687b      	ldr	r3, [r7, #4]
 80039e4:	691b      	ldr	r3, [r3, #16]
 80039e6:	00db      	lsls	r3, r3, #3
 80039e8:	490e      	ldr	r1, [pc, #56]	@ (8003a24 <HAL_RCC_ClockConfig+0x1c4>)
 80039ea:	4313      	orrs	r3, r2
 80039ec:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80039ee:	f000 f821 	bl	8003a34 <HAL_RCC_GetSysClockFreq>
 80039f2:	4602      	mov	r2, r0
 80039f4:	4b0b      	ldr	r3, [pc, #44]	@ (8003a24 <HAL_RCC_ClockConfig+0x1c4>)
 80039f6:	685b      	ldr	r3, [r3, #4]
 80039f8:	091b      	lsrs	r3, r3, #4
 80039fa:	f003 030f 	and.w	r3, r3, #15
 80039fe:	490a      	ldr	r1, [pc, #40]	@ (8003a28 <HAL_RCC_ClockConfig+0x1c8>)
 8003a00:	5ccb      	ldrb	r3, [r1, r3]
 8003a02:	fa22 f303 	lsr.w	r3, r2, r3
 8003a06:	4a09      	ldr	r2, [pc, #36]	@ (8003a2c <HAL_RCC_ClockConfig+0x1cc>)
 8003a08:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8003a0a:	4b09      	ldr	r3, [pc, #36]	@ (8003a30 <HAL_RCC_ClockConfig+0x1d0>)
 8003a0c:	681b      	ldr	r3, [r3, #0]
 8003a0e:	4618      	mov	r0, r3
 8003a10:	f7fe f8d8 	bl	8001bc4 <HAL_InitTick>

  return HAL_OK;
 8003a14:	2300      	movs	r3, #0
}
 8003a16:	4618      	mov	r0, r3
 8003a18:	3710      	adds	r7, #16
 8003a1a:	46bd      	mov	sp, r7
 8003a1c:	bd80      	pop	{r7, pc}
 8003a1e:	bf00      	nop
 8003a20:	40022000 	.word	0x40022000
 8003a24:	40021000 	.word	0x40021000
 8003a28:	0800874c 	.word	0x0800874c
 8003a2c:	20000000 	.word	0x20000000
 8003a30:	20000004 	.word	0x20000004

08003a34 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003a34:	b480      	push	{r7}
 8003a36:	b087      	sub	sp, #28
 8003a38:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8003a3a:	2300      	movs	r3, #0
 8003a3c:	60fb      	str	r3, [r7, #12]
 8003a3e:	2300      	movs	r3, #0
 8003a40:	60bb      	str	r3, [r7, #8]
 8003a42:	2300      	movs	r3, #0
 8003a44:	617b      	str	r3, [r7, #20]
 8003a46:	2300      	movs	r3, #0
 8003a48:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8003a4a:	2300      	movs	r3, #0
 8003a4c:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8003a4e:	4b1e      	ldr	r3, [pc, #120]	@ (8003ac8 <HAL_RCC_GetSysClockFreq+0x94>)
 8003a50:	685b      	ldr	r3, [r3, #4]
 8003a52:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8003a54:	68fb      	ldr	r3, [r7, #12]
 8003a56:	f003 030c 	and.w	r3, r3, #12
 8003a5a:	2b04      	cmp	r3, #4
 8003a5c:	d002      	beq.n	8003a64 <HAL_RCC_GetSysClockFreq+0x30>
 8003a5e:	2b08      	cmp	r3, #8
 8003a60:	d003      	beq.n	8003a6a <HAL_RCC_GetSysClockFreq+0x36>
 8003a62:	e027      	b.n	8003ab4 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8003a64:	4b19      	ldr	r3, [pc, #100]	@ (8003acc <HAL_RCC_GetSysClockFreq+0x98>)
 8003a66:	613b      	str	r3, [r7, #16]
      break;
 8003a68:	e027      	b.n	8003aba <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8003a6a:	68fb      	ldr	r3, [r7, #12]
 8003a6c:	0c9b      	lsrs	r3, r3, #18
 8003a6e:	f003 030f 	and.w	r3, r3, #15
 8003a72:	4a17      	ldr	r2, [pc, #92]	@ (8003ad0 <HAL_RCC_GetSysClockFreq+0x9c>)
 8003a74:	5cd3      	ldrb	r3, [r2, r3]
 8003a76:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8003a78:	68fb      	ldr	r3, [r7, #12]
 8003a7a:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003a7e:	2b00      	cmp	r3, #0
 8003a80:	d010      	beq.n	8003aa4 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8003a82:	4b11      	ldr	r3, [pc, #68]	@ (8003ac8 <HAL_RCC_GetSysClockFreq+0x94>)
 8003a84:	685b      	ldr	r3, [r3, #4]
 8003a86:	0c5b      	lsrs	r3, r3, #17
 8003a88:	f003 0301 	and.w	r3, r3, #1
 8003a8c:	4a11      	ldr	r2, [pc, #68]	@ (8003ad4 <HAL_RCC_GetSysClockFreq+0xa0>)
 8003a8e:	5cd3      	ldrb	r3, [r2, r3]
 8003a90:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8003a92:	687b      	ldr	r3, [r7, #4]
 8003a94:	4a0d      	ldr	r2, [pc, #52]	@ (8003acc <HAL_RCC_GetSysClockFreq+0x98>)
 8003a96:	fb03 f202 	mul.w	r2, r3, r2
 8003a9a:	68bb      	ldr	r3, [r7, #8]
 8003a9c:	fbb2 f3f3 	udiv	r3, r2, r3
 8003aa0:	617b      	str	r3, [r7, #20]
 8003aa2:	e004      	b.n	8003aae <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8003aa4:	687b      	ldr	r3, [r7, #4]
 8003aa6:	4a0c      	ldr	r2, [pc, #48]	@ (8003ad8 <HAL_RCC_GetSysClockFreq+0xa4>)
 8003aa8:	fb02 f303 	mul.w	r3, r2, r3
 8003aac:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 8003aae:	697b      	ldr	r3, [r7, #20]
 8003ab0:	613b      	str	r3, [r7, #16]
      break;
 8003ab2:	e002      	b.n	8003aba <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8003ab4:	4b05      	ldr	r3, [pc, #20]	@ (8003acc <HAL_RCC_GetSysClockFreq+0x98>)
 8003ab6:	613b      	str	r3, [r7, #16]
      break;
 8003ab8:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003aba:	693b      	ldr	r3, [r7, #16]
}
 8003abc:	4618      	mov	r0, r3
 8003abe:	371c      	adds	r7, #28
 8003ac0:	46bd      	mov	sp, r7
 8003ac2:	bc80      	pop	{r7}
 8003ac4:	4770      	bx	lr
 8003ac6:	bf00      	nop
 8003ac8:	40021000 	.word	0x40021000
 8003acc:	007a1200 	.word	0x007a1200
 8003ad0:	08008764 	.word	0x08008764
 8003ad4:	08008774 	.word	0x08008774
 8003ad8:	003d0900 	.word	0x003d0900

08003adc <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003adc:	b480      	push	{r7}
 8003ade:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003ae0:	4b02      	ldr	r3, [pc, #8]	@ (8003aec <HAL_RCC_GetHCLKFreq+0x10>)
 8003ae2:	681b      	ldr	r3, [r3, #0]
}
 8003ae4:	4618      	mov	r0, r3
 8003ae6:	46bd      	mov	sp, r7
 8003ae8:	bc80      	pop	{r7}
 8003aea:	4770      	bx	lr
 8003aec:	20000000 	.word	0x20000000

08003af0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003af0:	b580      	push	{r7, lr}
 8003af2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8003af4:	f7ff fff2 	bl	8003adc <HAL_RCC_GetHCLKFreq>
 8003af8:	4602      	mov	r2, r0
 8003afa:	4b05      	ldr	r3, [pc, #20]	@ (8003b10 <HAL_RCC_GetPCLK1Freq+0x20>)
 8003afc:	685b      	ldr	r3, [r3, #4]
 8003afe:	0a1b      	lsrs	r3, r3, #8
 8003b00:	f003 0307 	and.w	r3, r3, #7
 8003b04:	4903      	ldr	r1, [pc, #12]	@ (8003b14 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003b06:	5ccb      	ldrb	r3, [r1, r3]
 8003b08:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003b0c:	4618      	mov	r0, r3
 8003b0e:	bd80      	pop	{r7, pc}
 8003b10:	40021000 	.word	0x40021000
 8003b14:	0800875c 	.word	0x0800875c

08003b18 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003b18:	b580      	push	{r7, lr}
 8003b1a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8003b1c:	f7ff ffde 	bl	8003adc <HAL_RCC_GetHCLKFreq>
 8003b20:	4602      	mov	r2, r0
 8003b22:	4b05      	ldr	r3, [pc, #20]	@ (8003b38 <HAL_RCC_GetPCLK2Freq+0x20>)
 8003b24:	685b      	ldr	r3, [r3, #4]
 8003b26:	0adb      	lsrs	r3, r3, #11
 8003b28:	f003 0307 	and.w	r3, r3, #7
 8003b2c:	4903      	ldr	r1, [pc, #12]	@ (8003b3c <HAL_RCC_GetPCLK2Freq+0x24>)
 8003b2e:	5ccb      	ldrb	r3, [r1, r3]
 8003b30:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003b34:	4618      	mov	r0, r3
 8003b36:	bd80      	pop	{r7, pc}
 8003b38:	40021000 	.word	0x40021000
 8003b3c:	0800875c 	.word	0x0800875c

08003b40 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8003b40:	b480      	push	{r7}
 8003b42:	b085      	sub	sp, #20
 8003b44:	af00      	add	r7, sp, #0
 8003b46:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8003b48:	4b0a      	ldr	r3, [pc, #40]	@ (8003b74 <RCC_Delay+0x34>)
 8003b4a:	681b      	ldr	r3, [r3, #0]
 8003b4c:	4a0a      	ldr	r2, [pc, #40]	@ (8003b78 <RCC_Delay+0x38>)
 8003b4e:	fba2 2303 	umull	r2, r3, r2, r3
 8003b52:	0a5b      	lsrs	r3, r3, #9
 8003b54:	687a      	ldr	r2, [r7, #4]
 8003b56:	fb02 f303 	mul.w	r3, r2, r3
 8003b5a:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8003b5c:	bf00      	nop
  }
  while (Delay --);
 8003b5e:	68fb      	ldr	r3, [r7, #12]
 8003b60:	1e5a      	subs	r2, r3, #1
 8003b62:	60fa      	str	r2, [r7, #12]
 8003b64:	2b00      	cmp	r3, #0
 8003b66:	d1f9      	bne.n	8003b5c <RCC_Delay+0x1c>
}
 8003b68:	bf00      	nop
 8003b6a:	bf00      	nop
 8003b6c:	3714      	adds	r7, #20
 8003b6e:	46bd      	mov	sp, r7
 8003b70:	bc80      	pop	{r7}
 8003b72:	4770      	bx	lr
 8003b74:	20000000 	.word	0x20000000
 8003b78:	10624dd3 	.word	0x10624dd3

08003b7c <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003b7c:	b580      	push	{r7, lr}
 8003b7e:	b086      	sub	sp, #24
 8003b80:	af00      	add	r7, sp, #0
 8003b82:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 8003b84:	2300      	movs	r3, #0
 8003b86:	613b      	str	r3, [r7, #16]
 8003b88:	2300      	movs	r3, #0
 8003b8a:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8003b8c:	687b      	ldr	r3, [r7, #4]
 8003b8e:	681b      	ldr	r3, [r3, #0]
 8003b90:	f003 0301 	and.w	r3, r3, #1
 8003b94:	2b00      	cmp	r3, #0
 8003b96:	d07d      	beq.n	8003c94 <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    FlagStatus pwrclkchanged = RESET;
 8003b98:	2300      	movs	r3, #0
 8003b9a:	75fb      	strb	r3, [r7, #23]
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003b9c:	4b4f      	ldr	r3, [pc, #316]	@ (8003cdc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003b9e:	69db      	ldr	r3, [r3, #28]
 8003ba0:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003ba4:	2b00      	cmp	r3, #0
 8003ba6:	d10d      	bne.n	8003bc4 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003ba8:	4b4c      	ldr	r3, [pc, #304]	@ (8003cdc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003baa:	69db      	ldr	r3, [r3, #28]
 8003bac:	4a4b      	ldr	r2, [pc, #300]	@ (8003cdc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003bae:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003bb2:	61d3      	str	r3, [r2, #28]
 8003bb4:	4b49      	ldr	r3, [pc, #292]	@ (8003cdc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003bb6:	69db      	ldr	r3, [r3, #28]
 8003bb8:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003bbc:	60bb      	str	r3, [r7, #8]
 8003bbe:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003bc0:	2301      	movs	r3, #1
 8003bc2:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003bc4:	4b46      	ldr	r3, [pc, #280]	@ (8003ce0 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003bc6:	681b      	ldr	r3, [r3, #0]
 8003bc8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003bcc:	2b00      	cmp	r3, #0
 8003bce:	d118      	bne.n	8003c02 <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003bd0:	4b43      	ldr	r3, [pc, #268]	@ (8003ce0 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003bd2:	681b      	ldr	r3, [r3, #0]
 8003bd4:	4a42      	ldr	r2, [pc, #264]	@ (8003ce0 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003bd6:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003bda:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003bdc:	f7fe f834 	bl	8001c48 <HAL_GetTick>
 8003be0:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003be2:	e008      	b.n	8003bf6 <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003be4:	f7fe f830 	bl	8001c48 <HAL_GetTick>
 8003be8:	4602      	mov	r2, r0
 8003bea:	693b      	ldr	r3, [r7, #16]
 8003bec:	1ad3      	subs	r3, r2, r3
 8003bee:	2b64      	cmp	r3, #100	@ 0x64
 8003bf0:	d901      	bls.n	8003bf6 <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 8003bf2:	2303      	movs	r3, #3
 8003bf4:	e06d      	b.n	8003cd2 <HAL_RCCEx_PeriphCLKConfig+0x156>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003bf6:	4b3a      	ldr	r3, [pc, #232]	@ (8003ce0 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003bf8:	681b      	ldr	r3, [r3, #0]
 8003bfa:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003bfe:	2b00      	cmp	r3, #0
 8003c00:	d0f0      	beq.n	8003be4 <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8003c02:	4b36      	ldr	r3, [pc, #216]	@ (8003cdc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003c04:	6a1b      	ldr	r3, [r3, #32]
 8003c06:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003c0a:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8003c0c:	68fb      	ldr	r3, [r7, #12]
 8003c0e:	2b00      	cmp	r3, #0
 8003c10:	d02e      	beq.n	8003c70 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8003c12:	687b      	ldr	r3, [r7, #4]
 8003c14:	685b      	ldr	r3, [r3, #4]
 8003c16:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003c1a:	68fa      	ldr	r2, [r7, #12]
 8003c1c:	429a      	cmp	r2, r3
 8003c1e:	d027      	beq.n	8003c70 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8003c20:	4b2e      	ldr	r3, [pc, #184]	@ (8003cdc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003c22:	6a1b      	ldr	r3, [r3, #32]
 8003c24:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003c28:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8003c2a:	4b2e      	ldr	r3, [pc, #184]	@ (8003ce4 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8003c2c:	2201      	movs	r2, #1
 8003c2e:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8003c30:	4b2c      	ldr	r3, [pc, #176]	@ (8003ce4 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8003c32:	2200      	movs	r2, #0
 8003c34:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8003c36:	4a29      	ldr	r2, [pc, #164]	@ (8003cdc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003c38:	68fb      	ldr	r3, [r7, #12]
 8003c3a:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8003c3c:	68fb      	ldr	r3, [r7, #12]
 8003c3e:	f003 0301 	and.w	r3, r3, #1
 8003c42:	2b00      	cmp	r3, #0
 8003c44:	d014      	beq.n	8003c70 <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003c46:	f7fd ffff 	bl	8001c48 <HAL_GetTick>
 8003c4a:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003c4c:	e00a      	b.n	8003c64 <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003c4e:	f7fd fffb 	bl	8001c48 <HAL_GetTick>
 8003c52:	4602      	mov	r2, r0
 8003c54:	693b      	ldr	r3, [r7, #16]
 8003c56:	1ad3      	subs	r3, r2, r3
 8003c58:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003c5c:	4293      	cmp	r3, r2
 8003c5e:	d901      	bls.n	8003c64 <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 8003c60:	2303      	movs	r3, #3
 8003c62:	e036      	b.n	8003cd2 <HAL_RCCEx_PeriphCLKConfig+0x156>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003c64:	4b1d      	ldr	r3, [pc, #116]	@ (8003cdc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003c66:	6a1b      	ldr	r3, [r3, #32]
 8003c68:	f003 0302 	and.w	r3, r3, #2
 8003c6c:	2b00      	cmp	r3, #0
 8003c6e:	d0ee      	beq.n	8003c4e <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003c70:	4b1a      	ldr	r3, [pc, #104]	@ (8003cdc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003c72:	6a1b      	ldr	r3, [r3, #32]
 8003c74:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8003c78:	687b      	ldr	r3, [r7, #4]
 8003c7a:	685b      	ldr	r3, [r3, #4]
 8003c7c:	4917      	ldr	r1, [pc, #92]	@ (8003cdc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003c7e:	4313      	orrs	r3, r2
 8003c80:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8003c82:	7dfb      	ldrb	r3, [r7, #23]
 8003c84:	2b01      	cmp	r3, #1
 8003c86:	d105      	bne.n	8003c94 <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003c88:	4b14      	ldr	r3, [pc, #80]	@ (8003cdc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003c8a:	69db      	ldr	r3, [r3, #28]
 8003c8c:	4a13      	ldr	r2, [pc, #76]	@ (8003cdc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003c8e:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8003c92:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8003c94:	687b      	ldr	r3, [r7, #4]
 8003c96:	681b      	ldr	r3, [r3, #0]
 8003c98:	f003 0302 	and.w	r3, r3, #2
 8003c9c:	2b00      	cmp	r3, #0
 8003c9e:	d008      	beq.n	8003cb2 <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8003ca0:	4b0e      	ldr	r3, [pc, #56]	@ (8003cdc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003ca2:	685b      	ldr	r3, [r3, #4]
 8003ca4:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8003ca8:	687b      	ldr	r3, [r7, #4]
 8003caa:	689b      	ldr	r3, [r3, #8]
 8003cac:	490b      	ldr	r1, [pc, #44]	@ (8003cdc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003cae:	4313      	orrs	r3, r2
 8003cb0:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8003cb2:	687b      	ldr	r3, [r7, #4]
 8003cb4:	681b      	ldr	r3, [r3, #0]
 8003cb6:	f003 0310 	and.w	r3, r3, #16
 8003cba:	2b00      	cmp	r3, #0
 8003cbc:	d008      	beq.n	8003cd0 <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8003cbe:	4b07      	ldr	r3, [pc, #28]	@ (8003cdc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003cc0:	685b      	ldr	r3, [r3, #4]
 8003cc2:	f423 0280 	bic.w	r2, r3, #4194304	@ 0x400000
 8003cc6:	687b      	ldr	r3, [r7, #4]
 8003cc8:	68db      	ldr	r3, [r3, #12]
 8003cca:	4904      	ldr	r1, [pc, #16]	@ (8003cdc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003ccc:	4313      	orrs	r3, r2
 8003cce:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 8003cd0:	2300      	movs	r3, #0
}
 8003cd2:	4618      	mov	r0, r3
 8003cd4:	3718      	adds	r7, #24
 8003cd6:	46bd      	mov	sp, r7
 8003cd8:	bd80      	pop	{r7, pc}
 8003cda:	bf00      	nop
 8003cdc:	40021000 	.word	0x40021000
 8003ce0:	40007000 	.word	0x40007000
 8003ce4:	42420440 	.word	0x42420440

08003ce8 <HAL_RCCEx_GetPeriphCLKFreq>:
  *            @arg @ref RCC_PERIPHCLK_USB  USB peripheral clock
  @endif
  * @retval Frequency in Hz (0: means that no available frequency for the peripheral)
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 8003ce8:	b580      	push	{r7, lr}
 8003cea:	b088      	sub	sp, #32
 8003cec:	af00      	add	r7, sp, #0
 8003cee:	6078      	str	r0, [r7, #4]
#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6) || \
    defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)
  static const uint8_t aPLLMULFactorTable[16U] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
  static const uint8_t aPredivFactorTable[2U] = {1, 2};

  uint32_t prediv1 = 0U, pllclk = 0U, pllmul = 0U;
 8003cf0:	2300      	movs	r3, #0
 8003cf2:	617b      	str	r3, [r7, #20]
 8003cf4:	2300      	movs	r3, #0
 8003cf6:	61fb      	str	r3, [r7, #28]
 8003cf8:	2300      	movs	r3, #0
 8003cfa:	613b      	str	r3, [r7, #16]
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG */
  uint32_t temp_reg = 0U, frequency = 0U;
 8003cfc:	2300      	movs	r3, #0
 8003cfe:	60fb      	str	r3, [r7, #12]
 8003d00:	2300      	movs	r3, #0
 8003d02:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClk));

  switch (PeriphClk)
 8003d04:	687b      	ldr	r3, [r7, #4]
 8003d06:	2b10      	cmp	r3, #16
 8003d08:	d00a      	beq.n	8003d20 <HAL_RCCEx_GetPeriphCLKFreq+0x38>
 8003d0a:	687b      	ldr	r3, [r7, #4]
 8003d0c:	2b10      	cmp	r3, #16
 8003d0e:	f200 808a 	bhi.w	8003e26 <HAL_RCCEx_GetPeriphCLKFreq+0x13e>
 8003d12:	687b      	ldr	r3, [r7, #4]
 8003d14:	2b01      	cmp	r3, #1
 8003d16:	d045      	beq.n	8003da4 <HAL_RCCEx_GetPeriphCLKFreq+0xbc>
 8003d18:	687b      	ldr	r3, [r7, #4]
 8003d1a:	2b02      	cmp	r3, #2
 8003d1c:	d075      	beq.n	8003e0a <HAL_RCCEx_GetPeriphCLKFreq+0x122>
      frequency = HAL_RCC_GetPCLK2Freq() / (((__HAL_RCC_GET_ADC_SOURCE() >> RCC_CFGR_ADCPRE_Pos) + 1) * 2);
      break;
    }
    default:
    {
      break;
 8003d1e:	e082      	b.n	8003e26 <HAL_RCCEx_GetPeriphCLKFreq+0x13e>
      temp_reg = RCC->CFGR;
 8003d20:	4b46      	ldr	r3, [pc, #280]	@ (8003e3c <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 8003d22:	685b      	ldr	r3, [r3, #4]
 8003d24:	60fb      	str	r3, [r7, #12]
      if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLON))
 8003d26:	4b45      	ldr	r3, [pc, #276]	@ (8003e3c <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 8003d28:	681b      	ldr	r3, [r3, #0]
 8003d2a:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8003d2e:	2b00      	cmp	r3, #0
 8003d30:	d07b      	beq.n	8003e2a <HAL_RCCEx_GetPeriphCLKFreq+0x142>
        pllmul = aPLLMULFactorTable[(uint32_t)(temp_reg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8003d32:	68fb      	ldr	r3, [r7, #12]
 8003d34:	0c9b      	lsrs	r3, r3, #18
 8003d36:	f003 030f 	and.w	r3, r3, #15
 8003d3a:	4a41      	ldr	r2, [pc, #260]	@ (8003e40 <HAL_RCCEx_GetPeriphCLKFreq+0x158>)
 8003d3c:	5cd3      	ldrb	r3, [r2, r3]
 8003d3e:	613b      	str	r3, [r7, #16]
        if ((temp_reg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8003d40:	68fb      	ldr	r3, [r7, #12]
 8003d42:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003d46:	2b00      	cmp	r3, #0
 8003d48:	d015      	beq.n	8003d76 <HAL_RCCEx_GetPeriphCLKFreq+0x8e>
          prediv1 = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8003d4a:	4b3c      	ldr	r3, [pc, #240]	@ (8003e3c <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 8003d4c:	685b      	ldr	r3, [r3, #4]
 8003d4e:	0c5b      	lsrs	r3, r3, #17
 8003d50:	f003 0301 	and.w	r3, r3, #1
 8003d54:	4a3b      	ldr	r2, [pc, #236]	@ (8003e44 <HAL_RCCEx_GetPeriphCLKFreq+0x15c>)
 8003d56:	5cd3      	ldrb	r3, [r2, r3]
 8003d58:	617b      	str	r3, [r7, #20]
          if ((temp_reg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8003d5a:	68fb      	ldr	r3, [r7, #12]
 8003d5c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003d60:	2b00      	cmp	r3, #0
 8003d62:	d00d      	beq.n	8003d80 <HAL_RCCEx_GetPeriphCLKFreq+0x98>
            pllclk = (uint32_t)((HSE_VALUE / prediv1) * pllmul);
 8003d64:	4a38      	ldr	r2, [pc, #224]	@ (8003e48 <HAL_RCCEx_GetPeriphCLKFreq+0x160>)
 8003d66:	697b      	ldr	r3, [r7, #20]
 8003d68:	fbb2 f2f3 	udiv	r2, r2, r3
 8003d6c:	693b      	ldr	r3, [r7, #16]
 8003d6e:	fb02 f303 	mul.w	r3, r2, r3
 8003d72:	61fb      	str	r3, [r7, #28]
 8003d74:	e004      	b.n	8003d80 <HAL_RCCEx_GetPeriphCLKFreq+0x98>
          pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8003d76:	693b      	ldr	r3, [r7, #16]
 8003d78:	4a34      	ldr	r2, [pc, #208]	@ (8003e4c <HAL_RCCEx_GetPeriphCLKFreq+0x164>)
 8003d7a:	fb02 f303 	mul.w	r3, r2, r3
 8003d7e:	61fb      	str	r3, [r7, #28]
        if (__HAL_RCC_GET_USB_SOURCE() == RCC_USBCLKSOURCE_PLL)
 8003d80:	4b2e      	ldr	r3, [pc, #184]	@ (8003e3c <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 8003d82:	685b      	ldr	r3, [r3, #4]
 8003d84:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003d88:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8003d8c:	d102      	bne.n	8003d94 <HAL_RCCEx_GetPeriphCLKFreq+0xac>
          frequency = pllclk;
 8003d8e:	69fb      	ldr	r3, [r7, #28]
 8003d90:	61bb      	str	r3, [r7, #24]
      break;
 8003d92:	e04a      	b.n	8003e2a <HAL_RCCEx_GetPeriphCLKFreq+0x142>
          frequency = (pllclk * 2) / 3;
 8003d94:	69fb      	ldr	r3, [r7, #28]
 8003d96:	005b      	lsls	r3, r3, #1
 8003d98:	4a2d      	ldr	r2, [pc, #180]	@ (8003e50 <HAL_RCCEx_GetPeriphCLKFreq+0x168>)
 8003d9a:	fba2 2303 	umull	r2, r3, r2, r3
 8003d9e:	085b      	lsrs	r3, r3, #1
 8003da0:	61bb      	str	r3, [r7, #24]
      break;
 8003da2:	e042      	b.n	8003e2a <HAL_RCCEx_GetPeriphCLKFreq+0x142>
      temp_reg = RCC->BDCR;
 8003da4:	4b25      	ldr	r3, [pc, #148]	@ (8003e3c <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 8003da6:	6a1b      	ldr	r3, [r3, #32]
 8003da8:	60fb      	str	r3, [r7, #12]
      if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSE) && (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSERDY)))
 8003daa:	68fb      	ldr	r3, [r7, #12]
 8003dac:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003db0:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003db4:	d108      	bne.n	8003dc8 <HAL_RCCEx_GetPeriphCLKFreq+0xe0>
 8003db6:	68fb      	ldr	r3, [r7, #12]
 8003db8:	f003 0302 	and.w	r3, r3, #2
 8003dbc:	2b00      	cmp	r3, #0
 8003dbe:	d003      	beq.n	8003dc8 <HAL_RCCEx_GetPeriphCLKFreq+0xe0>
        frequency = LSE_VALUE;
 8003dc0:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8003dc4:	61bb      	str	r3, [r7, #24]
 8003dc6:	e01f      	b.n	8003e08 <HAL_RCCEx_GetPeriphCLKFreq+0x120>
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSI) && (HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY)))
 8003dc8:	68fb      	ldr	r3, [r7, #12]
 8003dca:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003dce:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8003dd2:	d109      	bne.n	8003de8 <HAL_RCCEx_GetPeriphCLKFreq+0x100>
 8003dd4:	4b19      	ldr	r3, [pc, #100]	@ (8003e3c <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 8003dd6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003dd8:	f003 0302 	and.w	r3, r3, #2
 8003ddc:	2b00      	cmp	r3, #0
 8003dde:	d003      	beq.n	8003de8 <HAL_RCCEx_GetPeriphCLKFreq+0x100>
        frequency = LSI_VALUE;
 8003de0:	f649 4340 	movw	r3, #40000	@ 0x9c40
 8003de4:	61bb      	str	r3, [r7, #24]
 8003de6:	e00f      	b.n	8003e08 <HAL_RCCEx_GetPeriphCLKFreq+0x120>
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_HSE_DIV128) && (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)))
 8003de8:	68fb      	ldr	r3, [r7, #12]
 8003dea:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003dee:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8003df2:	d11c      	bne.n	8003e2e <HAL_RCCEx_GetPeriphCLKFreq+0x146>
 8003df4:	4b11      	ldr	r3, [pc, #68]	@ (8003e3c <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 8003df6:	681b      	ldr	r3, [r3, #0]
 8003df8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003dfc:	2b00      	cmp	r3, #0
 8003dfe:	d016      	beq.n	8003e2e <HAL_RCCEx_GetPeriphCLKFreq+0x146>
        frequency = HSE_VALUE / 128U;
 8003e00:	f24f 4324 	movw	r3, #62500	@ 0xf424
 8003e04:	61bb      	str	r3, [r7, #24]
      break;
 8003e06:	e012      	b.n	8003e2e <HAL_RCCEx_GetPeriphCLKFreq+0x146>
 8003e08:	e011      	b.n	8003e2e <HAL_RCCEx_GetPeriphCLKFreq+0x146>
      frequency = HAL_RCC_GetPCLK2Freq() / (((__HAL_RCC_GET_ADC_SOURCE() >> RCC_CFGR_ADCPRE_Pos) + 1) * 2);
 8003e0a:	f7ff fe85 	bl	8003b18 <HAL_RCC_GetPCLK2Freq>
 8003e0e:	4602      	mov	r2, r0
 8003e10:	4b0a      	ldr	r3, [pc, #40]	@ (8003e3c <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 8003e12:	685b      	ldr	r3, [r3, #4]
 8003e14:	0b9b      	lsrs	r3, r3, #14
 8003e16:	f003 0303 	and.w	r3, r3, #3
 8003e1a:	3301      	adds	r3, #1
 8003e1c:	005b      	lsls	r3, r3, #1
 8003e1e:	fbb2 f3f3 	udiv	r3, r2, r3
 8003e22:	61bb      	str	r3, [r7, #24]
      break;
 8003e24:	e004      	b.n	8003e30 <HAL_RCCEx_GetPeriphCLKFreq+0x148>
      break;
 8003e26:	bf00      	nop
 8003e28:	e002      	b.n	8003e30 <HAL_RCCEx_GetPeriphCLKFreq+0x148>
      break;
 8003e2a:	bf00      	nop
 8003e2c:	e000      	b.n	8003e30 <HAL_RCCEx_GetPeriphCLKFreq+0x148>
      break;
 8003e2e:	bf00      	nop
    }
  }
  return (frequency);
 8003e30:	69bb      	ldr	r3, [r7, #24]
}
 8003e32:	4618      	mov	r0, r3
 8003e34:	3720      	adds	r7, #32
 8003e36:	46bd      	mov	sp, r7
 8003e38:	bd80      	pop	{r7, pc}
 8003e3a:	bf00      	nop
 8003e3c:	40021000 	.word	0x40021000
 8003e40:	08008778 	.word	0x08008778
 8003e44:	08008788 	.word	0x08008788
 8003e48:	007a1200 	.word	0x007a1200
 8003e4c:	003d0900 	.word	0x003d0900
 8003e50:	aaaaaaab 	.word	0xaaaaaaab

08003e54 <__cvt>:
 8003e54:	2b00      	cmp	r3, #0
 8003e56:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003e5a:	461d      	mov	r5, r3
 8003e5c:	bfbb      	ittet	lt
 8003e5e:	f103 4300 	addlt.w	r3, r3, #2147483648	@ 0x80000000
 8003e62:	461d      	movlt	r5, r3
 8003e64:	2300      	movge	r3, #0
 8003e66:	232d      	movlt	r3, #45	@ 0x2d
 8003e68:	b088      	sub	sp, #32
 8003e6a:	4614      	mov	r4, r2
 8003e6c:	bfb8      	it	lt
 8003e6e:	4614      	movlt	r4, r2
 8003e70:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 8003e72:	9e10      	ldr	r6, [sp, #64]	@ 0x40
 8003e74:	7013      	strb	r3, [r2, #0]
 8003e76:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 8003e78:	f8dd a04c 	ldr.w	sl, [sp, #76]	@ 0x4c
 8003e7c:	f023 0820 	bic.w	r8, r3, #32
 8003e80:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8003e84:	d005      	beq.n	8003e92 <__cvt+0x3e>
 8003e86:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 8003e8a:	d100      	bne.n	8003e8e <__cvt+0x3a>
 8003e8c:	3601      	adds	r6, #1
 8003e8e:	2302      	movs	r3, #2
 8003e90:	e000      	b.n	8003e94 <__cvt+0x40>
 8003e92:	2303      	movs	r3, #3
 8003e94:	aa07      	add	r2, sp, #28
 8003e96:	9204      	str	r2, [sp, #16]
 8003e98:	aa06      	add	r2, sp, #24
 8003e9a:	e9cd a202 	strd	sl, r2, [sp, #8]
 8003e9e:	e9cd 3600 	strd	r3, r6, [sp]
 8003ea2:	4622      	mov	r2, r4
 8003ea4:	462b      	mov	r3, r5
 8003ea6:	f001 f88b 	bl	8004fc0 <_dtoa_r>
 8003eaa:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 8003eae:	4607      	mov	r7, r0
 8003eb0:	d119      	bne.n	8003ee6 <__cvt+0x92>
 8003eb2:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 8003eb4:	07db      	lsls	r3, r3, #31
 8003eb6:	d50e      	bpl.n	8003ed6 <__cvt+0x82>
 8003eb8:	eb00 0906 	add.w	r9, r0, r6
 8003ebc:	2200      	movs	r2, #0
 8003ebe:	2300      	movs	r3, #0
 8003ec0:	4620      	mov	r0, r4
 8003ec2:	4629      	mov	r1, r5
 8003ec4:	f7fc fd70 	bl	80009a8 <__aeabi_dcmpeq>
 8003ec8:	b108      	cbz	r0, 8003ece <__cvt+0x7a>
 8003eca:	f8cd 901c 	str.w	r9, [sp, #28]
 8003ece:	2230      	movs	r2, #48	@ 0x30
 8003ed0:	9b07      	ldr	r3, [sp, #28]
 8003ed2:	454b      	cmp	r3, r9
 8003ed4:	d31e      	bcc.n	8003f14 <__cvt+0xc0>
 8003ed6:	4638      	mov	r0, r7
 8003ed8:	9b07      	ldr	r3, [sp, #28]
 8003eda:	9a15      	ldr	r2, [sp, #84]	@ 0x54
 8003edc:	1bdb      	subs	r3, r3, r7
 8003ede:	6013      	str	r3, [r2, #0]
 8003ee0:	b008      	add	sp, #32
 8003ee2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003ee6:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8003eea:	eb00 0906 	add.w	r9, r0, r6
 8003eee:	d1e5      	bne.n	8003ebc <__cvt+0x68>
 8003ef0:	7803      	ldrb	r3, [r0, #0]
 8003ef2:	2b30      	cmp	r3, #48	@ 0x30
 8003ef4:	d10a      	bne.n	8003f0c <__cvt+0xb8>
 8003ef6:	2200      	movs	r2, #0
 8003ef8:	2300      	movs	r3, #0
 8003efa:	4620      	mov	r0, r4
 8003efc:	4629      	mov	r1, r5
 8003efe:	f7fc fd53 	bl	80009a8 <__aeabi_dcmpeq>
 8003f02:	b918      	cbnz	r0, 8003f0c <__cvt+0xb8>
 8003f04:	f1c6 0601 	rsb	r6, r6, #1
 8003f08:	f8ca 6000 	str.w	r6, [sl]
 8003f0c:	f8da 3000 	ldr.w	r3, [sl]
 8003f10:	4499      	add	r9, r3
 8003f12:	e7d3      	b.n	8003ebc <__cvt+0x68>
 8003f14:	1c59      	adds	r1, r3, #1
 8003f16:	9107      	str	r1, [sp, #28]
 8003f18:	701a      	strb	r2, [r3, #0]
 8003f1a:	e7d9      	b.n	8003ed0 <__cvt+0x7c>

08003f1c <__exponent>:
 8003f1c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8003f1e:	2900      	cmp	r1, #0
 8003f20:	bfb6      	itet	lt
 8003f22:	232d      	movlt	r3, #45	@ 0x2d
 8003f24:	232b      	movge	r3, #43	@ 0x2b
 8003f26:	4249      	neglt	r1, r1
 8003f28:	2909      	cmp	r1, #9
 8003f2a:	7002      	strb	r2, [r0, #0]
 8003f2c:	7043      	strb	r3, [r0, #1]
 8003f2e:	dd29      	ble.n	8003f84 <__exponent+0x68>
 8003f30:	f10d 0307 	add.w	r3, sp, #7
 8003f34:	461d      	mov	r5, r3
 8003f36:	270a      	movs	r7, #10
 8003f38:	fbb1 f6f7 	udiv	r6, r1, r7
 8003f3c:	461a      	mov	r2, r3
 8003f3e:	fb07 1416 	mls	r4, r7, r6, r1
 8003f42:	3430      	adds	r4, #48	@ 0x30
 8003f44:	f802 4c01 	strb.w	r4, [r2, #-1]
 8003f48:	460c      	mov	r4, r1
 8003f4a:	2c63      	cmp	r4, #99	@ 0x63
 8003f4c:	4631      	mov	r1, r6
 8003f4e:	f103 33ff 	add.w	r3, r3, #4294967295
 8003f52:	dcf1      	bgt.n	8003f38 <__exponent+0x1c>
 8003f54:	3130      	adds	r1, #48	@ 0x30
 8003f56:	1e94      	subs	r4, r2, #2
 8003f58:	f803 1c01 	strb.w	r1, [r3, #-1]
 8003f5c:	4623      	mov	r3, r4
 8003f5e:	1c41      	adds	r1, r0, #1
 8003f60:	42ab      	cmp	r3, r5
 8003f62:	d30a      	bcc.n	8003f7a <__exponent+0x5e>
 8003f64:	f10d 0309 	add.w	r3, sp, #9
 8003f68:	1a9b      	subs	r3, r3, r2
 8003f6a:	42ac      	cmp	r4, r5
 8003f6c:	bf88      	it	hi
 8003f6e:	2300      	movhi	r3, #0
 8003f70:	3302      	adds	r3, #2
 8003f72:	4403      	add	r3, r0
 8003f74:	1a18      	subs	r0, r3, r0
 8003f76:	b003      	add	sp, #12
 8003f78:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003f7a:	f813 6b01 	ldrb.w	r6, [r3], #1
 8003f7e:	f801 6f01 	strb.w	r6, [r1, #1]!
 8003f82:	e7ed      	b.n	8003f60 <__exponent+0x44>
 8003f84:	2330      	movs	r3, #48	@ 0x30
 8003f86:	3130      	adds	r1, #48	@ 0x30
 8003f88:	7083      	strb	r3, [r0, #2]
 8003f8a:	70c1      	strb	r1, [r0, #3]
 8003f8c:	1d03      	adds	r3, r0, #4
 8003f8e:	e7f1      	b.n	8003f74 <__exponent+0x58>

08003f90 <_printf_float>:
 8003f90:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003f94:	b091      	sub	sp, #68	@ 0x44
 8003f96:	460c      	mov	r4, r1
 8003f98:	f8dd 8068 	ldr.w	r8, [sp, #104]	@ 0x68
 8003f9c:	4616      	mov	r6, r2
 8003f9e:	461f      	mov	r7, r3
 8003fa0:	4605      	mov	r5, r0
 8003fa2:	f000 feeb 	bl	8004d7c <_localeconv_r>
 8003fa6:	6803      	ldr	r3, [r0, #0]
 8003fa8:	4618      	mov	r0, r3
 8003faa:	9308      	str	r3, [sp, #32]
 8003fac:	f7fc f8d0 	bl	8000150 <strlen>
 8003fb0:	2300      	movs	r3, #0
 8003fb2:	930e      	str	r3, [sp, #56]	@ 0x38
 8003fb4:	f8d8 3000 	ldr.w	r3, [r8]
 8003fb8:	9009      	str	r0, [sp, #36]	@ 0x24
 8003fba:	3307      	adds	r3, #7
 8003fbc:	f023 0307 	bic.w	r3, r3, #7
 8003fc0:	f103 0208 	add.w	r2, r3, #8
 8003fc4:	f894 a018 	ldrb.w	sl, [r4, #24]
 8003fc8:	f8d4 b000 	ldr.w	fp, [r4]
 8003fcc:	f8c8 2000 	str.w	r2, [r8]
 8003fd0:	e9d3 8900 	ldrd	r8, r9, [r3]
 8003fd4:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 8003fd8:	930b      	str	r3, [sp, #44]	@ 0x2c
 8003fda:	f8cd 8028 	str.w	r8, [sp, #40]	@ 0x28
 8003fde:	f04f 32ff 	mov.w	r2, #4294967295
 8003fe2:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 8003fe6:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 8003fea:	4b9c      	ldr	r3, [pc, #624]	@ (800425c <_printf_float+0x2cc>)
 8003fec:	f7fc fd0e 	bl	8000a0c <__aeabi_dcmpun>
 8003ff0:	bb70      	cbnz	r0, 8004050 <_printf_float+0xc0>
 8003ff2:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 8003ff6:	f04f 32ff 	mov.w	r2, #4294967295
 8003ffa:	4b98      	ldr	r3, [pc, #608]	@ (800425c <_printf_float+0x2cc>)
 8003ffc:	f7fc fce8 	bl	80009d0 <__aeabi_dcmple>
 8004000:	bb30      	cbnz	r0, 8004050 <_printf_float+0xc0>
 8004002:	2200      	movs	r2, #0
 8004004:	2300      	movs	r3, #0
 8004006:	4640      	mov	r0, r8
 8004008:	4649      	mov	r1, r9
 800400a:	f7fc fcd7 	bl	80009bc <__aeabi_dcmplt>
 800400e:	b110      	cbz	r0, 8004016 <_printf_float+0x86>
 8004010:	232d      	movs	r3, #45	@ 0x2d
 8004012:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8004016:	4a92      	ldr	r2, [pc, #584]	@ (8004260 <_printf_float+0x2d0>)
 8004018:	4b92      	ldr	r3, [pc, #584]	@ (8004264 <_printf_float+0x2d4>)
 800401a:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 800401e:	bf8c      	ite	hi
 8004020:	4690      	movhi	r8, r2
 8004022:	4698      	movls	r8, r3
 8004024:	2303      	movs	r3, #3
 8004026:	f04f 0900 	mov.w	r9, #0
 800402a:	6123      	str	r3, [r4, #16]
 800402c:	f02b 0304 	bic.w	r3, fp, #4
 8004030:	6023      	str	r3, [r4, #0]
 8004032:	4633      	mov	r3, r6
 8004034:	4621      	mov	r1, r4
 8004036:	4628      	mov	r0, r5
 8004038:	9700      	str	r7, [sp, #0]
 800403a:	aa0f      	add	r2, sp, #60	@ 0x3c
 800403c:	f000 f9d4 	bl	80043e8 <_printf_common>
 8004040:	3001      	adds	r0, #1
 8004042:	f040 8090 	bne.w	8004166 <_printf_float+0x1d6>
 8004046:	f04f 30ff 	mov.w	r0, #4294967295
 800404a:	b011      	add	sp, #68	@ 0x44
 800404c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004050:	4642      	mov	r2, r8
 8004052:	464b      	mov	r3, r9
 8004054:	4640      	mov	r0, r8
 8004056:	4649      	mov	r1, r9
 8004058:	f7fc fcd8 	bl	8000a0c <__aeabi_dcmpun>
 800405c:	b148      	cbz	r0, 8004072 <_printf_float+0xe2>
 800405e:	464b      	mov	r3, r9
 8004060:	2b00      	cmp	r3, #0
 8004062:	bfb8      	it	lt
 8004064:	232d      	movlt	r3, #45	@ 0x2d
 8004066:	4a80      	ldr	r2, [pc, #512]	@ (8004268 <_printf_float+0x2d8>)
 8004068:	bfb8      	it	lt
 800406a:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 800406e:	4b7f      	ldr	r3, [pc, #508]	@ (800426c <_printf_float+0x2dc>)
 8004070:	e7d3      	b.n	800401a <_printf_float+0x8a>
 8004072:	6863      	ldr	r3, [r4, #4]
 8004074:	f00a 01df 	and.w	r1, sl, #223	@ 0xdf
 8004078:	1c5a      	adds	r2, r3, #1
 800407a:	d13f      	bne.n	80040fc <_printf_float+0x16c>
 800407c:	2306      	movs	r3, #6
 800407e:	6063      	str	r3, [r4, #4]
 8004080:	2200      	movs	r2, #0
 8004082:	f44b 6380 	orr.w	r3, fp, #1024	@ 0x400
 8004086:	6023      	str	r3, [r4, #0]
 8004088:	9206      	str	r2, [sp, #24]
 800408a:	aa0e      	add	r2, sp, #56	@ 0x38
 800408c:	e9cd a204 	strd	sl, r2, [sp, #16]
 8004090:	aa0d      	add	r2, sp, #52	@ 0x34
 8004092:	9203      	str	r2, [sp, #12]
 8004094:	f10d 0233 	add.w	r2, sp, #51	@ 0x33
 8004098:	e9cd 3201 	strd	r3, r2, [sp, #4]
 800409c:	6863      	ldr	r3, [r4, #4]
 800409e:	4642      	mov	r2, r8
 80040a0:	9300      	str	r3, [sp, #0]
 80040a2:	4628      	mov	r0, r5
 80040a4:	464b      	mov	r3, r9
 80040a6:	910a      	str	r1, [sp, #40]	@ 0x28
 80040a8:	f7ff fed4 	bl	8003e54 <__cvt>
 80040ac:	990a      	ldr	r1, [sp, #40]	@ 0x28
 80040ae:	4680      	mov	r8, r0
 80040b0:	2947      	cmp	r1, #71	@ 0x47
 80040b2:	990d      	ldr	r1, [sp, #52]	@ 0x34
 80040b4:	d128      	bne.n	8004108 <_printf_float+0x178>
 80040b6:	1cc8      	adds	r0, r1, #3
 80040b8:	db02      	blt.n	80040c0 <_printf_float+0x130>
 80040ba:	6863      	ldr	r3, [r4, #4]
 80040bc:	4299      	cmp	r1, r3
 80040be:	dd40      	ble.n	8004142 <_printf_float+0x1b2>
 80040c0:	f1aa 0a02 	sub.w	sl, sl, #2
 80040c4:	fa5f fa8a 	uxtb.w	sl, sl
 80040c8:	4652      	mov	r2, sl
 80040ca:	3901      	subs	r1, #1
 80040cc:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 80040d0:	910d      	str	r1, [sp, #52]	@ 0x34
 80040d2:	f7ff ff23 	bl	8003f1c <__exponent>
 80040d6:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 80040d8:	4681      	mov	r9, r0
 80040da:	1813      	adds	r3, r2, r0
 80040dc:	2a01      	cmp	r2, #1
 80040de:	6123      	str	r3, [r4, #16]
 80040e0:	dc02      	bgt.n	80040e8 <_printf_float+0x158>
 80040e2:	6822      	ldr	r2, [r4, #0]
 80040e4:	07d2      	lsls	r2, r2, #31
 80040e6:	d501      	bpl.n	80040ec <_printf_float+0x15c>
 80040e8:	3301      	adds	r3, #1
 80040ea:	6123      	str	r3, [r4, #16]
 80040ec:	f89d 3033 	ldrb.w	r3, [sp, #51]	@ 0x33
 80040f0:	2b00      	cmp	r3, #0
 80040f2:	d09e      	beq.n	8004032 <_printf_float+0xa2>
 80040f4:	232d      	movs	r3, #45	@ 0x2d
 80040f6:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80040fa:	e79a      	b.n	8004032 <_printf_float+0xa2>
 80040fc:	2947      	cmp	r1, #71	@ 0x47
 80040fe:	d1bf      	bne.n	8004080 <_printf_float+0xf0>
 8004100:	2b00      	cmp	r3, #0
 8004102:	d1bd      	bne.n	8004080 <_printf_float+0xf0>
 8004104:	2301      	movs	r3, #1
 8004106:	e7ba      	b.n	800407e <_printf_float+0xee>
 8004108:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 800410c:	d9dc      	bls.n	80040c8 <_printf_float+0x138>
 800410e:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 8004112:	d118      	bne.n	8004146 <_printf_float+0x1b6>
 8004114:	2900      	cmp	r1, #0
 8004116:	6863      	ldr	r3, [r4, #4]
 8004118:	dd0b      	ble.n	8004132 <_printf_float+0x1a2>
 800411a:	6121      	str	r1, [r4, #16]
 800411c:	b913      	cbnz	r3, 8004124 <_printf_float+0x194>
 800411e:	6822      	ldr	r2, [r4, #0]
 8004120:	07d0      	lsls	r0, r2, #31
 8004122:	d502      	bpl.n	800412a <_printf_float+0x19a>
 8004124:	3301      	adds	r3, #1
 8004126:	440b      	add	r3, r1
 8004128:	6123      	str	r3, [r4, #16]
 800412a:	f04f 0900 	mov.w	r9, #0
 800412e:	65a1      	str	r1, [r4, #88]	@ 0x58
 8004130:	e7dc      	b.n	80040ec <_printf_float+0x15c>
 8004132:	b913      	cbnz	r3, 800413a <_printf_float+0x1aa>
 8004134:	6822      	ldr	r2, [r4, #0]
 8004136:	07d2      	lsls	r2, r2, #31
 8004138:	d501      	bpl.n	800413e <_printf_float+0x1ae>
 800413a:	3302      	adds	r3, #2
 800413c:	e7f4      	b.n	8004128 <_printf_float+0x198>
 800413e:	2301      	movs	r3, #1
 8004140:	e7f2      	b.n	8004128 <_printf_float+0x198>
 8004142:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 8004146:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8004148:	4299      	cmp	r1, r3
 800414a:	db05      	blt.n	8004158 <_printf_float+0x1c8>
 800414c:	6823      	ldr	r3, [r4, #0]
 800414e:	6121      	str	r1, [r4, #16]
 8004150:	07d8      	lsls	r0, r3, #31
 8004152:	d5ea      	bpl.n	800412a <_printf_float+0x19a>
 8004154:	1c4b      	adds	r3, r1, #1
 8004156:	e7e7      	b.n	8004128 <_printf_float+0x198>
 8004158:	2900      	cmp	r1, #0
 800415a:	bfcc      	ite	gt
 800415c:	2201      	movgt	r2, #1
 800415e:	f1c1 0202 	rsble	r2, r1, #2
 8004162:	4413      	add	r3, r2
 8004164:	e7e0      	b.n	8004128 <_printf_float+0x198>
 8004166:	6823      	ldr	r3, [r4, #0]
 8004168:	055a      	lsls	r2, r3, #21
 800416a:	d407      	bmi.n	800417c <_printf_float+0x1ec>
 800416c:	6923      	ldr	r3, [r4, #16]
 800416e:	4642      	mov	r2, r8
 8004170:	4631      	mov	r1, r6
 8004172:	4628      	mov	r0, r5
 8004174:	47b8      	blx	r7
 8004176:	3001      	adds	r0, #1
 8004178:	d12b      	bne.n	80041d2 <_printf_float+0x242>
 800417a:	e764      	b.n	8004046 <_printf_float+0xb6>
 800417c:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 8004180:	f240 80dc 	bls.w	800433c <_printf_float+0x3ac>
 8004184:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 8004188:	2200      	movs	r2, #0
 800418a:	2300      	movs	r3, #0
 800418c:	f7fc fc0c 	bl	80009a8 <__aeabi_dcmpeq>
 8004190:	2800      	cmp	r0, #0
 8004192:	d033      	beq.n	80041fc <_printf_float+0x26c>
 8004194:	2301      	movs	r3, #1
 8004196:	4631      	mov	r1, r6
 8004198:	4628      	mov	r0, r5
 800419a:	4a35      	ldr	r2, [pc, #212]	@ (8004270 <_printf_float+0x2e0>)
 800419c:	47b8      	blx	r7
 800419e:	3001      	adds	r0, #1
 80041a0:	f43f af51 	beq.w	8004046 <_printf_float+0xb6>
 80041a4:	e9dd 380d 	ldrd	r3, r8, [sp, #52]	@ 0x34
 80041a8:	4543      	cmp	r3, r8
 80041aa:	db02      	blt.n	80041b2 <_printf_float+0x222>
 80041ac:	6823      	ldr	r3, [r4, #0]
 80041ae:	07d8      	lsls	r0, r3, #31
 80041b0:	d50f      	bpl.n	80041d2 <_printf_float+0x242>
 80041b2:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 80041b6:	4631      	mov	r1, r6
 80041b8:	4628      	mov	r0, r5
 80041ba:	47b8      	blx	r7
 80041bc:	3001      	adds	r0, #1
 80041be:	f43f af42 	beq.w	8004046 <_printf_float+0xb6>
 80041c2:	f04f 0900 	mov.w	r9, #0
 80041c6:	f108 38ff 	add.w	r8, r8, #4294967295
 80041ca:	f104 0a1a 	add.w	sl, r4, #26
 80041ce:	45c8      	cmp	r8, r9
 80041d0:	dc09      	bgt.n	80041e6 <_printf_float+0x256>
 80041d2:	6823      	ldr	r3, [r4, #0]
 80041d4:	079b      	lsls	r3, r3, #30
 80041d6:	f100 8102 	bmi.w	80043de <_printf_float+0x44e>
 80041da:	68e0      	ldr	r0, [r4, #12]
 80041dc:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80041de:	4298      	cmp	r0, r3
 80041e0:	bfb8      	it	lt
 80041e2:	4618      	movlt	r0, r3
 80041e4:	e731      	b.n	800404a <_printf_float+0xba>
 80041e6:	2301      	movs	r3, #1
 80041e8:	4652      	mov	r2, sl
 80041ea:	4631      	mov	r1, r6
 80041ec:	4628      	mov	r0, r5
 80041ee:	47b8      	blx	r7
 80041f0:	3001      	adds	r0, #1
 80041f2:	f43f af28 	beq.w	8004046 <_printf_float+0xb6>
 80041f6:	f109 0901 	add.w	r9, r9, #1
 80041fa:	e7e8      	b.n	80041ce <_printf_float+0x23e>
 80041fc:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 80041fe:	2b00      	cmp	r3, #0
 8004200:	dc38      	bgt.n	8004274 <_printf_float+0x2e4>
 8004202:	2301      	movs	r3, #1
 8004204:	4631      	mov	r1, r6
 8004206:	4628      	mov	r0, r5
 8004208:	4a19      	ldr	r2, [pc, #100]	@ (8004270 <_printf_float+0x2e0>)
 800420a:	47b8      	blx	r7
 800420c:	3001      	adds	r0, #1
 800420e:	f43f af1a 	beq.w	8004046 <_printf_float+0xb6>
 8004212:	e9dd 390d 	ldrd	r3, r9, [sp, #52]	@ 0x34
 8004216:	ea59 0303 	orrs.w	r3, r9, r3
 800421a:	d102      	bne.n	8004222 <_printf_float+0x292>
 800421c:	6823      	ldr	r3, [r4, #0]
 800421e:	07d9      	lsls	r1, r3, #31
 8004220:	d5d7      	bpl.n	80041d2 <_printf_float+0x242>
 8004222:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8004226:	4631      	mov	r1, r6
 8004228:	4628      	mov	r0, r5
 800422a:	47b8      	blx	r7
 800422c:	3001      	adds	r0, #1
 800422e:	f43f af0a 	beq.w	8004046 <_printf_float+0xb6>
 8004232:	f04f 0a00 	mov.w	sl, #0
 8004236:	f104 0b1a 	add.w	fp, r4, #26
 800423a:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800423c:	425b      	negs	r3, r3
 800423e:	4553      	cmp	r3, sl
 8004240:	dc01      	bgt.n	8004246 <_printf_float+0x2b6>
 8004242:	464b      	mov	r3, r9
 8004244:	e793      	b.n	800416e <_printf_float+0x1de>
 8004246:	2301      	movs	r3, #1
 8004248:	465a      	mov	r2, fp
 800424a:	4631      	mov	r1, r6
 800424c:	4628      	mov	r0, r5
 800424e:	47b8      	blx	r7
 8004250:	3001      	adds	r0, #1
 8004252:	f43f aef8 	beq.w	8004046 <_printf_float+0xb6>
 8004256:	f10a 0a01 	add.w	sl, sl, #1
 800425a:	e7ee      	b.n	800423a <_printf_float+0x2aa>
 800425c:	7fefffff 	.word	0x7fefffff
 8004260:	0800878e 	.word	0x0800878e
 8004264:	0800878a 	.word	0x0800878a
 8004268:	08008796 	.word	0x08008796
 800426c:	08008792 	.word	0x08008792
 8004270:	0800879a 	.word	0x0800879a
 8004274:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8004276:	f8dd a038 	ldr.w	sl, [sp, #56]	@ 0x38
 800427a:	4553      	cmp	r3, sl
 800427c:	bfa8      	it	ge
 800427e:	4653      	movge	r3, sl
 8004280:	2b00      	cmp	r3, #0
 8004282:	4699      	mov	r9, r3
 8004284:	dc36      	bgt.n	80042f4 <_printf_float+0x364>
 8004286:	f04f 0b00 	mov.w	fp, #0
 800428a:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800428e:	f104 021a 	add.w	r2, r4, #26
 8004292:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8004294:	930a      	str	r3, [sp, #40]	@ 0x28
 8004296:	eba3 0309 	sub.w	r3, r3, r9
 800429a:	455b      	cmp	r3, fp
 800429c:	dc31      	bgt.n	8004302 <_printf_float+0x372>
 800429e:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 80042a0:	459a      	cmp	sl, r3
 80042a2:	dc3a      	bgt.n	800431a <_printf_float+0x38a>
 80042a4:	6823      	ldr	r3, [r4, #0]
 80042a6:	07da      	lsls	r2, r3, #31
 80042a8:	d437      	bmi.n	800431a <_printf_float+0x38a>
 80042aa:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 80042ac:	ebaa 0903 	sub.w	r9, sl, r3
 80042b0:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80042b2:	ebaa 0303 	sub.w	r3, sl, r3
 80042b6:	4599      	cmp	r9, r3
 80042b8:	bfa8      	it	ge
 80042ba:	4699      	movge	r9, r3
 80042bc:	f1b9 0f00 	cmp.w	r9, #0
 80042c0:	dc33      	bgt.n	800432a <_printf_float+0x39a>
 80042c2:	f04f 0800 	mov.w	r8, #0
 80042c6:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80042ca:	f104 0b1a 	add.w	fp, r4, #26
 80042ce:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 80042d0:	ebaa 0303 	sub.w	r3, sl, r3
 80042d4:	eba3 0309 	sub.w	r3, r3, r9
 80042d8:	4543      	cmp	r3, r8
 80042da:	f77f af7a 	ble.w	80041d2 <_printf_float+0x242>
 80042de:	2301      	movs	r3, #1
 80042e0:	465a      	mov	r2, fp
 80042e2:	4631      	mov	r1, r6
 80042e4:	4628      	mov	r0, r5
 80042e6:	47b8      	blx	r7
 80042e8:	3001      	adds	r0, #1
 80042ea:	f43f aeac 	beq.w	8004046 <_printf_float+0xb6>
 80042ee:	f108 0801 	add.w	r8, r8, #1
 80042f2:	e7ec      	b.n	80042ce <_printf_float+0x33e>
 80042f4:	4642      	mov	r2, r8
 80042f6:	4631      	mov	r1, r6
 80042f8:	4628      	mov	r0, r5
 80042fa:	47b8      	blx	r7
 80042fc:	3001      	adds	r0, #1
 80042fe:	d1c2      	bne.n	8004286 <_printf_float+0x2f6>
 8004300:	e6a1      	b.n	8004046 <_printf_float+0xb6>
 8004302:	2301      	movs	r3, #1
 8004304:	4631      	mov	r1, r6
 8004306:	4628      	mov	r0, r5
 8004308:	920a      	str	r2, [sp, #40]	@ 0x28
 800430a:	47b8      	blx	r7
 800430c:	3001      	adds	r0, #1
 800430e:	f43f ae9a 	beq.w	8004046 <_printf_float+0xb6>
 8004312:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8004314:	f10b 0b01 	add.w	fp, fp, #1
 8004318:	e7bb      	b.n	8004292 <_printf_float+0x302>
 800431a:	4631      	mov	r1, r6
 800431c:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8004320:	4628      	mov	r0, r5
 8004322:	47b8      	blx	r7
 8004324:	3001      	adds	r0, #1
 8004326:	d1c0      	bne.n	80042aa <_printf_float+0x31a>
 8004328:	e68d      	b.n	8004046 <_printf_float+0xb6>
 800432a:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800432c:	464b      	mov	r3, r9
 800432e:	4631      	mov	r1, r6
 8004330:	4628      	mov	r0, r5
 8004332:	4442      	add	r2, r8
 8004334:	47b8      	blx	r7
 8004336:	3001      	adds	r0, #1
 8004338:	d1c3      	bne.n	80042c2 <_printf_float+0x332>
 800433a:	e684      	b.n	8004046 <_printf_float+0xb6>
 800433c:	f8dd a038 	ldr.w	sl, [sp, #56]	@ 0x38
 8004340:	f1ba 0f01 	cmp.w	sl, #1
 8004344:	dc01      	bgt.n	800434a <_printf_float+0x3ba>
 8004346:	07db      	lsls	r3, r3, #31
 8004348:	d536      	bpl.n	80043b8 <_printf_float+0x428>
 800434a:	2301      	movs	r3, #1
 800434c:	4642      	mov	r2, r8
 800434e:	4631      	mov	r1, r6
 8004350:	4628      	mov	r0, r5
 8004352:	47b8      	blx	r7
 8004354:	3001      	adds	r0, #1
 8004356:	f43f ae76 	beq.w	8004046 <_printf_float+0xb6>
 800435a:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 800435e:	4631      	mov	r1, r6
 8004360:	4628      	mov	r0, r5
 8004362:	47b8      	blx	r7
 8004364:	3001      	adds	r0, #1
 8004366:	f43f ae6e 	beq.w	8004046 <_printf_float+0xb6>
 800436a:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 800436e:	2200      	movs	r2, #0
 8004370:	2300      	movs	r3, #0
 8004372:	f10a 3aff 	add.w	sl, sl, #4294967295
 8004376:	f7fc fb17 	bl	80009a8 <__aeabi_dcmpeq>
 800437a:	b9c0      	cbnz	r0, 80043ae <_printf_float+0x41e>
 800437c:	4653      	mov	r3, sl
 800437e:	f108 0201 	add.w	r2, r8, #1
 8004382:	4631      	mov	r1, r6
 8004384:	4628      	mov	r0, r5
 8004386:	47b8      	blx	r7
 8004388:	3001      	adds	r0, #1
 800438a:	d10c      	bne.n	80043a6 <_printf_float+0x416>
 800438c:	e65b      	b.n	8004046 <_printf_float+0xb6>
 800438e:	2301      	movs	r3, #1
 8004390:	465a      	mov	r2, fp
 8004392:	4631      	mov	r1, r6
 8004394:	4628      	mov	r0, r5
 8004396:	47b8      	blx	r7
 8004398:	3001      	adds	r0, #1
 800439a:	f43f ae54 	beq.w	8004046 <_printf_float+0xb6>
 800439e:	f108 0801 	add.w	r8, r8, #1
 80043a2:	45d0      	cmp	r8, sl
 80043a4:	dbf3      	blt.n	800438e <_printf_float+0x3fe>
 80043a6:	464b      	mov	r3, r9
 80043a8:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 80043ac:	e6e0      	b.n	8004170 <_printf_float+0x1e0>
 80043ae:	f04f 0800 	mov.w	r8, #0
 80043b2:	f104 0b1a 	add.w	fp, r4, #26
 80043b6:	e7f4      	b.n	80043a2 <_printf_float+0x412>
 80043b8:	2301      	movs	r3, #1
 80043ba:	4642      	mov	r2, r8
 80043bc:	e7e1      	b.n	8004382 <_printf_float+0x3f2>
 80043be:	2301      	movs	r3, #1
 80043c0:	464a      	mov	r2, r9
 80043c2:	4631      	mov	r1, r6
 80043c4:	4628      	mov	r0, r5
 80043c6:	47b8      	blx	r7
 80043c8:	3001      	adds	r0, #1
 80043ca:	f43f ae3c 	beq.w	8004046 <_printf_float+0xb6>
 80043ce:	f108 0801 	add.w	r8, r8, #1
 80043d2:	68e3      	ldr	r3, [r4, #12]
 80043d4:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 80043d6:	1a5b      	subs	r3, r3, r1
 80043d8:	4543      	cmp	r3, r8
 80043da:	dcf0      	bgt.n	80043be <_printf_float+0x42e>
 80043dc:	e6fd      	b.n	80041da <_printf_float+0x24a>
 80043de:	f04f 0800 	mov.w	r8, #0
 80043e2:	f104 0919 	add.w	r9, r4, #25
 80043e6:	e7f4      	b.n	80043d2 <_printf_float+0x442>

080043e8 <_printf_common>:
 80043e8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80043ec:	4616      	mov	r6, r2
 80043ee:	4698      	mov	r8, r3
 80043f0:	688a      	ldr	r2, [r1, #8]
 80043f2:	690b      	ldr	r3, [r1, #16]
 80043f4:	4607      	mov	r7, r0
 80043f6:	4293      	cmp	r3, r2
 80043f8:	bfb8      	it	lt
 80043fa:	4613      	movlt	r3, r2
 80043fc:	6033      	str	r3, [r6, #0]
 80043fe:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8004402:	460c      	mov	r4, r1
 8004404:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8004408:	b10a      	cbz	r2, 800440e <_printf_common+0x26>
 800440a:	3301      	adds	r3, #1
 800440c:	6033      	str	r3, [r6, #0]
 800440e:	6823      	ldr	r3, [r4, #0]
 8004410:	0699      	lsls	r1, r3, #26
 8004412:	bf42      	ittt	mi
 8004414:	6833      	ldrmi	r3, [r6, #0]
 8004416:	3302      	addmi	r3, #2
 8004418:	6033      	strmi	r3, [r6, #0]
 800441a:	6825      	ldr	r5, [r4, #0]
 800441c:	f015 0506 	ands.w	r5, r5, #6
 8004420:	d106      	bne.n	8004430 <_printf_common+0x48>
 8004422:	f104 0a19 	add.w	sl, r4, #25
 8004426:	68e3      	ldr	r3, [r4, #12]
 8004428:	6832      	ldr	r2, [r6, #0]
 800442a:	1a9b      	subs	r3, r3, r2
 800442c:	42ab      	cmp	r3, r5
 800442e:	dc2b      	bgt.n	8004488 <_printf_common+0xa0>
 8004430:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8004434:	6822      	ldr	r2, [r4, #0]
 8004436:	3b00      	subs	r3, #0
 8004438:	bf18      	it	ne
 800443a:	2301      	movne	r3, #1
 800443c:	0692      	lsls	r2, r2, #26
 800443e:	d430      	bmi.n	80044a2 <_printf_common+0xba>
 8004440:	4641      	mov	r1, r8
 8004442:	4638      	mov	r0, r7
 8004444:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8004448:	47c8      	blx	r9
 800444a:	3001      	adds	r0, #1
 800444c:	d023      	beq.n	8004496 <_printf_common+0xae>
 800444e:	6823      	ldr	r3, [r4, #0]
 8004450:	6922      	ldr	r2, [r4, #16]
 8004452:	f003 0306 	and.w	r3, r3, #6
 8004456:	2b04      	cmp	r3, #4
 8004458:	bf14      	ite	ne
 800445a:	2500      	movne	r5, #0
 800445c:	6833      	ldreq	r3, [r6, #0]
 800445e:	f04f 0600 	mov.w	r6, #0
 8004462:	bf08      	it	eq
 8004464:	68e5      	ldreq	r5, [r4, #12]
 8004466:	f104 041a 	add.w	r4, r4, #26
 800446a:	bf08      	it	eq
 800446c:	1aed      	subeq	r5, r5, r3
 800446e:	f854 3c12 	ldr.w	r3, [r4, #-18]
 8004472:	bf08      	it	eq
 8004474:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8004478:	4293      	cmp	r3, r2
 800447a:	bfc4      	itt	gt
 800447c:	1a9b      	subgt	r3, r3, r2
 800447e:	18ed      	addgt	r5, r5, r3
 8004480:	42b5      	cmp	r5, r6
 8004482:	d11a      	bne.n	80044ba <_printf_common+0xd2>
 8004484:	2000      	movs	r0, #0
 8004486:	e008      	b.n	800449a <_printf_common+0xb2>
 8004488:	2301      	movs	r3, #1
 800448a:	4652      	mov	r2, sl
 800448c:	4641      	mov	r1, r8
 800448e:	4638      	mov	r0, r7
 8004490:	47c8      	blx	r9
 8004492:	3001      	adds	r0, #1
 8004494:	d103      	bne.n	800449e <_printf_common+0xb6>
 8004496:	f04f 30ff 	mov.w	r0, #4294967295
 800449a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800449e:	3501      	adds	r5, #1
 80044a0:	e7c1      	b.n	8004426 <_printf_common+0x3e>
 80044a2:	2030      	movs	r0, #48	@ 0x30
 80044a4:	18e1      	adds	r1, r4, r3
 80044a6:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 80044aa:	1c5a      	adds	r2, r3, #1
 80044ac:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 80044b0:	4422      	add	r2, r4
 80044b2:	3302      	adds	r3, #2
 80044b4:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 80044b8:	e7c2      	b.n	8004440 <_printf_common+0x58>
 80044ba:	2301      	movs	r3, #1
 80044bc:	4622      	mov	r2, r4
 80044be:	4641      	mov	r1, r8
 80044c0:	4638      	mov	r0, r7
 80044c2:	47c8      	blx	r9
 80044c4:	3001      	adds	r0, #1
 80044c6:	d0e6      	beq.n	8004496 <_printf_common+0xae>
 80044c8:	3601      	adds	r6, #1
 80044ca:	e7d9      	b.n	8004480 <_printf_common+0x98>

080044cc <_printf_i>:
 80044cc:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80044d0:	7e0f      	ldrb	r7, [r1, #24]
 80044d2:	4691      	mov	r9, r2
 80044d4:	2f78      	cmp	r7, #120	@ 0x78
 80044d6:	4680      	mov	r8, r0
 80044d8:	460c      	mov	r4, r1
 80044da:	469a      	mov	sl, r3
 80044dc:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 80044de:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 80044e2:	d807      	bhi.n	80044f4 <_printf_i+0x28>
 80044e4:	2f62      	cmp	r7, #98	@ 0x62
 80044e6:	d80a      	bhi.n	80044fe <_printf_i+0x32>
 80044e8:	2f00      	cmp	r7, #0
 80044ea:	f000 80d1 	beq.w	8004690 <_printf_i+0x1c4>
 80044ee:	2f58      	cmp	r7, #88	@ 0x58
 80044f0:	f000 80b8 	beq.w	8004664 <_printf_i+0x198>
 80044f4:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80044f8:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 80044fc:	e03a      	b.n	8004574 <_printf_i+0xa8>
 80044fe:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8004502:	2b15      	cmp	r3, #21
 8004504:	d8f6      	bhi.n	80044f4 <_printf_i+0x28>
 8004506:	a101      	add	r1, pc, #4	@ (adr r1, 800450c <_printf_i+0x40>)
 8004508:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800450c:	08004565 	.word	0x08004565
 8004510:	08004579 	.word	0x08004579
 8004514:	080044f5 	.word	0x080044f5
 8004518:	080044f5 	.word	0x080044f5
 800451c:	080044f5 	.word	0x080044f5
 8004520:	080044f5 	.word	0x080044f5
 8004524:	08004579 	.word	0x08004579
 8004528:	080044f5 	.word	0x080044f5
 800452c:	080044f5 	.word	0x080044f5
 8004530:	080044f5 	.word	0x080044f5
 8004534:	080044f5 	.word	0x080044f5
 8004538:	08004677 	.word	0x08004677
 800453c:	080045a3 	.word	0x080045a3
 8004540:	08004631 	.word	0x08004631
 8004544:	080044f5 	.word	0x080044f5
 8004548:	080044f5 	.word	0x080044f5
 800454c:	08004699 	.word	0x08004699
 8004550:	080044f5 	.word	0x080044f5
 8004554:	080045a3 	.word	0x080045a3
 8004558:	080044f5 	.word	0x080044f5
 800455c:	080044f5 	.word	0x080044f5
 8004560:	08004639 	.word	0x08004639
 8004564:	6833      	ldr	r3, [r6, #0]
 8004566:	1d1a      	adds	r2, r3, #4
 8004568:	681b      	ldr	r3, [r3, #0]
 800456a:	6032      	str	r2, [r6, #0]
 800456c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8004570:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8004574:	2301      	movs	r3, #1
 8004576:	e09c      	b.n	80046b2 <_printf_i+0x1e6>
 8004578:	6833      	ldr	r3, [r6, #0]
 800457a:	6820      	ldr	r0, [r4, #0]
 800457c:	1d19      	adds	r1, r3, #4
 800457e:	6031      	str	r1, [r6, #0]
 8004580:	0606      	lsls	r6, r0, #24
 8004582:	d501      	bpl.n	8004588 <_printf_i+0xbc>
 8004584:	681d      	ldr	r5, [r3, #0]
 8004586:	e003      	b.n	8004590 <_printf_i+0xc4>
 8004588:	0645      	lsls	r5, r0, #25
 800458a:	d5fb      	bpl.n	8004584 <_printf_i+0xb8>
 800458c:	f9b3 5000 	ldrsh.w	r5, [r3]
 8004590:	2d00      	cmp	r5, #0
 8004592:	da03      	bge.n	800459c <_printf_i+0xd0>
 8004594:	232d      	movs	r3, #45	@ 0x2d
 8004596:	426d      	negs	r5, r5
 8004598:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800459c:	230a      	movs	r3, #10
 800459e:	4858      	ldr	r0, [pc, #352]	@ (8004700 <_printf_i+0x234>)
 80045a0:	e011      	b.n	80045c6 <_printf_i+0xfa>
 80045a2:	6821      	ldr	r1, [r4, #0]
 80045a4:	6833      	ldr	r3, [r6, #0]
 80045a6:	0608      	lsls	r0, r1, #24
 80045a8:	f853 5b04 	ldr.w	r5, [r3], #4
 80045ac:	d402      	bmi.n	80045b4 <_printf_i+0xe8>
 80045ae:	0649      	lsls	r1, r1, #25
 80045b0:	bf48      	it	mi
 80045b2:	b2ad      	uxthmi	r5, r5
 80045b4:	2f6f      	cmp	r7, #111	@ 0x6f
 80045b6:	6033      	str	r3, [r6, #0]
 80045b8:	bf14      	ite	ne
 80045ba:	230a      	movne	r3, #10
 80045bc:	2308      	moveq	r3, #8
 80045be:	4850      	ldr	r0, [pc, #320]	@ (8004700 <_printf_i+0x234>)
 80045c0:	2100      	movs	r1, #0
 80045c2:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 80045c6:	6866      	ldr	r6, [r4, #4]
 80045c8:	2e00      	cmp	r6, #0
 80045ca:	60a6      	str	r6, [r4, #8]
 80045cc:	db05      	blt.n	80045da <_printf_i+0x10e>
 80045ce:	6821      	ldr	r1, [r4, #0]
 80045d0:	432e      	orrs	r6, r5
 80045d2:	f021 0104 	bic.w	r1, r1, #4
 80045d6:	6021      	str	r1, [r4, #0]
 80045d8:	d04b      	beq.n	8004672 <_printf_i+0x1a6>
 80045da:	4616      	mov	r6, r2
 80045dc:	fbb5 f1f3 	udiv	r1, r5, r3
 80045e0:	fb03 5711 	mls	r7, r3, r1, r5
 80045e4:	5dc7      	ldrb	r7, [r0, r7]
 80045e6:	f806 7d01 	strb.w	r7, [r6, #-1]!
 80045ea:	462f      	mov	r7, r5
 80045ec:	42bb      	cmp	r3, r7
 80045ee:	460d      	mov	r5, r1
 80045f0:	d9f4      	bls.n	80045dc <_printf_i+0x110>
 80045f2:	2b08      	cmp	r3, #8
 80045f4:	d10b      	bne.n	800460e <_printf_i+0x142>
 80045f6:	6823      	ldr	r3, [r4, #0]
 80045f8:	07df      	lsls	r7, r3, #31
 80045fa:	d508      	bpl.n	800460e <_printf_i+0x142>
 80045fc:	6923      	ldr	r3, [r4, #16]
 80045fe:	6861      	ldr	r1, [r4, #4]
 8004600:	4299      	cmp	r1, r3
 8004602:	bfde      	ittt	le
 8004604:	2330      	movle	r3, #48	@ 0x30
 8004606:	f806 3c01 	strble.w	r3, [r6, #-1]
 800460a:	f106 36ff 	addle.w	r6, r6, #4294967295
 800460e:	1b92      	subs	r2, r2, r6
 8004610:	6122      	str	r2, [r4, #16]
 8004612:	464b      	mov	r3, r9
 8004614:	4621      	mov	r1, r4
 8004616:	4640      	mov	r0, r8
 8004618:	f8cd a000 	str.w	sl, [sp]
 800461c:	aa03      	add	r2, sp, #12
 800461e:	f7ff fee3 	bl	80043e8 <_printf_common>
 8004622:	3001      	adds	r0, #1
 8004624:	d14a      	bne.n	80046bc <_printf_i+0x1f0>
 8004626:	f04f 30ff 	mov.w	r0, #4294967295
 800462a:	b004      	add	sp, #16
 800462c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004630:	6823      	ldr	r3, [r4, #0]
 8004632:	f043 0320 	orr.w	r3, r3, #32
 8004636:	6023      	str	r3, [r4, #0]
 8004638:	2778      	movs	r7, #120	@ 0x78
 800463a:	4832      	ldr	r0, [pc, #200]	@ (8004704 <_printf_i+0x238>)
 800463c:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8004640:	6823      	ldr	r3, [r4, #0]
 8004642:	6831      	ldr	r1, [r6, #0]
 8004644:	061f      	lsls	r7, r3, #24
 8004646:	f851 5b04 	ldr.w	r5, [r1], #4
 800464a:	d402      	bmi.n	8004652 <_printf_i+0x186>
 800464c:	065f      	lsls	r7, r3, #25
 800464e:	bf48      	it	mi
 8004650:	b2ad      	uxthmi	r5, r5
 8004652:	6031      	str	r1, [r6, #0]
 8004654:	07d9      	lsls	r1, r3, #31
 8004656:	bf44      	itt	mi
 8004658:	f043 0320 	orrmi.w	r3, r3, #32
 800465c:	6023      	strmi	r3, [r4, #0]
 800465e:	b11d      	cbz	r5, 8004668 <_printf_i+0x19c>
 8004660:	2310      	movs	r3, #16
 8004662:	e7ad      	b.n	80045c0 <_printf_i+0xf4>
 8004664:	4826      	ldr	r0, [pc, #152]	@ (8004700 <_printf_i+0x234>)
 8004666:	e7e9      	b.n	800463c <_printf_i+0x170>
 8004668:	6823      	ldr	r3, [r4, #0]
 800466a:	f023 0320 	bic.w	r3, r3, #32
 800466e:	6023      	str	r3, [r4, #0]
 8004670:	e7f6      	b.n	8004660 <_printf_i+0x194>
 8004672:	4616      	mov	r6, r2
 8004674:	e7bd      	b.n	80045f2 <_printf_i+0x126>
 8004676:	6833      	ldr	r3, [r6, #0]
 8004678:	6825      	ldr	r5, [r4, #0]
 800467a:	1d18      	adds	r0, r3, #4
 800467c:	6961      	ldr	r1, [r4, #20]
 800467e:	6030      	str	r0, [r6, #0]
 8004680:	062e      	lsls	r6, r5, #24
 8004682:	681b      	ldr	r3, [r3, #0]
 8004684:	d501      	bpl.n	800468a <_printf_i+0x1be>
 8004686:	6019      	str	r1, [r3, #0]
 8004688:	e002      	b.n	8004690 <_printf_i+0x1c4>
 800468a:	0668      	lsls	r0, r5, #25
 800468c:	d5fb      	bpl.n	8004686 <_printf_i+0x1ba>
 800468e:	8019      	strh	r1, [r3, #0]
 8004690:	2300      	movs	r3, #0
 8004692:	4616      	mov	r6, r2
 8004694:	6123      	str	r3, [r4, #16]
 8004696:	e7bc      	b.n	8004612 <_printf_i+0x146>
 8004698:	6833      	ldr	r3, [r6, #0]
 800469a:	2100      	movs	r1, #0
 800469c:	1d1a      	adds	r2, r3, #4
 800469e:	6032      	str	r2, [r6, #0]
 80046a0:	681e      	ldr	r6, [r3, #0]
 80046a2:	6862      	ldr	r2, [r4, #4]
 80046a4:	4630      	mov	r0, r6
 80046a6:	f000 fbe0 	bl	8004e6a <memchr>
 80046aa:	b108      	cbz	r0, 80046b0 <_printf_i+0x1e4>
 80046ac:	1b80      	subs	r0, r0, r6
 80046ae:	6060      	str	r0, [r4, #4]
 80046b0:	6863      	ldr	r3, [r4, #4]
 80046b2:	6123      	str	r3, [r4, #16]
 80046b4:	2300      	movs	r3, #0
 80046b6:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80046ba:	e7aa      	b.n	8004612 <_printf_i+0x146>
 80046bc:	4632      	mov	r2, r6
 80046be:	4649      	mov	r1, r9
 80046c0:	4640      	mov	r0, r8
 80046c2:	6923      	ldr	r3, [r4, #16]
 80046c4:	47d0      	blx	sl
 80046c6:	3001      	adds	r0, #1
 80046c8:	d0ad      	beq.n	8004626 <_printf_i+0x15a>
 80046ca:	6823      	ldr	r3, [r4, #0]
 80046cc:	079b      	lsls	r3, r3, #30
 80046ce:	d413      	bmi.n	80046f8 <_printf_i+0x22c>
 80046d0:	68e0      	ldr	r0, [r4, #12]
 80046d2:	9b03      	ldr	r3, [sp, #12]
 80046d4:	4298      	cmp	r0, r3
 80046d6:	bfb8      	it	lt
 80046d8:	4618      	movlt	r0, r3
 80046da:	e7a6      	b.n	800462a <_printf_i+0x15e>
 80046dc:	2301      	movs	r3, #1
 80046de:	4632      	mov	r2, r6
 80046e0:	4649      	mov	r1, r9
 80046e2:	4640      	mov	r0, r8
 80046e4:	47d0      	blx	sl
 80046e6:	3001      	adds	r0, #1
 80046e8:	d09d      	beq.n	8004626 <_printf_i+0x15a>
 80046ea:	3501      	adds	r5, #1
 80046ec:	68e3      	ldr	r3, [r4, #12]
 80046ee:	9903      	ldr	r1, [sp, #12]
 80046f0:	1a5b      	subs	r3, r3, r1
 80046f2:	42ab      	cmp	r3, r5
 80046f4:	dcf2      	bgt.n	80046dc <_printf_i+0x210>
 80046f6:	e7eb      	b.n	80046d0 <_printf_i+0x204>
 80046f8:	2500      	movs	r5, #0
 80046fa:	f104 0619 	add.w	r6, r4, #25
 80046fe:	e7f5      	b.n	80046ec <_printf_i+0x220>
 8004700:	0800879c 	.word	0x0800879c
 8004704:	080087ad 	.word	0x080087ad

08004708 <_scanf_float>:
 8004708:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800470c:	b087      	sub	sp, #28
 800470e:	9303      	str	r3, [sp, #12]
 8004710:	688b      	ldr	r3, [r1, #8]
 8004712:	4691      	mov	r9, r2
 8004714:	1e5a      	subs	r2, r3, #1
 8004716:	f5b2 7fae 	cmp.w	r2, #348	@ 0x15c
 800471a:	bf82      	ittt	hi
 800471c:	f46f 75ae 	mvnhi.w	r5, #348	@ 0x15c
 8004720:	eb03 0b05 	addhi.w	fp, r3, r5
 8004724:	f240 135d 	movwhi	r3, #349	@ 0x15d
 8004728:	460a      	mov	r2, r1
 800472a:	f04f 0500 	mov.w	r5, #0
 800472e:	bf88      	it	hi
 8004730:	608b      	strhi	r3, [r1, #8]
 8004732:	680b      	ldr	r3, [r1, #0]
 8004734:	4680      	mov	r8, r0
 8004736:	f443 63f0 	orr.w	r3, r3, #1920	@ 0x780
 800473a:	f842 3b1c 	str.w	r3, [r2], #28
 800473e:	460c      	mov	r4, r1
 8004740:	bf98      	it	ls
 8004742:	f04f 0b00 	movls.w	fp, #0
 8004746:	4616      	mov	r6, r2
 8004748:	46aa      	mov	sl, r5
 800474a:	462f      	mov	r7, r5
 800474c:	e9cd 5504 	strd	r5, r5, [sp, #16]
 8004750:	9201      	str	r2, [sp, #4]
 8004752:	9502      	str	r5, [sp, #8]
 8004754:	68a2      	ldr	r2, [r4, #8]
 8004756:	b15a      	cbz	r2, 8004770 <_scanf_float+0x68>
 8004758:	f8d9 3000 	ldr.w	r3, [r9]
 800475c:	781b      	ldrb	r3, [r3, #0]
 800475e:	2b4e      	cmp	r3, #78	@ 0x4e
 8004760:	d862      	bhi.n	8004828 <_scanf_float+0x120>
 8004762:	2b40      	cmp	r3, #64	@ 0x40
 8004764:	d83a      	bhi.n	80047dc <_scanf_float+0xd4>
 8004766:	f1a3 012b 	sub.w	r1, r3, #43	@ 0x2b
 800476a:	b2c8      	uxtb	r0, r1
 800476c:	280e      	cmp	r0, #14
 800476e:	d938      	bls.n	80047e2 <_scanf_float+0xda>
 8004770:	b11f      	cbz	r7, 800477a <_scanf_float+0x72>
 8004772:	6823      	ldr	r3, [r4, #0]
 8004774:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8004778:	6023      	str	r3, [r4, #0]
 800477a:	f10a 3aff 	add.w	sl, sl, #4294967295
 800477e:	f1ba 0f01 	cmp.w	sl, #1
 8004782:	f200 8114 	bhi.w	80049ae <_scanf_float+0x2a6>
 8004786:	9b01      	ldr	r3, [sp, #4]
 8004788:	429e      	cmp	r6, r3
 800478a:	f200 8105 	bhi.w	8004998 <_scanf_float+0x290>
 800478e:	2001      	movs	r0, #1
 8004790:	b007      	add	sp, #28
 8004792:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004796:	f1a3 0261 	sub.w	r2, r3, #97	@ 0x61
 800479a:	2a0d      	cmp	r2, #13
 800479c:	d8e8      	bhi.n	8004770 <_scanf_float+0x68>
 800479e:	a101      	add	r1, pc, #4	@ (adr r1, 80047a4 <_scanf_float+0x9c>)
 80047a0:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 80047a4:	080048ed 	.word	0x080048ed
 80047a8:	08004771 	.word	0x08004771
 80047ac:	08004771 	.word	0x08004771
 80047b0:	08004771 	.word	0x08004771
 80047b4:	08004949 	.word	0x08004949
 80047b8:	08004923 	.word	0x08004923
 80047bc:	08004771 	.word	0x08004771
 80047c0:	08004771 	.word	0x08004771
 80047c4:	080048fb 	.word	0x080048fb
 80047c8:	08004771 	.word	0x08004771
 80047cc:	08004771 	.word	0x08004771
 80047d0:	08004771 	.word	0x08004771
 80047d4:	08004771 	.word	0x08004771
 80047d8:	080048b7 	.word	0x080048b7
 80047dc:	f1a3 0241 	sub.w	r2, r3, #65	@ 0x41
 80047e0:	e7db      	b.n	800479a <_scanf_float+0x92>
 80047e2:	290e      	cmp	r1, #14
 80047e4:	d8c4      	bhi.n	8004770 <_scanf_float+0x68>
 80047e6:	a001      	add	r0, pc, #4	@ (adr r0, 80047ec <_scanf_float+0xe4>)
 80047e8:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 80047ec:	080048a7 	.word	0x080048a7
 80047f0:	08004771 	.word	0x08004771
 80047f4:	080048a7 	.word	0x080048a7
 80047f8:	08004937 	.word	0x08004937
 80047fc:	08004771 	.word	0x08004771
 8004800:	08004849 	.word	0x08004849
 8004804:	0800488d 	.word	0x0800488d
 8004808:	0800488d 	.word	0x0800488d
 800480c:	0800488d 	.word	0x0800488d
 8004810:	0800488d 	.word	0x0800488d
 8004814:	0800488d 	.word	0x0800488d
 8004818:	0800488d 	.word	0x0800488d
 800481c:	0800488d 	.word	0x0800488d
 8004820:	0800488d 	.word	0x0800488d
 8004824:	0800488d 	.word	0x0800488d
 8004828:	2b6e      	cmp	r3, #110	@ 0x6e
 800482a:	d809      	bhi.n	8004840 <_scanf_float+0x138>
 800482c:	2b60      	cmp	r3, #96	@ 0x60
 800482e:	d8b2      	bhi.n	8004796 <_scanf_float+0x8e>
 8004830:	2b54      	cmp	r3, #84	@ 0x54
 8004832:	d07b      	beq.n	800492c <_scanf_float+0x224>
 8004834:	2b59      	cmp	r3, #89	@ 0x59
 8004836:	d19b      	bne.n	8004770 <_scanf_float+0x68>
 8004838:	2d07      	cmp	r5, #7
 800483a:	d199      	bne.n	8004770 <_scanf_float+0x68>
 800483c:	2508      	movs	r5, #8
 800483e:	e02f      	b.n	80048a0 <_scanf_float+0x198>
 8004840:	2b74      	cmp	r3, #116	@ 0x74
 8004842:	d073      	beq.n	800492c <_scanf_float+0x224>
 8004844:	2b79      	cmp	r3, #121	@ 0x79
 8004846:	e7f6      	b.n	8004836 <_scanf_float+0x12e>
 8004848:	6821      	ldr	r1, [r4, #0]
 800484a:	05c8      	lsls	r0, r1, #23
 800484c:	d51e      	bpl.n	800488c <_scanf_float+0x184>
 800484e:	f021 0180 	bic.w	r1, r1, #128	@ 0x80
 8004852:	6021      	str	r1, [r4, #0]
 8004854:	3701      	adds	r7, #1
 8004856:	f1bb 0f00 	cmp.w	fp, #0
 800485a:	d003      	beq.n	8004864 <_scanf_float+0x15c>
 800485c:	3201      	adds	r2, #1
 800485e:	f10b 3bff 	add.w	fp, fp, #4294967295
 8004862:	60a2      	str	r2, [r4, #8]
 8004864:	68a3      	ldr	r3, [r4, #8]
 8004866:	3b01      	subs	r3, #1
 8004868:	60a3      	str	r3, [r4, #8]
 800486a:	6923      	ldr	r3, [r4, #16]
 800486c:	3301      	adds	r3, #1
 800486e:	6123      	str	r3, [r4, #16]
 8004870:	f8d9 3004 	ldr.w	r3, [r9, #4]
 8004874:	3b01      	subs	r3, #1
 8004876:	2b00      	cmp	r3, #0
 8004878:	f8c9 3004 	str.w	r3, [r9, #4]
 800487c:	f340 8083 	ble.w	8004986 <_scanf_float+0x27e>
 8004880:	f8d9 3000 	ldr.w	r3, [r9]
 8004884:	3301      	adds	r3, #1
 8004886:	f8c9 3000 	str.w	r3, [r9]
 800488a:	e763      	b.n	8004754 <_scanf_float+0x4c>
 800488c:	eb1a 0105 	adds.w	r1, sl, r5
 8004890:	f47f af6e 	bne.w	8004770 <_scanf_float+0x68>
 8004894:	460d      	mov	r5, r1
 8004896:	468a      	mov	sl, r1
 8004898:	6822      	ldr	r2, [r4, #0]
 800489a:	f422 72c0 	bic.w	r2, r2, #384	@ 0x180
 800489e:	6022      	str	r2, [r4, #0]
 80048a0:	f806 3b01 	strb.w	r3, [r6], #1
 80048a4:	e7de      	b.n	8004864 <_scanf_float+0x15c>
 80048a6:	6822      	ldr	r2, [r4, #0]
 80048a8:	0610      	lsls	r0, r2, #24
 80048aa:	f57f af61 	bpl.w	8004770 <_scanf_float+0x68>
 80048ae:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 80048b2:	6022      	str	r2, [r4, #0]
 80048b4:	e7f4      	b.n	80048a0 <_scanf_float+0x198>
 80048b6:	f1ba 0f00 	cmp.w	sl, #0
 80048ba:	d10c      	bne.n	80048d6 <_scanf_float+0x1ce>
 80048bc:	b977      	cbnz	r7, 80048dc <_scanf_float+0x1d4>
 80048be:	6822      	ldr	r2, [r4, #0]
 80048c0:	f402 61e0 	and.w	r1, r2, #1792	@ 0x700
 80048c4:	f5b1 6fe0 	cmp.w	r1, #1792	@ 0x700
 80048c8:	d108      	bne.n	80048dc <_scanf_float+0x1d4>
 80048ca:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 80048ce:	f04f 0a01 	mov.w	sl, #1
 80048d2:	6022      	str	r2, [r4, #0]
 80048d4:	e7e4      	b.n	80048a0 <_scanf_float+0x198>
 80048d6:	f1ba 0f02 	cmp.w	sl, #2
 80048da:	d051      	beq.n	8004980 <_scanf_float+0x278>
 80048dc:	2d01      	cmp	r5, #1
 80048de:	d002      	beq.n	80048e6 <_scanf_float+0x1de>
 80048e0:	2d04      	cmp	r5, #4
 80048e2:	f47f af45 	bne.w	8004770 <_scanf_float+0x68>
 80048e6:	3501      	adds	r5, #1
 80048e8:	b2ed      	uxtb	r5, r5
 80048ea:	e7d9      	b.n	80048a0 <_scanf_float+0x198>
 80048ec:	f1ba 0f01 	cmp.w	sl, #1
 80048f0:	f47f af3e 	bne.w	8004770 <_scanf_float+0x68>
 80048f4:	f04f 0a02 	mov.w	sl, #2
 80048f8:	e7d2      	b.n	80048a0 <_scanf_float+0x198>
 80048fa:	b975      	cbnz	r5, 800491a <_scanf_float+0x212>
 80048fc:	2f00      	cmp	r7, #0
 80048fe:	f47f af38 	bne.w	8004772 <_scanf_float+0x6a>
 8004902:	6822      	ldr	r2, [r4, #0]
 8004904:	f402 61e0 	and.w	r1, r2, #1792	@ 0x700
 8004908:	f5b1 6fe0 	cmp.w	r1, #1792	@ 0x700
 800490c:	f040 80ff 	bne.w	8004b0e <_scanf_float+0x406>
 8004910:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 8004914:	2501      	movs	r5, #1
 8004916:	6022      	str	r2, [r4, #0]
 8004918:	e7c2      	b.n	80048a0 <_scanf_float+0x198>
 800491a:	2d03      	cmp	r5, #3
 800491c:	d0e3      	beq.n	80048e6 <_scanf_float+0x1de>
 800491e:	2d05      	cmp	r5, #5
 8004920:	e7df      	b.n	80048e2 <_scanf_float+0x1da>
 8004922:	2d02      	cmp	r5, #2
 8004924:	f47f af24 	bne.w	8004770 <_scanf_float+0x68>
 8004928:	2503      	movs	r5, #3
 800492a:	e7b9      	b.n	80048a0 <_scanf_float+0x198>
 800492c:	2d06      	cmp	r5, #6
 800492e:	f47f af1f 	bne.w	8004770 <_scanf_float+0x68>
 8004932:	2507      	movs	r5, #7
 8004934:	e7b4      	b.n	80048a0 <_scanf_float+0x198>
 8004936:	6822      	ldr	r2, [r4, #0]
 8004938:	0591      	lsls	r1, r2, #22
 800493a:	f57f af19 	bpl.w	8004770 <_scanf_float+0x68>
 800493e:	f422 7220 	bic.w	r2, r2, #640	@ 0x280
 8004942:	6022      	str	r2, [r4, #0]
 8004944:	9702      	str	r7, [sp, #8]
 8004946:	e7ab      	b.n	80048a0 <_scanf_float+0x198>
 8004948:	6822      	ldr	r2, [r4, #0]
 800494a:	f402 61a0 	and.w	r1, r2, #1280	@ 0x500
 800494e:	f5b1 6f80 	cmp.w	r1, #1024	@ 0x400
 8004952:	d005      	beq.n	8004960 <_scanf_float+0x258>
 8004954:	0550      	lsls	r0, r2, #21
 8004956:	f57f af0b 	bpl.w	8004770 <_scanf_float+0x68>
 800495a:	2f00      	cmp	r7, #0
 800495c:	f000 80d7 	beq.w	8004b0e <_scanf_float+0x406>
 8004960:	0591      	lsls	r1, r2, #22
 8004962:	bf58      	it	pl
 8004964:	9902      	ldrpl	r1, [sp, #8]
 8004966:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 800496a:	bf58      	it	pl
 800496c:	1a79      	subpl	r1, r7, r1
 800496e:	f442 72c0 	orr.w	r2, r2, #384	@ 0x180
 8004972:	f04f 0700 	mov.w	r7, #0
 8004976:	bf58      	it	pl
 8004978:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 800497c:	6022      	str	r2, [r4, #0]
 800497e:	e78f      	b.n	80048a0 <_scanf_float+0x198>
 8004980:	f04f 0a03 	mov.w	sl, #3
 8004984:	e78c      	b.n	80048a0 <_scanf_float+0x198>
 8004986:	4649      	mov	r1, r9
 8004988:	4640      	mov	r0, r8
 800498a:	f8d4 3180 	ldr.w	r3, [r4, #384]	@ 0x180
 800498e:	4798      	blx	r3
 8004990:	2800      	cmp	r0, #0
 8004992:	f43f aedf 	beq.w	8004754 <_scanf_float+0x4c>
 8004996:	e6eb      	b.n	8004770 <_scanf_float+0x68>
 8004998:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800499c:	464a      	mov	r2, r9
 800499e:	4640      	mov	r0, r8
 80049a0:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 80049a4:	4798      	blx	r3
 80049a6:	6923      	ldr	r3, [r4, #16]
 80049a8:	3b01      	subs	r3, #1
 80049aa:	6123      	str	r3, [r4, #16]
 80049ac:	e6eb      	b.n	8004786 <_scanf_float+0x7e>
 80049ae:	1e6b      	subs	r3, r5, #1
 80049b0:	2b06      	cmp	r3, #6
 80049b2:	d824      	bhi.n	80049fe <_scanf_float+0x2f6>
 80049b4:	2d02      	cmp	r5, #2
 80049b6:	d836      	bhi.n	8004a26 <_scanf_float+0x31e>
 80049b8:	9b01      	ldr	r3, [sp, #4]
 80049ba:	429e      	cmp	r6, r3
 80049bc:	f67f aee7 	bls.w	800478e <_scanf_float+0x86>
 80049c0:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 80049c4:	464a      	mov	r2, r9
 80049c6:	4640      	mov	r0, r8
 80049c8:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 80049cc:	4798      	blx	r3
 80049ce:	6923      	ldr	r3, [r4, #16]
 80049d0:	3b01      	subs	r3, #1
 80049d2:	6123      	str	r3, [r4, #16]
 80049d4:	e7f0      	b.n	80049b8 <_scanf_float+0x2b0>
 80049d6:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 80049da:	464a      	mov	r2, r9
 80049dc:	4640      	mov	r0, r8
 80049de:	f81b 1d01 	ldrb.w	r1, [fp, #-1]!
 80049e2:	4798      	blx	r3
 80049e4:	6923      	ldr	r3, [r4, #16]
 80049e6:	3b01      	subs	r3, #1
 80049e8:	6123      	str	r3, [r4, #16]
 80049ea:	f10a 3aff 	add.w	sl, sl, #4294967295
 80049ee:	fa5f fa8a 	uxtb.w	sl, sl
 80049f2:	f1ba 0f02 	cmp.w	sl, #2
 80049f6:	d1ee      	bne.n	80049d6 <_scanf_float+0x2ce>
 80049f8:	3d03      	subs	r5, #3
 80049fa:	b2ed      	uxtb	r5, r5
 80049fc:	1b76      	subs	r6, r6, r5
 80049fe:	6823      	ldr	r3, [r4, #0]
 8004a00:	05da      	lsls	r2, r3, #23
 8004a02:	d530      	bpl.n	8004a66 <_scanf_float+0x35e>
 8004a04:	055b      	lsls	r3, r3, #21
 8004a06:	d511      	bpl.n	8004a2c <_scanf_float+0x324>
 8004a08:	9b01      	ldr	r3, [sp, #4]
 8004a0a:	429e      	cmp	r6, r3
 8004a0c:	f67f aebf 	bls.w	800478e <_scanf_float+0x86>
 8004a10:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8004a14:	464a      	mov	r2, r9
 8004a16:	4640      	mov	r0, r8
 8004a18:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8004a1c:	4798      	blx	r3
 8004a1e:	6923      	ldr	r3, [r4, #16]
 8004a20:	3b01      	subs	r3, #1
 8004a22:	6123      	str	r3, [r4, #16]
 8004a24:	e7f0      	b.n	8004a08 <_scanf_float+0x300>
 8004a26:	46aa      	mov	sl, r5
 8004a28:	46b3      	mov	fp, r6
 8004a2a:	e7de      	b.n	80049ea <_scanf_float+0x2e2>
 8004a2c:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 8004a30:	6923      	ldr	r3, [r4, #16]
 8004a32:	2965      	cmp	r1, #101	@ 0x65
 8004a34:	f103 33ff 	add.w	r3, r3, #4294967295
 8004a38:	f106 35ff 	add.w	r5, r6, #4294967295
 8004a3c:	6123      	str	r3, [r4, #16]
 8004a3e:	d00c      	beq.n	8004a5a <_scanf_float+0x352>
 8004a40:	2945      	cmp	r1, #69	@ 0x45
 8004a42:	d00a      	beq.n	8004a5a <_scanf_float+0x352>
 8004a44:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8004a48:	464a      	mov	r2, r9
 8004a4a:	4640      	mov	r0, r8
 8004a4c:	4798      	blx	r3
 8004a4e:	6923      	ldr	r3, [r4, #16]
 8004a50:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 8004a54:	3b01      	subs	r3, #1
 8004a56:	1eb5      	subs	r5, r6, #2
 8004a58:	6123      	str	r3, [r4, #16]
 8004a5a:	464a      	mov	r2, r9
 8004a5c:	4640      	mov	r0, r8
 8004a5e:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8004a62:	4798      	blx	r3
 8004a64:	462e      	mov	r6, r5
 8004a66:	6822      	ldr	r2, [r4, #0]
 8004a68:	f012 0210 	ands.w	r2, r2, #16
 8004a6c:	d001      	beq.n	8004a72 <_scanf_float+0x36a>
 8004a6e:	2000      	movs	r0, #0
 8004a70:	e68e      	b.n	8004790 <_scanf_float+0x88>
 8004a72:	7032      	strb	r2, [r6, #0]
 8004a74:	6823      	ldr	r3, [r4, #0]
 8004a76:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8004a7a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004a7e:	d125      	bne.n	8004acc <_scanf_float+0x3c4>
 8004a80:	9b02      	ldr	r3, [sp, #8]
 8004a82:	429f      	cmp	r7, r3
 8004a84:	d00a      	beq.n	8004a9c <_scanf_float+0x394>
 8004a86:	1bda      	subs	r2, r3, r7
 8004a88:	f204 136f 	addw	r3, r4, #367	@ 0x16f
 8004a8c:	429e      	cmp	r6, r3
 8004a8e:	bf28      	it	cs
 8004a90:	f504 76b7 	addcs.w	r6, r4, #366	@ 0x16e
 8004a94:	4630      	mov	r0, r6
 8004a96:	491f      	ldr	r1, [pc, #124]	@ (8004b14 <_scanf_float+0x40c>)
 8004a98:	f000 f902 	bl	8004ca0 <siprintf>
 8004a9c:	2200      	movs	r2, #0
 8004a9e:	4640      	mov	r0, r8
 8004aa0:	9901      	ldr	r1, [sp, #4]
 8004aa2:	f002 fbf9 	bl	8007298 <_strtod_r>
 8004aa6:	9b03      	ldr	r3, [sp, #12]
 8004aa8:	6825      	ldr	r5, [r4, #0]
 8004aaa:	681b      	ldr	r3, [r3, #0]
 8004aac:	f015 0f02 	tst.w	r5, #2
 8004ab0:	4606      	mov	r6, r0
 8004ab2:	460f      	mov	r7, r1
 8004ab4:	f103 0204 	add.w	r2, r3, #4
 8004ab8:	d015      	beq.n	8004ae6 <_scanf_float+0x3de>
 8004aba:	9903      	ldr	r1, [sp, #12]
 8004abc:	600a      	str	r2, [r1, #0]
 8004abe:	681b      	ldr	r3, [r3, #0]
 8004ac0:	e9c3 6700 	strd	r6, r7, [r3]
 8004ac4:	68e3      	ldr	r3, [r4, #12]
 8004ac6:	3301      	adds	r3, #1
 8004ac8:	60e3      	str	r3, [r4, #12]
 8004aca:	e7d0      	b.n	8004a6e <_scanf_float+0x366>
 8004acc:	9b04      	ldr	r3, [sp, #16]
 8004ace:	2b00      	cmp	r3, #0
 8004ad0:	d0e4      	beq.n	8004a9c <_scanf_float+0x394>
 8004ad2:	9905      	ldr	r1, [sp, #20]
 8004ad4:	230a      	movs	r3, #10
 8004ad6:	4640      	mov	r0, r8
 8004ad8:	3101      	adds	r1, #1
 8004ada:	f002 fc5d 	bl	8007398 <_strtol_r>
 8004ade:	9b04      	ldr	r3, [sp, #16]
 8004ae0:	9e05      	ldr	r6, [sp, #20]
 8004ae2:	1ac2      	subs	r2, r0, r3
 8004ae4:	e7d0      	b.n	8004a88 <_scanf_float+0x380>
 8004ae6:	076d      	lsls	r5, r5, #29
 8004ae8:	d4e7      	bmi.n	8004aba <_scanf_float+0x3b2>
 8004aea:	9d03      	ldr	r5, [sp, #12]
 8004aec:	602a      	str	r2, [r5, #0]
 8004aee:	681d      	ldr	r5, [r3, #0]
 8004af0:	4602      	mov	r2, r0
 8004af2:	460b      	mov	r3, r1
 8004af4:	f7fb ff8a 	bl	8000a0c <__aeabi_dcmpun>
 8004af8:	b120      	cbz	r0, 8004b04 <_scanf_float+0x3fc>
 8004afa:	4807      	ldr	r0, [pc, #28]	@ (8004b18 <_scanf_float+0x410>)
 8004afc:	f000 f9d2 	bl	8004ea4 <nanf>
 8004b00:	6028      	str	r0, [r5, #0]
 8004b02:	e7df      	b.n	8004ac4 <_scanf_float+0x3bc>
 8004b04:	4630      	mov	r0, r6
 8004b06:	4639      	mov	r1, r7
 8004b08:	f7fb ffde 	bl	8000ac8 <__aeabi_d2f>
 8004b0c:	e7f8      	b.n	8004b00 <_scanf_float+0x3f8>
 8004b0e:	2700      	movs	r7, #0
 8004b10:	e633      	b.n	800477a <_scanf_float+0x72>
 8004b12:	bf00      	nop
 8004b14:	080087be 	.word	0x080087be
 8004b18:	080088ff 	.word	0x080088ff

08004b1c <std>:
 8004b1c:	2300      	movs	r3, #0
 8004b1e:	b510      	push	{r4, lr}
 8004b20:	4604      	mov	r4, r0
 8004b22:	e9c0 3300 	strd	r3, r3, [r0]
 8004b26:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8004b2a:	6083      	str	r3, [r0, #8]
 8004b2c:	8181      	strh	r1, [r0, #12]
 8004b2e:	6643      	str	r3, [r0, #100]	@ 0x64
 8004b30:	81c2      	strh	r2, [r0, #14]
 8004b32:	6183      	str	r3, [r0, #24]
 8004b34:	4619      	mov	r1, r3
 8004b36:	2208      	movs	r2, #8
 8004b38:	305c      	adds	r0, #92	@ 0x5c
 8004b3a:	f000 f916 	bl	8004d6a <memset>
 8004b3e:	4b0d      	ldr	r3, [pc, #52]	@ (8004b74 <std+0x58>)
 8004b40:	6224      	str	r4, [r4, #32]
 8004b42:	6263      	str	r3, [r4, #36]	@ 0x24
 8004b44:	4b0c      	ldr	r3, [pc, #48]	@ (8004b78 <std+0x5c>)
 8004b46:	62a3      	str	r3, [r4, #40]	@ 0x28
 8004b48:	4b0c      	ldr	r3, [pc, #48]	@ (8004b7c <std+0x60>)
 8004b4a:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8004b4c:	4b0c      	ldr	r3, [pc, #48]	@ (8004b80 <std+0x64>)
 8004b4e:	6323      	str	r3, [r4, #48]	@ 0x30
 8004b50:	4b0c      	ldr	r3, [pc, #48]	@ (8004b84 <std+0x68>)
 8004b52:	429c      	cmp	r4, r3
 8004b54:	d006      	beq.n	8004b64 <std+0x48>
 8004b56:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8004b5a:	4294      	cmp	r4, r2
 8004b5c:	d002      	beq.n	8004b64 <std+0x48>
 8004b5e:	33d0      	adds	r3, #208	@ 0xd0
 8004b60:	429c      	cmp	r4, r3
 8004b62:	d105      	bne.n	8004b70 <std+0x54>
 8004b64:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8004b68:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004b6c:	f000 b97a 	b.w	8004e64 <__retarget_lock_init_recursive>
 8004b70:	bd10      	pop	{r4, pc}
 8004b72:	bf00      	nop
 8004b74:	08004ce5 	.word	0x08004ce5
 8004b78:	08004d07 	.word	0x08004d07
 8004b7c:	08004d3f 	.word	0x08004d3f
 8004b80:	08004d63 	.word	0x08004d63
 8004b84:	2000067c 	.word	0x2000067c

08004b88 <stdio_exit_handler>:
 8004b88:	4a02      	ldr	r2, [pc, #8]	@ (8004b94 <stdio_exit_handler+0xc>)
 8004b8a:	4903      	ldr	r1, [pc, #12]	@ (8004b98 <stdio_exit_handler+0x10>)
 8004b8c:	4803      	ldr	r0, [pc, #12]	@ (8004b9c <stdio_exit_handler+0x14>)
 8004b8e:	f000 b869 	b.w	8004c64 <_fwalk_sglue>
 8004b92:	bf00      	nop
 8004b94:	2000000c 	.word	0x2000000c
 8004b98:	0800774d 	.word	0x0800774d
 8004b9c:	2000001c 	.word	0x2000001c

08004ba0 <cleanup_stdio>:
 8004ba0:	6841      	ldr	r1, [r0, #4]
 8004ba2:	4b0c      	ldr	r3, [pc, #48]	@ (8004bd4 <cleanup_stdio+0x34>)
 8004ba4:	b510      	push	{r4, lr}
 8004ba6:	4299      	cmp	r1, r3
 8004ba8:	4604      	mov	r4, r0
 8004baa:	d001      	beq.n	8004bb0 <cleanup_stdio+0x10>
 8004bac:	f002 fdce 	bl	800774c <_fflush_r>
 8004bb0:	68a1      	ldr	r1, [r4, #8]
 8004bb2:	4b09      	ldr	r3, [pc, #36]	@ (8004bd8 <cleanup_stdio+0x38>)
 8004bb4:	4299      	cmp	r1, r3
 8004bb6:	d002      	beq.n	8004bbe <cleanup_stdio+0x1e>
 8004bb8:	4620      	mov	r0, r4
 8004bba:	f002 fdc7 	bl	800774c <_fflush_r>
 8004bbe:	68e1      	ldr	r1, [r4, #12]
 8004bc0:	4b06      	ldr	r3, [pc, #24]	@ (8004bdc <cleanup_stdio+0x3c>)
 8004bc2:	4299      	cmp	r1, r3
 8004bc4:	d004      	beq.n	8004bd0 <cleanup_stdio+0x30>
 8004bc6:	4620      	mov	r0, r4
 8004bc8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004bcc:	f002 bdbe 	b.w	800774c <_fflush_r>
 8004bd0:	bd10      	pop	{r4, pc}
 8004bd2:	bf00      	nop
 8004bd4:	2000067c 	.word	0x2000067c
 8004bd8:	200006e4 	.word	0x200006e4
 8004bdc:	2000074c 	.word	0x2000074c

08004be0 <global_stdio_init.part.0>:
 8004be0:	b510      	push	{r4, lr}
 8004be2:	4b0b      	ldr	r3, [pc, #44]	@ (8004c10 <global_stdio_init.part.0+0x30>)
 8004be4:	4c0b      	ldr	r4, [pc, #44]	@ (8004c14 <global_stdio_init.part.0+0x34>)
 8004be6:	4a0c      	ldr	r2, [pc, #48]	@ (8004c18 <global_stdio_init.part.0+0x38>)
 8004be8:	4620      	mov	r0, r4
 8004bea:	601a      	str	r2, [r3, #0]
 8004bec:	2104      	movs	r1, #4
 8004bee:	2200      	movs	r2, #0
 8004bf0:	f7ff ff94 	bl	8004b1c <std>
 8004bf4:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8004bf8:	2201      	movs	r2, #1
 8004bfa:	2109      	movs	r1, #9
 8004bfc:	f7ff ff8e 	bl	8004b1c <std>
 8004c00:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8004c04:	2202      	movs	r2, #2
 8004c06:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004c0a:	2112      	movs	r1, #18
 8004c0c:	f7ff bf86 	b.w	8004b1c <std>
 8004c10:	200007b4 	.word	0x200007b4
 8004c14:	2000067c 	.word	0x2000067c
 8004c18:	08004b89 	.word	0x08004b89

08004c1c <__sfp_lock_acquire>:
 8004c1c:	4801      	ldr	r0, [pc, #4]	@ (8004c24 <__sfp_lock_acquire+0x8>)
 8004c1e:	f000 b922 	b.w	8004e66 <__retarget_lock_acquire_recursive>
 8004c22:	bf00      	nop
 8004c24:	200007bd 	.word	0x200007bd

08004c28 <__sfp_lock_release>:
 8004c28:	4801      	ldr	r0, [pc, #4]	@ (8004c30 <__sfp_lock_release+0x8>)
 8004c2a:	f000 b91d 	b.w	8004e68 <__retarget_lock_release_recursive>
 8004c2e:	bf00      	nop
 8004c30:	200007bd 	.word	0x200007bd

08004c34 <__sinit>:
 8004c34:	b510      	push	{r4, lr}
 8004c36:	4604      	mov	r4, r0
 8004c38:	f7ff fff0 	bl	8004c1c <__sfp_lock_acquire>
 8004c3c:	6a23      	ldr	r3, [r4, #32]
 8004c3e:	b11b      	cbz	r3, 8004c48 <__sinit+0x14>
 8004c40:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004c44:	f7ff bff0 	b.w	8004c28 <__sfp_lock_release>
 8004c48:	4b04      	ldr	r3, [pc, #16]	@ (8004c5c <__sinit+0x28>)
 8004c4a:	6223      	str	r3, [r4, #32]
 8004c4c:	4b04      	ldr	r3, [pc, #16]	@ (8004c60 <__sinit+0x2c>)
 8004c4e:	681b      	ldr	r3, [r3, #0]
 8004c50:	2b00      	cmp	r3, #0
 8004c52:	d1f5      	bne.n	8004c40 <__sinit+0xc>
 8004c54:	f7ff ffc4 	bl	8004be0 <global_stdio_init.part.0>
 8004c58:	e7f2      	b.n	8004c40 <__sinit+0xc>
 8004c5a:	bf00      	nop
 8004c5c:	08004ba1 	.word	0x08004ba1
 8004c60:	200007b4 	.word	0x200007b4

08004c64 <_fwalk_sglue>:
 8004c64:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8004c68:	4607      	mov	r7, r0
 8004c6a:	4688      	mov	r8, r1
 8004c6c:	4614      	mov	r4, r2
 8004c6e:	2600      	movs	r6, #0
 8004c70:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8004c74:	f1b9 0901 	subs.w	r9, r9, #1
 8004c78:	d505      	bpl.n	8004c86 <_fwalk_sglue+0x22>
 8004c7a:	6824      	ldr	r4, [r4, #0]
 8004c7c:	2c00      	cmp	r4, #0
 8004c7e:	d1f7      	bne.n	8004c70 <_fwalk_sglue+0xc>
 8004c80:	4630      	mov	r0, r6
 8004c82:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8004c86:	89ab      	ldrh	r3, [r5, #12]
 8004c88:	2b01      	cmp	r3, #1
 8004c8a:	d907      	bls.n	8004c9c <_fwalk_sglue+0x38>
 8004c8c:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8004c90:	3301      	adds	r3, #1
 8004c92:	d003      	beq.n	8004c9c <_fwalk_sglue+0x38>
 8004c94:	4629      	mov	r1, r5
 8004c96:	4638      	mov	r0, r7
 8004c98:	47c0      	blx	r8
 8004c9a:	4306      	orrs	r6, r0
 8004c9c:	3568      	adds	r5, #104	@ 0x68
 8004c9e:	e7e9      	b.n	8004c74 <_fwalk_sglue+0x10>

08004ca0 <siprintf>:
 8004ca0:	b40e      	push	{r1, r2, r3}
 8004ca2:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 8004ca6:	b510      	push	{r4, lr}
 8004ca8:	2400      	movs	r4, #0
 8004caa:	b09d      	sub	sp, #116	@ 0x74
 8004cac:	ab1f      	add	r3, sp, #124	@ 0x7c
 8004cae:	9002      	str	r0, [sp, #8]
 8004cb0:	9006      	str	r0, [sp, #24]
 8004cb2:	9107      	str	r1, [sp, #28]
 8004cb4:	9104      	str	r1, [sp, #16]
 8004cb6:	4809      	ldr	r0, [pc, #36]	@ (8004cdc <siprintf+0x3c>)
 8004cb8:	4909      	ldr	r1, [pc, #36]	@ (8004ce0 <siprintf+0x40>)
 8004cba:	f853 2b04 	ldr.w	r2, [r3], #4
 8004cbe:	9105      	str	r1, [sp, #20]
 8004cc0:	6800      	ldr	r0, [r0, #0]
 8004cc2:	a902      	add	r1, sp, #8
 8004cc4:	9301      	str	r3, [sp, #4]
 8004cc6:	941b      	str	r4, [sp, #108]	@ 0x6c
 8004cc8:	f002 fbc4 	bl	8007454 <_svfiprintf_r>
 8004ccc:	9b02      	ldr	r3, [sp, #8]
 8004cce:	701c      	strb	r4, [r3, #0]
 8004cd0:	b01d      	add	sp, #116	@ 0x74
 8004cd2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004cd6:	b003      	add	sp, #12
 8004cd8:	4770      	bx	lr
 8004cda:	bf00      	nop
 8004cdc:	20000018 	.word	0x20000018
 8004ce0:	ffff0208 	.word	0xffff0208

08004ce4 <__sread>:
 8004ce4:	b510      	push	{r4, lr}
 8004ce6:	460c      	mov	r4, r1
 8004ce8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004cec:	f000 f86c 	bl	8004dc8 <_read_r>
 8004cf0:	2800      	cmp	r0, #0
 8004cf2:	bfab      	itete	ge
 8004cf4:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8004cf6:	89a3      	ldrhlt	r3, [r4, #12]
 8004cf8:	181b      	addge	r3, r3, r0
 8004cfa:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8004cfe:	bfac      	ite	ge
 8004d00:	6563      	strge	r3, [r4, #84]	@ 0x54
 8004d02:	81a3      	strhlt	r3, [r4, #12]
 8004d04:	bd10      	pop	{r4, pc}

08004d06 <__swrite>:
 8004d06:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004d0a:	461f      	mov	r7, r3
 8004d0c:	898b      	ldrh	r3, [r1, #12]
 8004d0e:	4605      	mov	r5, r0
 8004d10:	05db      	lsls	r3, r3, #23
 8004d12:	460c      	mov	r4, r1
 8004d14:	4616      	mov	r6, r2
 8004d16:	d505      	bpl.n	8004d24 <__swrite+0x1e>
 8004d18:	2302      	movs	r3, #2
 8004d1a:	2200      	movs	r2, #0
 8004d1c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004d20:	f000 f840 	bl	8004da4 <_lseek_r>
 8004d24:	89a3      	ldrh	r3, [r4, #12]
 8004d26:	4632      	mov	r2, r6
 8004d28:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8004d2c:	81a3      	strh	r3, [r4, #12]
 8004d2e:	4628      	mov	r0, r5
 8004d30:	463b      	mov	r3, r7
 8004d32:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8004d36:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8004d3a:	f000 b857 	b.w	8004dec <_write_r>

08004d3e <__sseek>:
 8004d3e:	b510      	push	{r4, lr}
 8004d40:	460c      	mov	r4, r1
 8004d42:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004d46:	f000 f82d 	bl	8004da4 <_lseek_r>
 8004d4a:	1c43      	adds	r3, r0, #1
 8004d4c:	89a3      	ldrh	r3, [r4, #12]
 8004d4e:	bf15      	itete	ne
 8004d50:	6560      	strne	r0, [r4, #84]	@ 0x54
 8004d52:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8004d56:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8004d5a:	81a3      	strheq	r3, [r4, #12]
 8004d5c:	bf18      	it	ne
 8004d5e:	81a3      	strhne	r3, [r4, #12]
 8004d60:	bd10      	pop	{r4, pc}

08004d62 <__sclose>:
 8004d62:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004d66:	f000 b80d 	b.w	8004d84 <_close_r>

08004d6a <memset>:
 8004d6a:	4603      	mov	r3, r0
 8004d6c:	4402      	add	r2, r0
 8004d6e:	4293      	cmp	r3, r2
 8004d70:	d100      	bne.n	8004d74 <memset+0xa>
 8004d72:	4770      	bx	lr
 8004d74:	f803 1b01 	strb.w	r1, [r3], #1
 8004d78:	e7f9      	b.n	8004d6e <memset+0x4>
	...

08004d7c <_localeconv_r>:
 8004d7c:	4800      	ldr	r0, [pc, #0]	@ (8004d80 <_localeconv_r+0x4>)
 8004d7e:	4770      	bx	lr
 8004d80:	20000158 	.word	0x20000158

08004d84 <_close_r>:
 8004d84:	b538      	push	{r3, r4, r5, lr}
 8004d86:	2300      	movs	r3, #0
 8004d88:	4d05      	ldr	r5, [pc, #20]	@ (8004da0 <_close_r+0x1c>)
 8004d8a:	4604      	mov	r4, r0
 8004d8c:	4608      	mov	r0, r1
 8004d8e:	602b      	str	r3, [r5, #0]
 8004d90:	f7fc fe6f 	bl	8001a72 <_close>
 8004d94:	1c43      	adds	r3, r0, #1
 8004d96:	d102      	bne.n	8004d9e <_close_r+0x1a>
 8004d98:	682b      	ldr	r3, [r5, #0]
 8004d9a:	b103      	cbz	r3, 8004d9e <_close_r+0x1a>
 8004d9c:	6023      	str	r3, [r4, #0]
 8004d9e:	bd38      	pop	{r3, r4, r5, pc}
 8004da0:	200007b8 	.word	0x200007b8

08004da4 <_lseek_r>:
 8004da4:	b538      	push	{r3, r4, r5, lr}
 8004da6:	4604      	mov	r4, r0
 8004da8:	4608      	mov	r0, r1
 8004daa:	4611      	mov	r1, r2
 8004dac:	2200      	movs	r2, #0
 8004dae:	4d05      	ldr	r5, [pc, #20]	@ (8004dc4 <_lseek_r+0x20>)
 8004db0:	602a      	str	r2, [r5, #0]
 8004db2:	461a      	mov	r2, r3
 8004db4:	f7fc fe81 	bl	8001aba <_lseek>
 8004db8:	1c43      	adds	r3, r0, #1
 8004dba:	d102      	bne.n	8004dc2 <_lseek_r+0x1e>
 8004dbc:	682b      	ldr	r3, [r5, #0]
 8004dbe:	b103      	cbz	r3, 8004dc2 <_lseek_r+0x1e>
 8004dc0:	6023      	str	r3, [r4, #0]
 8004dc2:	bd38      	pop	{r3, r4, r5, pc}
 8004dc4:	200007b8 	.word	0x200007b8

08004dc8 <_read_r>:
 8004dc8:	b538      	push	{r3, r4, r5, lr}
 8004dca:	4604      	mov	r4, r0
 8004dcc:	4608      	mov	r0, r1
 8004dce:	4611      	mov	r1, r2
 8004dd0:	2200      	movs	r2, #0
 8004dd2:	4d05      	ldr	r5, [pc, #20]	@ (8004de8 <_read_r+0x20>)
 8004dd4:	602a      	str	r2, [r5, #0]
 8004dd6:	461a      	mov	r2, r3
 8004dd8:	f7fc fe12 	bl	8001a00 <_read>
 8004ddc:	1c43      	adds	r3, r0, #1
 8004dde:	d102      	bne.n	8004de6 <_read_r+0x1e>
 8004de0:	682b      	ldr	r3, [r5, #0]
 8004de2:	b103      	cbz	r3, 8004de6 <_read_r+0x1e>
 8004de4:	6023      	str	r3, [r4, #0]
 8004de6:	bd38      	pop	{r3, r4, r5, pc}
 8004de8:	200007b8 	.word	0x200007b8

08004dec <_write_r>:
 8004dec:	b538      	push	{r3, r4, r5, lr}
 8004dee:	4604      	mov	r4, r0
 8004df0:	4608      	mov	r0, r1
 8004df2:	4611      	mov	r1, r2
 8004df4:	2200      	movs	r2, #0
 8004df6:	4d05      	ldr	r5, [pc, #20]	@ (8004e0c <_write_r+0x20>)
 8004df8:	602a      	str	r2, [r5, #0]
 8004dfa:	461a      	mov	r2, r3
 8004dfc:	f7fc fe1d 	bl	8001a3a <_write>
 8004e00:	1c43      	adds	r3, r0, #1
 8004e02:	d102      	bne.n	8004e0a <_write_r+0x1e>
 8004e04:	682b      	ldr	r3, [r5, #0]
 8004e06:	b103      	cbz	r3, 8004e0a <_write_r+0x1e>
 8004e08:	6023      	str	r3, [r4, #0]
 8004e0a:	bd38      	pop	{r3, r4, r5, pc}
 8004e0c:	200007b8 	.word	0x200007b8

08004e10 <__errno>:
 8004e10:	4b01      	ldr	r3, [pc, #4]	@ (8004e18 <__errno+0x8>)
 8004e12:	6818      	ldr	r0, [r3, #0]
 8004e14:	4770      	bx	lr
 8004e16:	bf00      	nop
 8004e18:	20000018 	.word	0x20000018

08004e1c <__libc_init_array>:
 8004e1c:	b570      	push	{r4, r5, r6, lr}
 8004e1e:	2600      	movs	r6, #0
 8004e20:	4d0c      	ldr	r5, [pc, #48]	@ (8004e54 <__libc_init_array+0x38>)
 8004e22:	4c0d      	ldr	r4, [pc, #52]	@ (8004e58 <__libc_init_array+0x3c>)
 8004e24:	1b64      	subs	r4, r4, r5
 8004e26:	10a4      	asrs	r4, r4, #2
 8004e28:	42a6      	cmp	r6, r4
 8004e2a:	d109      	bne.n	8004e40 <__libc_init_array+0x24>
 8004e2c:	f003 fb6c 	bl	8008508 <_init>
 8004e30:	2600      	movs	r6, #0
 8004e32:	4d0a      	ldr	r5, [pc, #40]	@ (8004e5c <__libc_init_array+0x40>)
 8004e34:	4c0a      	ldr	r4, [pc, #40]	@ (8004e60 <__libc_init_array+0x44>)
 8004e36:	1b64      	subs	r4, r4, r5
 8004e38:	10a4      	asrs	r4, r4, #2
 8004e3a:	42a6      	cmp	r6, r4
 8004e3c:	d105      	bne.n	8004e4a <__libc_init_array+0x2e>
 8004e3e:	bd70      	pop	{r4, r5, r6, pc}
 8004e40:	f855 3b04 	ldr.w	r3, [r5], #4
 8004e44:	4798      	blx	r3
 8004e46:	3601      	adds	r6, #1
 8004e48:	e7ee      	b.n	8004e28 <__libc_init_array+0xc>
 8004e4a:	f855 3b04 	ldr.w	r3, [r5], #4
 8004e4e:	4798      	blx	r3
 8004e50:	3601      	adds	r6, #1
 8004e52:	e7f2      	b.n	8004e3a <__libc_init_array+0x1e>
 8004e54:	08008bbc 	.word	0x08008bbc
 8004e58:	08008bbc 	.word	0x08008bbc
 8004e5c:	08008bbc 	.word	0x08008bbc
 8004e60:	08008bc0 	.word	0x08008bc0

08004e64 <__retarget_lock_init_recursive>:
 8004e64:	4770      	bx	lr

08004e66 <__retarget_lock_acquire_recursive>:
 8004e66:	4770      	bx	lr

08004e68 <__retarget_lock_release_recursive>:
 8004e68:	4770      	bx	lr

08004e6a <memchr>:
 8004e6a:	4603      	mov	r3, r0
 8004e6c:	b510      	push	{r4, lr}
 8004e6e:	b2c9      	uxtb	r1, r1
 8004e70:	4402      	add	r2, r0
 8004e72:	4293      	cmp	r3, r2
 8004e74:	4618      	mov	r0, r3
 8004e76:	d101      	bne.n	8004e7c <memchr+0x12>
 8004e78:	2000      	movs	r0, #0
 8004e7a:	e003      	b.n	8004e84 <memchr+0x1a>
 8004e7c:	7804      	ldrb	r4, [r0, #0]
 8004e7e:	3301      	adds	r3, #1
 8004e80:	428c      	cmp	r4, r1
 8004e82:	d1f6      	bne.n	8004e72 <memchr+0x8>
 8004e84:	bd10      	pop	{r4, pc}

08004e86 <memcpy>:
 8004e86:	440a      	add	r2, r1
 8004e88:	4291      	cmp	r1, r2
 8004e8a:	f100 33ff 	add.w	r3, r0, #4294967295
 8004e8e:	d100      	bne.n	8004e92 <memcpy+0xc>
 8004e90:	4770      	bx	lr
 8004e92:	b510      	push	{r4, lr}
 8004e94:	f811 4b01 	ldrb.w	r4, [r1], #1
 8004e98:	4291      	cmp	r1, r2
 8004e9a:	f803 4f01 	strb.w	r4, [r3, #1]!
 8004e9e:	d1f9      	bne.n	8004e94 <memcpy+0xe>
 8004ea0:	bd10      	pop	{r4, pc}
	...

08004ea4 <nanf>:
 8004ea4:	4800      	ldr	r0, [pc, #0]	@ (8004ea8 <nanf+0x4>)
 8004ea6:	4770      	bx	lr
 8004ea8:	7fc00000 	.word	0x7fc00000

08004eac <quorem>:
 8004eac:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004eb0:	6903      	ldr	r3, [r0, #16]
 8004eb2:	690c      	ldr	r4, [r1, #16]
 8004eb4:	4607      	mov	r7, r0
 8004eb6:	42a3      	cmp	r3, r4
 8004eb8:	db7e      	blt.n	8004fb8 <quorem+0x10c>
 8004eba:	3c01      	subs	r4, #1
 8004ebc:	00a3      	lsls	r3, r4, #2
 8004ebe:	f100 0514 	add.w	r5, r0, #20
 8004ec2:	f101 0814 	add.w	r8, r1, #20
 8004ec6:	9300      	str	r3, [sp, #0]
 8004ec8:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8004ecc:	9301      	str	r3, [sp, #4]
 8004ece:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8004ed2:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8004ed6:	3301      	adds	r3, #1
 8004ed8:	429a      	cmp	r2, r3
 8004eda:	fbb2 f6f3 	udiv	r6, r2, r3
 8004ede:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8004ee2:	d32e      	bcc.n	8004f42 <quorem+0x96>
 8004ee4:	f04f 0a00 	mov.w	sl, #0
 8004ee8:	46c4      	mov	ip, r8
 8004eea:	46ae      	mov	lr, r5
 8004eec:	46d3      	mov	fp, sl
 8004eee:	f85c 3b04 	ldr.w	r3, [ip], #4
 8004ef2:	b298      	uxth	r0, r3
 8004ef4:	fb06 a000 	mla	r0, r6, r0, sl
 8004ef8:	0c1b      	lsrs	r3, r3, #16
 8004efa:	0c02      	lsrs	r2, r0, #16
 8004efc:	fb06 2303 	mla	r3, r6, r3, r2
 8004f00:	f8de 2000 	ldr.w	r2, [lr]
 8004f04:	b280      	uxth	r0, r0
 8004f06:	b292      	uxth	r2, r2
 8004f08:	1a12      	subs	r2, r2, r0
 8004f0a:	445a      	add	r2, fp
 8004f0c:	f8de 0000 	ldr.w	r0, [lr]
 8004f10:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8004f14:	b29b      	uxth	r3, r3
 8004f16:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 8004f1a:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 8004f1e:	b292      	uxth	r2, r2
 8004f20:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 8004f24:	45e1      	cmp	r9, ip
 8004f26:	ea4f 4b23 	mov.w	fp, r3, asr #16
 8004f2a:	f84e 2b04 	str.w	r2, [lr], #4
 8004f2e:	d2de      	bcs.n	8004eee <quorem+0x42>
 8004f30:	9b00      	ldr	r3, [sp, #0]
 8004f32:	58eb      	ldr	r3, [r5, r3]
 8004f34:	b92b      	cbnz	r3, 8004f42 <quorem+0x96>
 8004f36:	9b01      	ldr	r3, [sp, #4]
 8004f38:	3b04      	subs	r3, #4
 8004f3a:	429d      	cmp	r5, r3
 8004f3c:	461a      	mov	r2, r3
 8004f3e:	d32f      	bcc.n	8004fa0 <quorem+0xf4>
 8004f40:	613c      	str	r4, [r7, #16]
 8004f42:	4638      	mov	r0, r7
 8004f44:	f001 f9ca 	bl	80062dc <__mcmp>
 8004f48:	2800      	cmp	r0, #0
 8004f4a:	db25      	blt.n	8004f98 <quorem+0xec>
 8004f4c:	4629      	mov	r1, r5
 8004f4e:	2000      	movs	r0, #0
 8004f50:	f858 2b04 	ldr.w	r2, [r8], #4
 8004f54:	f8d1 c000 	ldr.w	ip, [r1]
 8004f58:	fa1f fe82 	uxth.w	lr, r2
 8004f5c:	fa1f f38c 	uxth.w	r3, ip
 8004f60:	eba3 030e 	sub.w	r3, r3, lr
 8004f64:	4403      	add	r3, r0
 8004f66:	0c12      	lsrs	r2, r2, #16
 8004f68:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 8004f6c:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 8004f70:	b29b      	uxth	r3, r3
 8004f72:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8004f76:	45c1      	cmp	r9, r8
 8004f78:	ea4f 4022 	mov.w	r0, r2, asr #16
 8004f7c:	f841 3b04 	str.w	r3, [r1], #4
 8004f80:	d2e6      	bcs.n	8004f50 <quorem+0xa4>
 8004f82:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8004f86:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8004f8a:	b922      	cbnz	r2, 8004f96 <quorem+0xea>
 8004f8c:	3b04      	subs	r3, #4
 8004f8e:	429d      	cmp	r5, r3
 8004f90:	461a      	mov	r2, r3
 8004f92:	d30b      	bcc.n	8004fac <quorem+0x100>
 8004f94:	613c      	str	r4, [r7, #16]
 8004f96:	3601      	adds	r6, #1
 8004f98:	4630      	mov	r0, r6
 8004f9a:	b003      	add	sp, #12
 8004f9c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004fa0:	6812      	ldr	r2, [r2, #0]
 8004fa2:	3b04      	subs	r3, #4
 8004fa4:	2a00      	cmp	r2, #0
 8004fa6:	d1cb      	bne.n	8004f40 <quorem+0x94>
 8004fa8:	3c01      	subs	r4, #1
 8004faa:	e7c6      	b.n	8004f3a <quorem+0x8e>
 8004fac:	6812      	ldr	r2, [r2, #0]
 8004fae:	3b04      	subs	r3, #4
 8004fb0:	2a00      	cmp	r2, #0
 8004fb2:	d1ef      	bne.n	8004f94 <quorem+0xe8>
 8004fb4:	3c01      	subs	r4, #1
 8004fb6:	e7ea      	b.n	8004f8e <quorem+0xe2>
 8004fb8:	2000      	movs	r0, #0
 8004fba:	e7ee      	b.n	8004f9a <quorem+0xee>
 8004fbc:	0000      	movs	r0, r0
	...

08004fc0 <_dtoa_r>:
 8004fc0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004fc4:	4614      	mov	r4, r2
 8004fc6:	461d      	mov	r5, r3
 8004fc8:	69c7      	ldr	r7, [r0, #28]
 8004fca:	b097      	sub	sp, #92	@ 0x5c
 8004fcc:	4681      	mov	r9, r0
 8004fce:	e9cd 4506 	strd	r4, r5, [sp, #24]
 8004fd2:	9e23      	ldr	r6, [sp, #140]	@ 0x8c
 8004fd4:	b97f      	cbnz	r7, 8004ff6 <_dtoa_r+0x36>
 8004fd6:	2010      	movs	r0, #16
 8004fd8:	f000 fe0e 	bl	8005bf8 <malloc>
 8004fdc:	4602      	mov	r2, r0
 8004fde:	f8c9 001c 	str.w	r0, [r9, #28]
 8004fe2:	b920      	cbnz	r0, 8004fee <_dtoa_r+0x2e>
 8004fe4:	21ef      	movs	r1, #239	@ 0xef
 8004fe6:	4bac      	ldr	r3, [pc, #688]	@ (8005298 <_dtoa_r+0x2d8>)
 8004fe8:	48ac      	ldr	r0, [pc, #688]	@ (800529c <_dtoa_r+0x2dc>)
 8004fea:	f002 fc19 	bl	8007820 <__assert_func>
 8004fee:	e9c0 7701 	strd	r7, r7, [r0, #4]
 8004ff2:	6007      	str	r7, [r0, #0]
 8004ff4:	60c7      	str	r7, [r0, #12]
 8004ff6:	f8d9 301c 	ldr.w	r3, [r9, #28]
 8004ffa:	6819      	ldr	r1, [r3, #0]
 8004ffc:	b159      	cbz	r1, 8005016 <_dtoa_r+0x56>
 8004ffe:	685a      	ldr	r2, [r3, #4]
 8005000:	2301      	movs	r3, #1
 8005002:	4093      	lsls	r3, r2
 8005004:	604a      	str	r2, [r1, #4]
 8005006:	608b      	str	r3, [r1, #8]
 8005008:	4648      	mov	r0, r9
 800500a:	f000 feeb 	bl	8005de4 <_Bfree>
 800500e:	2200      	movs	r2, #0
 8005010:	f8d9 301c 	ldr.w	r3, [r9, #28]
 8005014:	601a      	str	r2, [r3, #0]
 8005016:	1e2b      	subs	r3, r5, #0
 8005018:	bfaf      	iteee	ge
 800501a:	2300      	movge	r3, #0
 800501c:	2201      	movlt	r2, #1
 800501e:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 8005022:	9307      	strlt	r3, [sp, #28]
 8005024:	bfa8      	it	ge
 8005026:	6033      	strge	r3, [r6, #0]
 8005028:	f8dd 801c 	ldr.w	r8, [sp, #28]
 800502c:	4b9c      	ldr	r3, [pc, #624]	@ (80052a0 <_dtoa_r+0x2e0>)
 800502e:	bfb8      	it	lt
 8005030:	6032      	strlt	r2, [r6, #0]
 8005032:	ea33 0308 	bics.w	r3, r3, r8
 8005036:	d112      	bne.n	800505e <_dtoa_r+0x9e>
 8005038:	f242 730f 	movw	r3, #9999	@ 0x270f
 800503c:	9a22      	ldr	r2, [sp, #136]	@ 0x88
 800503e:	6013      	str	r3, [r2, #0]
 8005040:	f3c8 0313 	ubfx	r3, r8, #0, #20
 8005044:	4323      	orrs	r3, r4
 8005046:	f000 855e 	beq.w	8005b06 <_dtoa_r+0xb46>
 800504a:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 800504c:	f8df a254 	ldr.w	sl, [pc, #596]	@ 80052a4 <_dtoa_r+0x2e4>
 8005050:	2b00      	cmp	r3, #0
 8005052:	f000 8560 	beq.w	8005b16 <_dtoa_r+0xb56>
 8005056:	f10a 0303 	add.w	r3, sl, #3
 800505a:	f000 bd5a 	b.w	8005b12 <_dtoa_r+0xb52>
 800505e:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8005062:	e9cd 230c 	strd	r2, r3, [sp, #48]	@ 0x30
 8005066:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800506a:	2200      	movs	r2, #0
 800506c:	2300      	movs	r3, #0
 800506e:	f7fb fc9b 	bl	80009a8 <__aeabi_dcmpeq>
 8005072:	4607      	mov	r7, r0
 8005074:	b158      	cbz	r0, 800508e <_dtoa_r+0xce>
 8005076:	2301      	movs	r3, #1
 8005078:	9a22      	ldr	r2, [sp, #136]	@ 0x88
 800507a:	6013      	str	r3, [r2, #0]
 800507c:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 800507e:	b113      	cbz	r3, 8005086 <_dtoa_r+0xc6>
 8005080:	4b89      	ldr	r3, [pc, #548]	@ (80052a8 <_dtoa_r+0x2e8>)
 8005082:	9a24      	ldr	r2, [sp, #144]	@ 0x90
 8005084:	6013      	str	r3, [r2, #0]
 8005086:	f8df a224 	ldr.w	sl, [pc, #548]	@ 80052ac <_dtoa_r+0x2ec>
 800508a:	f000 bd44 	b.w	8005b16 <_dtoa_r+0xb56>
 800508e:	ab14      	add	r3, sp, #80	@ 0x50
 8005090:	9301      	str	r3, [sp, #4]
 8005092:	ab15      	add	r3, sp, #84	@ 0x54
 8005094:	9300      	str	r3, [sp, #0]
 8005096:	4648      	mov	r0, r9
 8005098:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	@ 0x30
 800509c:	f001 fa36 	bl	800650c <__d2b>
 80050a0:	f3c8 560a 	ubfx	r6, r8, #20, #11
 80050a4:	9003      	str	r0, [sp, #12]
 80050a6:	2e00      	cmp	r6, #0
 80050a8:	d078      	beq.n	800519c <_dtoa_r+0x1dc>
 80050aa:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 80050ae:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 80050b0:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 80050b4:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80050b8:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 80050bc:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 80050c0:	9712      	str	r7, [sp, #72]	@ 0x48
 80050c2:	4619      	mov	r1, r3
 80050c4:	2200      	movs	r2, #0
 80050c6:	4b7a      	ldr	r3, [pc, #488]	@ (80052b0 <_dtoa_r+0x2f0>)
 80050c8:	f7fb f84e 	bl	8000168 <__aeabi_dsub>
 80050cc:	a36c      	add	r3, pc, #432	@ (adr r3, 8005280 <_dtoa_r+0x2c0>)
 80050ce:	e9d3 2300 	ldrd	r2, r3, [r3]
 80050d2:	f7fb fa01 	bl	80004d8 <__aeabi_dmul>
 80050d6:	a36c      	add	r3, pc, #432	@ (adr r3, 8005288 <_dtoa_r+0x2c8>)
 80050d8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80050dc:	f7fb f846 	bl	800016c <__adddf3>
 80050e0:	4604      	mov	r4, r0
 80050e2:	4630      	mov	r0, r6
 80050e4:	460d      	mov	r5, r1
 80050e6:	f7fb f98d 	bl	8000404 <__aeabi_i2d>
 80050ea:	a369      	add	r3, pc, #420	@ (adr r3, 8005290 <_dtoa_r+0x2d0>)
 80050ec:	e9d3 2300 	ldrd	r2, r3, [r3]
 80050f0:	f7fb f9f2 	bl	80004d8 <__aeabi_dmul>
 80050f4:	4602      	mov	r2, r0
 80050f6:	460b      	mov	r3, r1
 80050f8:	4620      	mov	r0, r4
 80050fa:	4629      	mov	r1, r5
 80050fc:	f7fb f836 	bl	800016c <__adddf3>
 8005100:	4604      	mov	r4, r0
 8005102:	460d      	mov	r5, r1
 8005104:	f7fb fc98 	bl	8000a38 <__aeabi_d2iz>
 8005108:	2200      	movs	r2, #0
 800510a:	4607      	mov	r7, r0
 800510c:	2300      	movs	r3, #0
 800510e:	4620      	mov	r0, r4
 8005110:	4629      	mov	r1, r5
 8005112:	f7fb fc53 	bl	80009bc <__aeabi_dcmplt>
 8005116:	b140      	cbz	r0, 800512a <_dtoa_r+0x16a>
 8005118:	4638      	mov	r0, r7
 800511a:	f7fb f973 	bl	8000404 <__aeabi_i2d>
 800511e:	4622      	mov	r2, r4
 8005120:	462b      	mov	r3, r5
 8005122:	f7fb fc41 	bl	80009a8 <__aeabi_dcmpeq>
 8005126:	b900      	cbnz	r0, 800512a <_dtoa_r+0x16a>
 8005128:	3f01      	subs	r7, #1
 800512a:	2f16      	cmp	r7, #22
 800512c:	d854      	bhi.n	80051d8 <_dtoa_r+0x218>
 800512e:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8005132:	4b60      	ldr	r3, [pc, #384]	@ (80052b4 <_dtoa_r+0x2f4>)
 8005134:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8005138:	e9d3 2300 	ldrd	r2, r3, [r3]
 800513c:	f7fb fc3e 	bl	80009bc <__aeabi_dcmplt>
 8005140:	2800      	cmp	r0, #0
 8005142:	d04b      	beq.n	80051dc <_dtoa_r+0x21c>
 8005144:	2300      	movs	r3, #0
 8005146:	3f01      	subs	r7, #1
 8005148:	930f      	str	r3, [sp, #60]	@ 0x3c
 800514a:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 800514c:	1b9b      	subs	r3, r3, r6
 800514e:	1e5a      	subs	r2, r3, #1
 8005150:	bf49      	itett	mi
 8005152:	f1c3 0301 	rsbmi	r3, r3, #1
 8005156:	2300      	movpl	r3, #0
 8005158:	9304      	strmi	r3, [sp, #16]
 800515a:	2300      	movmi	r3, #0
 800515c:	9209      	str	r2, [sp, #36]	@ 0x24
 800515e:	bf54      	ite	pl
 8005160:	9304      	strpl	r3, [sp, #16]
 8005162:	9309      	strmi	r3, [sp, #36]	@ 0x24
 8005164:	2f00      	cmp	r7, #0
 8005166:	db3b      	blt.n	80051e0 <_dtoa_r+0x220>
 8005168:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800516a:	970e      	str	r7, [sp, #56]	@ 0x38
 800516c:	443b      	add	r3, r7
 800516e:	9309      	str	r3, [sp, #36]	@ 0x24
 8005170:	2300      	movs	r3, #0
 8005172:	930a      	str	r3, [sp, #40]	@ 0x28
 8005174:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8005176:	2b09      	cmp	r3, #9
 8005178:	d865      	bhi.n	8005246 <_dtoa_r+0x286>
 800517a:	2b05      	cmp	r3, #5
 800517c:	bfc4      	itt	gt
 800517e:	3b04      	subgt	r3, #4
 8005180:	9320      	strgt	r3, [sp, #128]	@ 0x80
 8005182:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8005184:	bfc8      	it	gt
 8005186:	2400      	movgt	r4, #0
 8005188:	f1a3 0302 	sub.w	r3, r3, #2
 800518c:	bfd8      	it	le
 800518e:	2401      	movle	r4, #1
 8005190:	2b03      	cmp	r3, #3
 8005192:	d864      	bhi.n	800525e <_dtoa_r+0x29e>
 8005194:	e8df f003 	tbb	[pc, r3]
 8005198:	2c385553 	.word	0x2c385553
 800519c:	e9dd 6314 	ldrd	r6, r3, [sp, #80]	@ 0x50
 80051a0:	441e      	add	r6, r3
 80051a2:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 80051a6:	2b20      	cmp	r3, #32
 80051a8:	bfc1      	itttt	gt
 80051aa:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 80051ae:	fa08 f803 	lslgt.w	r8, r8, r3
 80051b2:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 80051b6:	fa24 f303 	lsrgt.w	r3, r4, r3
 80051ba:	bfd6      	itet	le
 80051bc:	f1c3 0320 	rsble	r3, r3, #32
 80051c0:	ea48 0003 	orrgt.w	r0, r8, r3
 80051c4:	fa04 f003 	lslle.w	r0, r4, r3
 80051c8:	f7fb f90c 	bl	80003e4 <__aeabi_ui2d>
 80051cc:	2201      	movs	r2, #1
 80051ce:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 80051d2:	3e01      	subs	r6, #1
 80051d4:	9212      	str	r2, [sp, #72]	@ 0x48
 80051d6:	e774      	b.n	80050c2 <_dtoa_r+0x102>
 80051d8:	2301      	movs	r3, #1
 80051da:	e7b5      	b.n	8005148 <_dtoa_r+0x188>
 80051dc:	900f      	str	r0, [sp, #60]	@ 0x3c
 80051de:	e7b4      	b.n	800514a <_dtoa_r+0x18a>
 80051e0:	9b04      	ldr	r3, [sp, #16]
 80051e2:	1bdb      	subs	r3, r3, r7
 80051e4:	9304      	str	r3, [sp, #16]
 80051e6:	427b      	negs	r3, r7
 80051e8:	930a      	str	r3, [sp, #40]	@ 0x28
 80051ea:	2300      	movs	r3, #0
 80051ec:	930e      	str	r3, [sp, #56]	@ 0x38
 80051ee:	e7c1      	b.n	8005174 <_dtoa_r+0x1b4>
 80051f0:	2301      	movs	r3, #1
 80051f2:	930b      	str	r3, [sp, #44]	@ 0x2c
 80051f4:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 80051f6:	eb07 0b03 	add.w	fp, r7, r3
 80051fa:	f10b 0301 	add.w	r3, fp, #1
 80051fe:	2b01      	cmp	r3, #1
 8005200:	9308      	str	r3, [sp, #32]
 8005202:	bfb8      	it	lt
 8005204:	2301      	movlt	r3, #1
 8005206:	e006      	b.n	8005216 <_dtoa_r+0x256>
 8005208:	2301      	movs	r3, #1
 800520a:	930b      	str	r3, [sp, #44]	@ 0x2c
 800520c:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 800520e:	2b00      	cmp	r3, #0
 8005210:	dd28      	ble.n	8005264 <_dtoa_r+0x2a4>
 8005212:	469b      	mov	fp, r3
 8005214:	9308      	str	r3, [sp, #32]
 8005216:	2100      	movs	r1, #0
 8005218:	2204      	movs	r2, #4
 800521a:	f8d9 001c 	ldr.w	r0, [r9, #28]
 800521e:	f102 0514 	add.w	r5, r2, #20
 8005222:	429d      	cmp	r5, r3
 8005224:	d926      	bls.n	8005274 <_dtoa_r+0x2b4>
 8005226:	6041      	str	r1, [r0, #4]
 8005228:	4648      	mov	r0, r9
 800522a:	f000 fd9b 	bl	8005d64 <_Balloc>
 800522e:	4682      	mov	sl, r0
 8005230:	2800      	cmp	r0, #0
 8005232:	d143      	bne.n	80052bc <_dtoa_r+0x2fc>
 8005234:	4602      	mov	r2, r0
 8005236:	f240 11af 	movw	r1, #431	@ 0x1af
 800523a:	4b1f      	ldr	r3, [pc, #124]	@ (80052b8 <_dtoa_r+0x2f8>)
 800523c:	e6d4      	b.n	8004fe8 <_dtoa_r+0x28>
 800523e:	2300      	movs	r3, #0
 8005240:	e7e3      	b.n	800520a <_dtoa_r+0x24a>
 8005242:	2300      	movs	r3, #0
 8005244:	e7d5      	b.n	80051f2 <_dtoa_r+0x232>
 8005246:	2401      	movs	r4, #1
 8005248:	2300      	movs	r3, #0
 800524a:	940b      	str	r4, [sp, #44]	@ 0x2c
 800524c:	9320      	str	r3, [sp, #128]	@ 0x80
 800524e:	f04f 3bff 	mov.w	fp, #4294967295
 8005252:	2200      	movs	r2, #0
 8005254:	2312      	movs	r3, #18
 8005256:	f8cd b020 	str.w	fp, [sp, #32]
 800525a:	9221      	str	r2, [sp, #132]	@ 0x84
 800525c:	e7db      	b.n	8005216 <_dtoa_r+0x256>
 800525e:	2301      	movs	r3, #1
 8005260:	930b      	str	r3, [sp, #44]	@ 0x2c
 8005262:	e7f4      	b.n	800524e <_dtoa_r+0x28e>
 8005264:	f04f 0b01 	mov.w	fp, #1
 8005268:	465b      	mov	r3, fp
 800526a:	f8cd b020 	str.w	fp, [sp, #32]
 800526e:	f8cd b084 	str.w	fp, [sp, #132]	@ 0x84
 8005272:	e7d0      	b.n	8005216 <_dtoa_r+0x256>
 8005274:	3101      	adds	r1, #1
 8005276:	0052      	lsls	r2, r2, #1
 8005278:	e7d1      	b.n	800521e <_dtoa_r+0x25e>
 800527a:	bf00      	nop
 800527c:	f3af 8000 	nop.w
 8005280:	636f4361 	.word	0x636f4361
 8005284:	3fd287a7 	.word	0x3fd287a7
 8005288:	8b60c8b3 	.word	0x8b60c8b3
 800528c:	3fc68a28 	.word	0x3fc68a28
 8005290:	509f79fb 	.word	0x509f79fb
 8005294:	3fd34413 	.word	0x3fd34413
 8005298:	080087d0 	.word	0x080087d0
 800529c:	080087e7 	.word	0x080087e7
 80052a0:	7ff00000 	.word	0x7ff00000
 80052a4:	080087cc 	.word	0x080087cc
 80052a8:	0800879b 	.word	0x0800879b
 80052ac:	0800879a 	.word	0x0800879a
 80052b0:	3ff80000 	.word	0x3ff80000
 80052b4:	08008998 	.word	0x08008998
 80052b8:	0800883f 	.word	0x0800883f
 80052bc:	f8d9 301c 	ldr.w	r3, [r9, #28]
 80052c0:	6018      	str	r0, [r3, #0]
 80052c2:	9b08      	ldr	r3, [sp, #32]
 80052c4:	2b0e      	cmp	r3, #14
 80052c6:	f200 80a1 	bhi.w	800540c <_dtoa_r+0x44c>
 80052ca:	2c00      	cmp	r4, #0
 80052cc:	f000 809e 	beq.w	800540c <_dtoa_r+0x44c>
 80052d0:	2f00      	cmp	r7, #0
 80052d2:	dd33      	ble.n	800533c <_dtoa_r+0x37c>
 80052d4:	4b9c      	ldr	r3, [pc, #624]	@ (8005548 <_dtoa_r+0x588>)
 80052d6:	f007 020f 	and.w	r2, r7, #15
 80052da:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80052de:	05f8      	lsls	r0, r7, #23
 80052e0:	e9d3 3400 	ldrd	r3, r4, [r3]
 80052e4:	e9cd 3410 	strd	r3, r4, [sp, #64]	@ 0x40
 80052e8:	ea4f 1427 	mov.w	r4, r7, asr #4
 80052ec:	d516      	bpl.n	800531c <_dtoa_r+0x35c>
 80052ee:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 80052f2:	4b96      	ldr	r3, [pc, #600]	@ (800554c <_dtoa_r+0x58c>)
 80052f4:	2603      	movs	r6, #3
 80052f6:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 80052fa:	f7fb fa17 	bl	800072c <__aeabi_ddiv>
 80052fe:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8005302:	f004 040f 	and.w	r4, r4, #15
 8005306:	4d91      	ldr	r5, [pc, #580]	@ (800554c <_dtoa_r+0x58c>)
 8005308:	b954      	cbnz	r4, 8005320 <_dtoa_r+0x360>
 800530a:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800530e:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8005312:	f7fb fa0b 	bl	800072c <__aeabi_ddiv>
 8005316:	e9cd 0106 	strd	r0, r1, [sp, #24]
 800531a:	e028      	b.n	800536e <_dtoa_r+0x3ae>
 800531c:	2602      	movs	r6, #2
 800531e:	e7f2      	b.n	8005306 <_dtoa_r+0x346>
 8005320:	07e1      	lsls	r1, r4, #31
 8005322:	d508      	bpl.n	8005336 <_dtoa_r+0x376>
 8005324:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 8005328:	e9d5 2300 	ldrd	r2, r3, [r5]
 800532c:	f7fb f8d4 	bl	80004d8 <__aeabi_dmul>
 8005330:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8005334:	3601      	adds	r6, #1
 8005336:	1064      	asrs	r4, r4, #1
 8005338:	3508      	adds	r5, #8
 800533a:	e7e5      	b.n	8005308 <_dtoa_r+0x348>
 800533c:	f000 80af 	beq.w	800549e <_dtoa_r+0x4de>
 8005340:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8005344:	427c      	negs	r4, r7
 8005346:	4b80      	ldr	r3, [pc, #512]	@ (8005548 <_dtoa_r+0x588>)
 8005348:	f004 020f 	and.w	r2, r4, #15
 800534c:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8005350:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005354:	f7fb f8c0 	bl	80004d8 <__aeabi_dmul>
 8005358:	2602      	movs	r6, #2
 800535a:	2300      	movs	r3, #0
 800535c:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8005360:	4d7a      	ldr	r5, [pc, #488]	@ (800554c <_dtoa_r+0x58c>)
 8005362:	1124      	asrs	r4, r4, #4
 8005364:	2c00      	cmp	r4, #0
 8005366:	f040 808f 	bne.w	8005488 <_dtoa_r+0x4c8>
 800536a:	2b00      	cmp	r3, #0
 800536c:	d1d3      	bne.n	8005316 <_dtoa_r+0x356>
 800536e:	e9dd 4506 	ldrd	r4, r5, [sp, #24]
 8005372:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8005374:	2b00      	cmp	r3, #0
 8005376:	f000 8094 	beq.w	80054a2 <_dtoa_r+0x4e2>
 800537a:	2200      	movs	r2, #0
 800537c:	4620      	mov	r0, r4
 800537e:	4629      	mov	r1, r5
 8005380:	4b73      	ldr	r3, [pc, #460]	@ (8005550 <_dtoa_r+0x590>)
 8005382:	f7fb fb1b 	bl	80009bc <__aeabi_dcmplt>
 8005386:	2800      	cmp	r0, #0
 8005388:	f000 808b 	beq.w	80054a2 <_dtoa_r+0x4e2>
 800538c:	9b08      	ldr	r3, [sp, #32]
 800538e:	2b00      	cmp	r3, #0
 8005390:	f000 8087 	beq.w	80054a2 <_dtoa_r+0x4e2>
 8005394:	f1bb 0f00 	cmp.w	fp, #0
 8005398:	dd34      	ble.n	8005404 <_dtoa_r+0x444>
 800539a:	4620      	mov	r0, r4
 800539c:	2200      	movs	r2, #0
 800539e:	4629      	mov	r1, r5
 80053a0:	4b6c      	ldr	r3, [pc, #432]	@ (8005554 <_dtoa_r+0x594>)
 80053a2:	f7fb f899 	bl	80004d8 <__aeabi_dmul>
 80053a6:	465c      	mov	r4, fp
 80053a8:	e9cd 0106 	strd	r0, r1, [sp, #24]
 80053ac:	f107 38ff 	add.w	r8, r7, #4294967295
 80053b0:	3601      	adds	r6, #1
 80053b2:	4630      	mov	r0, r6
 80053b4:	f7fb f826 	bl	8000404 <__aeabi_i2d>
 80053b8:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 80053bc:	f7fb f88c 	bl	80004d8 <__aeabi_dmul>
 80053c0:	2200      	movs	r2, #0
 80053c2:	4b65      	ldr	r3, [pc, #404]	@ (8005558 <_dtoa_r+0x598>)
 80053c4:	f7fa fed2 	bl	800016c <__adddf3>
 80053c8:	4605      	mov	r5, r0
 80053ca:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 80053ce:	2c00      	cmp	r4, #0
 80053d0:	d16a      	bne.n	80054a8 <_dtoa_r+0x4e8>
 80053d2:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80053d6:	2200      	movs	r2, #0
 80053d8:	4b60      	ldr	r3, [pc, #384]	@ (800555c <_dtoa_r+0x59c>)
 80053da:	f7fa fec5 	bl	8000168 <__aeabi_dsub>
 80053de:	4602      	mov	r2, r0
 80053e0:	460b      	mov	r3, r1
 80053e2:	e9cd 2306 	strd	r2, r3, [sp, #24]
 80053e6:	462a      	mov	r2, r5
 80053e8:	4633      	mov	r3, r6
 80053ea:	f7fb fb05 	bl	80009f8 <__aeabi_dcmpgt>
 80053ee:	2800      	cmp	r0, #0
 80053f0:	f040 8298 	bne.w	8005924 <_dtoa_r+0x964>
 80053f4:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80053f8:	462a      	mov	r2, r5
 80053fa:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 80053fe:	f7fb fadd 	bl	80009bc <__aeabi_dcmplt>
 8005402:	bb38      	cbnz	r0, 8005454 <_dtoa_r+0x494>
 8005404:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	@ 0x30
 8005408:	e9cd 3406 	strd	r3, r4, [sp, #24]
 800540c:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 800540e:	2b00      	cmp	r3, #0
 8005410:	f2c0 8157 	blt.w	80056c2 <_dtoa_r+0x702>
 8005414:	2f0e      	cmp	r7, #14
 8005416:	f300 8154 	bgt.w	80056c2 <_dtoa_r+0x702>
 800541a:	4b4b      	ldr	r3, [pc, #300]	@ (8005548 <_dtoa_r+0x588>)
 800541c:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8005420:	e9d3 3400 	ldrd	r3, r4, [r3]
 8005424:	e9cd 3404 	strd	r3, r4, [sp, #16]
 8005428:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 800542a:	2b00      	cmp	r3, #0
 800542c:	f280 80e5 	bge.w	80055fa <_dtoa_r+0x63a>
 8005430:	9b08      	ldr	r3, [sp, #32]
 8005432:	2b00      	cmp	r3, #0
 8005434:	f300 80e1 	bgt.w	80055fa <_dtoa_r+0x63a>
 8005438:	d10c      	bne.n	8005454 <_dtoa_r+0x494>
 800543a:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800543e:	2200      	movs	r2, #0
 8005440:	4b46      	ldr	r3, [pc, #280]	@ (800555c <_dtoa_r+0x59c>)
 8005442:	f7fb f849 	bl	80004d8 <__aeabi_dmul>
 8005446:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800544a:	f7fb facb 	bl	80009e4 <__aeabi_dcmpge>
 800544e:	2800      	cmp	r0, #0
 8005450:	f000 8266 	beq.w	8005920 <_dtoa_r+0x960>
 8005454:	2400      	movs	r4, #0
 8005456:	4625      	mov	r5, r4
 8005458:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 800545a:	4656      	mov	r6, sl
 800545c:	ea6f 0803 	mvn.w	r8, r3
 8005460:	2700      	movs	r7, #0
 8005462:	4621      	mov	r1, r4
 8005464:	4648      	mov	r0, r9
 8005466:	f000 fcbd 	bl	8005de4 <_Bfree>
 800546a:	2d00      	cmp	r5, #0
 800546c:	f000 80bd 	beq.w	80055ea <_dtoa_r+0x62a>
 8005470:	b12f      	cbz	r7, 800547e <_dtoa_r+0x4be>
 8005472:	42af      	cmp	r7, r5
 8005474:	d003      	beq.n	800547e <_dtoa_r+0x4be>
 8005476:	4639      	mov	r1, r7
 8005478:	4648      	mov	r0, r9
 800547a:	f000 fcb3 	bl	8005de4 <_Bfree>
 800547e:	4629      	mov	r1, r5
 8005480:	4648      	mov	r0, r9
 8005482:	f000 fcaf 	bl	8005de4 <_Bfree>
 8005486:	e0b0      	b.n	80055ea <_dtoa_r+0x62a>
 8005488:	07e2      	lsls	r2, r4, #31
 800548a:	d505      	bpl.n	8005498 <_dtoa_r+0x4d8>
 800548c:	e9d5 2300 	ldrd	r2, r3, [r5]
 8005490:	f7fb f822 	bl	80004d8 <__aeabi_dmul>
 8005494:	2301      	movs	r3, #1
 8005496:	3601      	adds	r6, #1
 8005498:	1064      	asrs	r4, r4, #1
 800549a:	3508      	adds	r5, #8
 800549c:	e762      	b.n	8005364 <_dtoa_r+0x3a4>
 800549e:	2602      	movs	r6, #2
 80054a0:	e765      	b.n	800536e <_dtoa_r+0x3ae>
 80054a2:	46b8      	mov	r8, r7
 80054a4:	9c08      	ldr	r4, [sp, #32]
 80054a6:	e784      	b.n	80053b2 <_dtoa_r+0x3f2>
 80054a8:	4b27      	ldr	r3, [pc, #156]	@ (8005548 <_dtoa_r+0x588>)
 80054aa:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 80054ac:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 80054b0:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 80054b4:	4454      	add	r4, sl
 80054b6:	2900      	cmp	r1, #0
 80054b8:	d054      	beq.n	8005564 <_dtoa_r+0x5a4>
 80054ba:	2000      	movs	r0, #0
 80054bc:	4928      	ldr	r1, [pc, #160]	@ (8005560 <_dtoa_r+0x5a0>)
 80054be:	f7fb f935 	bl	800072c <__aeabi_ddiv>
 80054c2:	4633      	mov	r3, r6
 80054c4:	462a      	mov	r2, r5
 80054c6:	f7fa fe4f 	bl	8000168 <__aeabi_dsub>
 80054ca:	4656      	mov	r6, sl
 80054cc:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 80054d0:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80054d4:	f7fb fab0 	bl	8000a38 <__aeabi_d2iz>
 80054d8:	4605      	mov	r5, r0
 80054da:	f7fa ff93 	bl	8000404 <__aeabi_i2d>
 80054de:	4602      	mov	r2, r0
 80054e0:	460b      	mov	r3, r1
 80054e2:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80054e6:	f7fa fe3f 	bl	8000168 <__aeabi_dsub>
 80054ea:	4602      	mov	r2, r0
 80054ec:	460b      	mov	r3, r1
 80054ee:	3530      	adds	r5, #48	@ 0x30
 80054f0:	e9cd 2306 	strd	r2, r3, [sp, #24]
 80054f4:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 80054f8:	f806 5b01 	strb.w	r5, [r6], #1
 80054fc:	f7fb fa5e 	bl	80009bc <__aeabi_dcmplt>
 8005500:	2800      	cmp	r0, #0
 8005502:	d172      	bne.n	80055ea <_dtoa_r+0x62a>
 8005504:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8005508:	2000      	movs	r0, #0
 800550a:	4911      	ldr	r1, [pc, #68]	@ (8005550 <_dtoa_r+0x590>)
 800550c:	f7fa fe2c 	bl	8000168 <__aeabi_dsub>
 8005510:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8005514:	f7fb fa52 	bl	80009bc <__aeabi_dcmplt>
 8005518:	2800      	cmp	r0, #0
 800551a:	f040 80b4 	bne.w	8005686 <_dtoa_r+0x6c6>
 800551e:	42a6      	cmp	r6, r4
 8005520:	f43f af70 	beq.w	8005404 <_dtoa_r+0x444>
 8005524:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 8005528:	2200      	movs	r2, #0
 800552a:	4b0a      	ldr	r3, [pc, #40]	@ (8005554 <_dtoa_r+0x594>)
 800552c:	f7fa ffd4 	bl	80004d8 <__aeabi_dmul>
 8005530:	2200      	movs	r2, #0
 8005532:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8005536:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800553a:	4b06      	ldr	r3, [pc, #24]	@ (8005554 <_dtoa_r+0x594>)
 800553c:	f7fa ffcc 	bl	80004d8 <__aeabi_dmul>
 8005540:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8005544:	e7c4      	b.n	80054d0 <_dtoa_r+0x510>
 8005546:	bf00      	nop
 8005548:	08008998 	.word	0x08008998
 800554c:	08008970 	.word	0x08008970
 8005550:	3ff00000 	.word	0x3ff00000
 8005554:	40240000 	.word	0x40240000
 8005558:	401c0000 	.word	0x401c0000
 800555c:	40140000 	.word	0x40140000
 8005560:	3fe00000 	.word	0x3fe00000
 8005564:	4631      	mov	r1, r6
 8005566:	4628      	mov	r0, r5
 8005568:	f7fa ffb6 	bl	80004d8 <__aeabi_dmul>
 800556c:	4656      	mov	r6, sl
 800556e:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8005572:	9413      	str	r4, [sp, #76]	@ 0x4c
 8005574:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8005578:	f7fb fa5e 	bl	8000a38 <__aeabi_d2iz>
 800557c:	4605      	mov	r5, r0
 800557e:	f7fa ff41 	bl	8000404 <__aeabi_i2d>
 8005582:	4602      	mov	r2, r0
 8005584:	460b      	mov	r3, r1
 8005586:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800558a:	f7fa fded 	bl	8000168 <__aeabi_dsub>
 800558e:	4602      	mov	r2, r0
 8005590:	460b      	mov	r3, r1
 8005592:	3530      	adds	r5, #48	@ 0x30
 8005594:	f806 5b01 	strb.w	r5, [r6], #1
 8005598:	42a6      	cmp	r6, r4
 800559a:	e9cd 2306 	strd	r2, r3, [sp, #24]
 800559e:	f04f 0200 	mov.w	r2, #0
 80055a2:	d124      	bne.n	80055ee <_dtoa_r+0x62e>
 80055a4:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 80055a8:	4bae      	ldr	r3, [pc, #696]	@ (8005864 <_dtoa_r+0x8a4>)
 80055aa:	f7fa fddf 	bl	800016c <__adddf3>
 80055ae:	4602      	mov	r2, r0
 80055b0:	460b      	mov	r3, r1
 80055b2:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80055b6:	f7fb fa1f 	bl	80009f8 <__aeabi_dcmpgt>
 80055ba:	2800      	cmp	r0, #0
 80055bc:	d163      	bne.n	8005686 <_dtoa_r+0x6c6>
 80055be:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 80055c2:	2000      	movs	r0, #0
 80055c4:	49a7      	ldr	r1, [pc, #668]	@ (8005864 <_dtoa_r+0x8a4>)
 80055c6:	f7fa fdcf 	bl	8000168 <__aeabi_dsub>
 80055ca:	4602      	mov	r2, r0
 80055cc:	460b      	mov	r3, r1
 80055ce:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80055d2:	f7fb f9f3 	bl	80009bc <__aeabi_dcmplt>
 80055d6:	2800      	cmp	r0, #0
 80055d8:	f43f af14 	beq.w	8005404 <_dtoa_r+0x444>
 80055dc:	9e13      	ldr	r6, [sp, #76]	@ 0x4c
 80055de:	1e73      	subs	r3, r6, #1
 80055e0:	9313      	str	r3, [sp, #76]	@ 0x4c
 80055e2:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 80055e6:	2b30      	cmp	r3, #48	@ 0x30
 80055e8:	d0f8      	beq.n	80055dc <_dtoa_r+0x61c>
 80055ea:	4647      	mov	r7, r8
 80055ec:	e03b      	b.n	8005666 <_dtoa_r+0x6a6>
 80055ee:	4b9e      	ldr	r3, [pc, #632]	@ (8005868 <_dtoa_r+0x8a8>)
 80055f0:	f7fa ff72 	bl	80004d8 <__aeabi_dmul>
 80055f4:	e9cd 0106 	strd	r0, r1, [sp, #24]
 80055f8:	e7bc      	b.n	8005574 <_dtoa_r+0x5b4>
 80055fa:	4656      	mov	r6, sl
 80055fc:	e9dd 4506 	ldrd	r4, r5, [sp, #24]
 8005600:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8005604:	4620      	mov	r0, r4
 8005606:	4629      	mov	r1, r5
 8005608:	f7fb f890 	bl	800072c <__aeabi_ddiv>
 800560c:	f7fb fa14 	bl	8000a38 <__aeabi_d2iz>
 8005610:	4680      	mov	r8, r0
 8005612:	f7fa fef7 	bl	8000404 <__aeabi_i2d>
 8005616:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800561a:	f7fa ff5d 	bl	80004d8 <__aeabi_dmul>
 800561e:	4602      	mov	r2, r0
 8005620:	460b      	mov	r3, r1
 8005622:	4620      	mov	r0, r4
 8005624:	4629      	mov	r1, r5
 8005626:	f7fa fd9f 	bl	8000168 <__aeabi_dsub>
 800562a:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 800562e:	9d08      	ldr	r5, [sp, #32]
 8005630:	f806 4b01 	strb.w	r4, [r6], #1
 8005634:	eba6 040a 	sub.w	r4, r6, sl
 8005638:	42a5      	cmp	r5, r4
 800563a:	4602      	mov	r2, r0
 800563c:	460b      	mov	r3, r1
 800563e:	d133      	bne.n	80056a8 <_dtoa_r+0x6e8>
 8005640:	f7fa fd94 	bl	800016c <__adddf3>
 8005644:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8005648:	4604      	mov	r4, r0
 800564a:	460d      	mov	r5, r1
 800564c:	f7fb f9d4 	bl	80009f8 <__aeabi_dcmpgt>
 8005650:	b9c0      	cbnz	r0, 8005684 <_dtoa_r+0x6c4>
 8005652:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8005656:	4620      	mov	r0, r4
 8005658:	4629      	mov	r1, r5
 800565a:	f7fb f9a5 	bl	80009a8 <__aeabi_dcmpeq>
 800565e:	b110      	cbz	r0, 8005666 <_dtoa_r+0x6a6>
 8005660:	f018 0f01 	tst.w	r8, #1
 8005664:	d10e      	bne.n	8005684 <_dtoa_r+0x6c4>
 8005666:	4648      	mov	r0, r9
 8005668:	9903      	ldr	r1, [sp, #12]
 800566a:	f000 fbbb 	bl	8005de4 <_Bfree>
 800566e:	2300      	movs	r3, #0
 8005670:	7033      	strb	r3, [r6, #0]
 8005672:	9b22      	ldr	r3, [sp, #136]	@ 0x88
 8005674:	3701      	adds	r7, #1
 8005676:	601f      	str	r7, [r3, #0]
 8005678:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 800567a:	2b00      	cmp	r3, #0
 800567c:	f000 824b 	beq.w	8005b16 <_dtoa_r+0xb56>
 8005680:	601e      	str	r6, [r3, #0]
 8005682:	e248      	b.n	8005b16 <_dtoa_r+0xb56>
 8005684:	46b8      	mov	r8, r7
 8005686:	4633      	mov	r3, r6
 8005688:	461e      	mov	r6, r3
 800568a:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800568e:	2a39      	cmp	r2, #57	@ 0x39
 8005690:	d106      	bne.n	80056a0 <_dtoa_r+0x6e0>
 8005692:	459a      	cmp	sl, r3
 8005694:	d1f8      	bne.n	8005688 <_dtoa_r+0x6c8>
 8005696:	2230      	movs	r2, #48	@ 0x30
 8005698:	f108 0801 	add.w	r8, r8, #1
 800569c:	f88a 2000 	strb.w	r2, [sl]
 80056a0:	781a      	ldrb	r2, [r3, #0]
 80056a2:	3201      	adds	r2, #1
 80056a4:	701a      	strb	r2, [r3, #0]
 80056a6:	e7a0      	b.n	80055ea <_dtoa_r+0x62a>
 80056a8:	2200      	movs	r2, #0
 80056aa:	4b6f      	ldr	r3, [pc, #444]	@ (8005868 <_dtoa_r+0x8a8>)
 80056ac:	f7fa ff14 	bl	80004d8 <__aeabi_dmul>
 80056b0:	2200      	movs	r2, #0
 80056b2:	2300      	movs	r3, #0
 80056b4:	4604      	mov	r4, r0
 80056b6:	460d      	mov	r5, r1
 80056b8:	f7fb f976 	bl	80009a8 <__aeabi_dcmpeq>
 80056bc:	2800      	cmp	r0, #0
 80056be:	d09f      	beq.n	8005600 <_dtoa_r+0x640>
 80056c0:	e7d1      	b.n	8005666 <_dtoa_r+0x6a6>
 80056c2:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 80056c4:	2a00      	cmp	r2, #0
 80056c6:	f000 80ea 	beq.w	800589e <_dtoa_r+0x8de>
 80056ca:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 80056cc:	2a01      	cmp	r2, #1
 80056ce:	f300 80cd 	bgt.w	800586c <_dtoa_r+0x8ac>
 80056d2:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 80056d4:	2a00      	cmp	r2, #0
 80056d6:	f000 80c1 	beq.w	800585c <_dtoa_r+0x89c>
 80056da:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 80056de:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 80056e0:	9e04      	ldr	r6, [sp, #16]
 80056e2:	9a04      	ldr	r2, [sp, #16]
 80056e4:	2101      	movs	r1, #1
 80056e6:	441a      	add	r2, r3
 80056e8:	9204      	str	r2, [sp, #16]
 80056ea:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80056ec:	4648      	mov	r0, r9
 80056ee:	441a      	add	r2, r3
 80056f0:	9209      	str	r2, [sp, #36]	@ 0x24
 80056f2:	f000 fc75 	bl	8005fe0 <__i2b>
 80056f6:	4605      	mov	r5, r0
 80056f8:	b166      	cbz	r6, 8005714 <_dtoa_r+0x754>
 80056fa:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80056fc:	2b00      	cmp	r3, #0
 80056fe:	dd09      	ble.n	8005714 <_dtoa_r+0x754>
 8005700:	42b3      	cmp	r3, r6
 8005702:	bfa8      	it	ge
 8005704:	4633      	movge	r3, r6
 8005706:	9a04      	ldr	r2, [sp, #16]
 8005708:	1af6      	subs	r6, r6, r3
 800570a:	1ad2      	subs	r2, r2, r3
 800570c:	9204      	str	r2, [sp, #16]
 800570e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8005710:	1ad3      	subs	r3, r2, r3
 8005712:	9309      	str	r3, [sp, #36]	@ 0x24
 8005714:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8005716:	b30b      	cbz	r3, 800575c <_dtoa_r+0x79c>
 8005718:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800571a:	2b00      	cmp	r3, #0
 800571c:	f000 80c6 	beq.w	80058ac <_dtoa_r+0x8ec>
 8005720:	2c00      	cmp	r4, #0
 8005722:	f000 80c0 	beq.w	80058a6 <_dtoa_r+0x8e6>
 8005726:	4629      	mov	r1, r5
 8005728:	4622      	mov	r2, r4
 800572a:	4648      	mov	r0, r9
 800572c:	f000 fd10 	bl	8006150 <__pow5mult>
 8005730:	9a03      	ldr	r2, [sp, #12]
 8005732:	4601      	mov	r1, r0
 8005734:	4605      	mov	r5, r0
 8005736:	4648      	mov	r0, r9
 8005738:	f000 fc68 	bl	800600c <__multiply>
 800573c:	9903      	ldr	r1, [sp, #12]
 800573e:	4680      	mov	r8, r0
 8005740:	4648      	mov	r0, r9
 8005742:	f000 fb4f 	bl	8005de4 <_Bfree>
 8005746:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8005748:	1b1b      	subs	r3, r3, r4
 800574a:	930a      	str	r3, [sp, #40]	@ 0x28
 800574c:	f000 80b1 	beq.w	80058b2 <_dtoa_r+0x8f2>
 8005750:	4641      	mov	r1, r8
 8005752:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8005754:	4648      	mov	r0, r9
 8005756:	f000 fcfb 	bl	8006150 <__pow5mult>
 800575a:	9003      	str	r0, [sp, #12]
 800575c:	2101      	movs	r1, #1
 800575e:	4648      	mov	r0, r9
 8005760:	f000 fc3e 	bl	8005fe0 <__i2b>
 8005764:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8005766:	4604      	mov	r4, r0
 8005768:	2b00      	cmp	r3, #0
 800576a:	f000 81d8 	beq.w	8005b1e <_dtoa_r+0xb5e>
 800576e:	461a      	mov	r2, r3
 8005770:	4601      	mov	r1, r0
 8005772:	4648      	mov	r0, r9
 8005774:	f000 fcec 	bl	8006150 <__pow5mult>
 8005778:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 800577a:	4604      	mov	r4, r0
 800577c:	2b01      	cmp	r3, #1
 800577e:	f300 809f 	bgt.w	80058c0 <_dtoa_r+0x900>
 8005782:	9b06      	ldr	r3, [sp, #24]
 8005784:	2b00      	cmp	r3, #0
 8005786:	f040 8097 	bne.w	80058b8 <_dtoa_r+0x8f8>
 800578a:	9b07      	ldr	r3, [sp, #28]
 800578c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8005790:	2b00      	cmp	r3, #0
 8005792:	f040 8093 	bne.w	80058bc <_dtoa_r+0x8fc>
 8005796:	9b07      	ldr	r3, [sp, #28]
 8005798:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800579c:	0d1b      	lsrs	r3, r3, #20
 800579e:	051b      	lsls	r3, r3, #20
 80057a0:	b133      	cbz	r3, 80057b0 <_dtoa_r+0x7f0>
 80057a2:	9b04      	ldr	r3, [sp, #16]
 80057a4:	3301      	adds	r3, #1
 80057a6:	9304      	str	r3, [sp, #16]
 80057a8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80057aa:	3301      	adds	r3, #1
 80057ac:	9309      	str	r3, [sp, #36]	@ 0x24
 80057ae:	2301      	movs	r3, #1
 80057b0:	930a      	str	r3, [sp, #40]	@ 0x28
 80057b2:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80057b4:	2b00      	cmp	r3, #0
 80057b6:	f000 81b8 	beq.w	8005b2a <_dtoa_r+0xb6a>
 80057ba:	6923      	ldr	r3, [r4, #16]
 80057bc:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 80057c0:	6918      	ldr	r0, [r3, #16]
 80057c2:	f000 fbc1 	bl	8005f48 <__hi0bits>
 80057c6:	f1c0 0020 	rsb	r0, r0, #32
 80057ca:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80057cc:	4418      	add	r0, r3
 80057ce:	f010 001f 	ands.w	r0, r0, #31
 80057d2:	f000 8082 	beq.w	80058da <_dtoa_r+0x91a>
 80057d6:	f1c0 0320 	rsb	r3, r0, #32
 80057da:	2b04      	cmp	r3, #4
 80057dc:	dd73      	ble.n	80058c6 <_dtoa_r+0x906>
 80057de:	9b04      	ldr	r3, [sp, #16]
 80057e0:	f1c0 001c 	rsb	r0, r0, #28
 80057e4:	4403      	add	r3, r0
 80057e6:	9304      	str	r3, [sp, #16]
 80057e8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80057ea:	4406      	add	r6, r0
 80057ec:	4403      	add	r3, r0
 80057ee:	9309      	str	r3, [sp, #36]	@ 0x24
 80057f0:	9b04      	ldr	r3, [sp, #16]
 80057f2:	2b00      	cmp	r3, #0
 80057f4:	dd05      	ble.n	8005802 <_dtoa_r+0x842>
 80057f6:	461a      	mov	r2, r3
 80057f8:	4648      	mov	r0, r9
 80057fa:	9903      	ldr	r1, [sp, #12]
 80057fc:	f000 fd02 	bl	8006204 <__lshift>
 8005800:	9003      	str	r0, [sp, #12]
 8005802:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005804:	2b00      	cmp	r3, #0
 8005806:	dd05      	ble.n	8005814 <_dtoa_r+0x854>
 8005808:	4621      	mov	r1, r4
 800580a:	461a      	mov	r2, r3
 800580c:	4648      	mov	r0, r9
 800580e:	f000 fcf9 	bl	8006204 <__lshift>
 8005812:	4604      	mov	r4, r0
 8005814:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8005816:	2b00      	cmp	r3, #0
 8005818:	d061      	beq.n	80058de <_dtoa_r+0x91e>
 800581a:	4621      	mov	r1, r4
 800581c:	9803      	ldr	r0, [sp, #12]
 800581e:	f000 fd5d 	bl	80062dc <__mcmp>
 8005822:	2800      	cmp	r0, #0
 8005824:	da5b      	bge.n	80058de <_dtoa_r+0x91e>
 8005826:	2300      	movs	r3, #0
 8005828:	220a      	movs	r2, #10
 800582a:	4648      	mov	r0, r9
 800582c:	9903      	ldr	r1, [sp, #12]
 800582e:	f000 fafb 	bl	8005e28 <__multadd>
 8005832:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8005834:	f107 38ff 	add.w	r8, r7, #4294967295
 8005838:	9003      	str	r0, [sp, #12]
 800583a:	2b00      	cmp	r3, #0
 800583c:	f000 8177 	beq.w	8005b2e <_dtoa_r+0xb6e>
 8005840:	4629      	mov	r1, r5
 8005842:	2300      	movs	r3, #0
 8005844:	220a      	movs	r2, #10
 8005846:	4648      	mov	r0, r9
 8005848:	f000 faee 	bl	8005e28 <__multadd>
 800584c:	f1bb 0f00 	cmp.w	fp, #0
 8005850:	4605      	mov	r5, r0
 8005852:	dc6f      	bgt.n	8005934 <_dtoa_r+0x974>
 8005854:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8005856:	2b02      	cmp	r3, #2
 8005858:	dc49      	bgt.n	80058ee <_dtoa_r+0x92e>
 800585a:	e06b      	b.n	8005934 <_dtoa_r+0x974>
 800585c:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 800585e:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 8005862:	e73c      	b.n	80056de <_dtoa_r+0x71e>
 8005864:	3fe00000 	.word	0x3fe00000
 8005868:	40240000 	.word	0x40240000
 800586c:	9b08      	ldr	r3, [sp, #32]
 800586e:	1e5c      	subs	r4, r3, #1
 8005870:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8005872:	42a3      	cmp	r3, r4
 8005874:	db09      	blt.n	800588a <_dtoa_r+0x8ca>
 8005876:	1b1c      	subs	r4, r3, r4
 8005878:	9b08      	ldr	r3, [sp, #32]
 800587a:	2b00      	cmp	r3, #0
 800587c:	f6bf af30 	bge.w	80056e0 <_dtoa_r+0x720>
 8005880:	9b04      	ldr	r3, [sp, #16]
 8005882:	9a08      	ldr	r2, [sp, #32]
 8005884:	1a9e      	subs	r6, r3, r2
 8005886:	2300      	movs	r3, #0
 8005888:	e72b      	b.n	80056e2 <_dtoa_r+0x722>
 800588a:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800588c:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800588e:	1ae3      	subs	r3, r4, r3
 8005890:	441a      	add	r2, r3
 8005892:	940a      	str	r4, [sp, #40]	@ 0x28
 8005894:	9e04      	ldr	r6, [sp, #16]
 8005896:	2400      	movs	r4, #0
 8005898:	9b08      	ldr	r3, [sp, #32]
 800589a:	920e      	str	r2, [sp, #56]	@ 0x38
 800589c:	e721      	b.n	80056e2 <_dtoa_r+0x722>
 800589e:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 80058a0:	9e04      	ldr	r6, [sp, #16]
 80058a2:	9d0b      	ldr	r5, [sp, #44]	@ 0x2c
 80058a4:	e728      	b.n	80056f8 <_dtoa_r+0x738>
 80058a6:	f8dd 800c 	ldr.w	r8, [sp, #12]
 80058aa:	e751      	b.n	8005750 <_dtoa_r+0x790>
 80058ac:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 80058ae:	9903      	ldr	r1, [sp, #12]
 80058b0:	e750      	b.n	8005754 <_dtoa_r+0x794>
 80058b2:	f8cd 800c 	str.w	r8, [sp, #12]
 80058b6:	e751      	b.n	800575c <_dtoa_r+0x79c>
 80058b8:	2300      	movs	r3, #0
 80058ba:	e779      	b.n	80057b0 <_dtoa_r+0x7f0>
 80058bc:	9b06      	ldr	r3, [sp, #24]
 80058be:	e777      	b.n	80057b0 <_dtoa_r+0x7f0>
 80058c0:	2300      	movs	r3, #0
 80058c2:	930a      	str	r3, [sp, #40]	@ 0x28
 80058c4:	e779      	b.n	80057ba <_dtoa_r+0x7fa>
 80058c6:	d093      	beq.n	80057f0 <_dtoa_r+0x830>
 80058c8:	9a04      	ldr	r2, [sp, #16]
 80058ca:	331c      	adds	r3, #28
 80058cc:	441a      	add	r2, r3
 80058ce:	9204      	str	r2, [sp, #16]
 80058d0:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80058d2:	441e      	add	r6, r3
 80058d4:	441a      	add	r2, r3
 80058d6:	9209      	str	r2, [sp, #36]	@ 0x24
 80058d8:	e78a      	b.n	80057f0 <_dtoa_r+0x830>
 80058da:	4603      	mov	r3, r0
 80058dc:	e7f4      	b.n	80058c8 <_dtoa_r+0x908>
 80058de:	9b08      	ldr	r3, [sp, #32]
 80058e0:	46b8      	mov	r8, r7
 80058e2:	2b00      	cmp	r3, #0
 80058e4:	dc20      	bgt.n	8005928 <_dtoa_r+0x968>
 80058e6:	469b      	mov	fp, r3
 80058e8:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 80058ea:	2b02      	cmp	r3, #2
 80058ec:	dd1e      	ble.n	800592c <_dtoa_r+0x96c>
 80058ee:	f1bb 0f00 	cmp.w	fp, #0
 80058f2:	f47f adb1 	bne.w	8005458 <_dtoa_r+0x498>
 80058f6:	4621      	mov	r1, r4
 80058f8:	465b      	mov	r3, fp
 80058fa:	2205      	movs	r2, #5
 80058fc:	4648      	mov	r0, r9
 80058fe:	f000 fa93 	bl	8005e28 <__multadd>
 8005902:	4601      	mov	r1, r0
 8005904:	4604      	mov	r4, r0
 8005906:	9803      	ldr	r0, [sp, #12]
 8005908:	f000 fce8 	bl	80062dc <__mcmp>
 800590c:	2800      	cmp	r0, #0
 800590e:	f77f ada3 	ble.w	8005458 <_dtoa_r+0x498>
 8005912:	4656      	mov	r6, sl
 8005914:	2331      	movs	r3, #49	@ 0x31
 8005916:	f108 0801 	add.w	r8, r8, #1
 800591a:	f806 3b01 	strb.w	r3, [r6], #1
 800591e:	e59f      	b.n	8005460 <_dtoa_r+0x4a0>
 8005920:	46b8      	mov	r8, r7
 8005922:	9c08      	ldr	r4, [sp, #32]
 8005924:	4625      	mov	r5, r4
 8005926:	e7f4      	b.n	8005912 <_dtoa_r+0x952>
 8005928:	f8dd b020 	ldr.w	fp, [sp, #32]
 800592c:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800592e:	2b00      	cmp	r3, #0
 8005930:	f000 8101 	beq.w	8005b36 <_dtoa_r+0xb76>
 8005934:	2e00      	cmp	r6, #0
 8005936:	dd05      	ble.n	8005944 <_dtoa_r+0x984>
 8005938:	4629      	mov	r1, r5
 800593a:	4632      	mov	r2, r6
 800593c:	4648      	mov	r0, r9
 800593e:	f000 fc61 	bl	8006204 <__lshift>
 8005942:	4605      	mov	r5, r0
 8005944:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8005946:	2b00      	cmp	r3, #0
 8005948:	d05c      	beq.n	8005a04 <_dtoa_r+0xa44>
 800594a:	4648      	mov	r0, r9
 800594c:	6869      	ldr	r1, [r5, #4]
 800594e:	f000 fa09 	bl	8005d64 <_Balloc>
 8005952:	4606      	mov	r6, r0
 8005954:	b928      	cbnz	r0, 8005962 <_dtoa_r+0x9a2>
 8005956:	4602      	mov	r2, r0
 8005958:	f240 21ef 	movw	r1, #751	@ 0x2ef
 800595c:	4b80      	ldr	r3, [pc, #512]	@ (8005b60 <_dtoa_r+0xba0>)
 800595e:	f7ff bb43 	b.w	8004fe8 <_dtoa_r+0x28>
 8005962:	692a      	ldr	r2, [r5, #16]
 8005964:	f105 010c 	add.w	r1, r5, #12
 8005968:	3202      	adds	r2, #2
 800596a:	0092      	lsls	r2, r2, #2
 800596c:	300c      	adds	r0, #12
 800596e:	f7ff fa8a 	bl	8004e86 <memcpy>
 8005972:	2201      	movs	r2, #1
 8005974:	4631      	mov	r1, r6
 8005976:	4648      	mov	r0, r9
 8005978:	f000 fc44 	bl	8006204 <__lshift>
 800597c:	462f      	mov	r7, r5
 800597e:	4605      	mov	r5, r0
 8005980:	f10a 0301 	add.w	r3, sl, #1
 8005984:	9304      	str	r3, [sp, #16]
 8005986:	eb0a 030b 	add.w	r3, sl, fp
 800598a:	930a      	str	r3, [sp, #40]	@ 0x28
 800598c:	9b06      	ldr	r3, [sp, #24]
 800598e:	f003 0301 	and.w	r3, r3, #1
 8005992:	9309      	str	r3, [sp, #36]	@ 0x24
 8005994:	9b04      	ldr	r3, [sp, #16]
 8005996:	4621      	mov	r1, r4
 8005998:	9803      	ldr	r0, [sp, #12]
 800599a:	f103 3bff 	add.w	fp, r3, #4294967295
 800599e:	f7ff fa85 	bl	8004eac <quorem>
 80059a2:	4603      	mov	r3, r0
 80059a4:	4639      	mov	r1, r7
 80059a6:	3330      	adds	r3, #48	@ 0x30
 80059a8:	9006      	str	r0, [sp, #24]
 80059aa:	9803      	ldr	r0, [sp, #12]
 80059ac:	930b      	str	r3, [sp, #44]	@ 0x2c
 80059ae:	f000 fc95 	bl	80062dc <__mcmp>
 80059b2:	462a      	mov	r2, r5
 80059b4:	9008      	str	r0, [sp, #32]
 80059b6:	4621      	mov	r1, r4
 80059b8:	4648      	mov	r0, r9
 80059ba:	f000 fcab 	bl	8006314 <__mdiff>
 80059be:	68c2      	ldr	r2, [r0, #12]
 80059c0:	4606      	mov	r6, r0
 80059c2:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80059c4:	bb02      	cbnz	r2, 8005a08 <_dtoa_r+0xa48>
 80059c6:	4601      	mov	r1, r0
 80059c8:	9803      	ldr	r0, [sp, #12]
 80059ca:	f000 fc87 	bl	80062dc <__mcmp>
 80059ce:	4602      	mov	r2, r0
 80059d0:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80059d2:	4631      	mov	r1, r6
 80059d4:	4648      	mov	r0, r9
 80059d6:	e9cd 320b 	strd	r3, r2, [sp, #44]	@ 0x2c
 80059da:	f000 fa03 	bl	8005de4 <_Bfree>
 80059de:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 80059e0:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 80059e2:	9e04      	ldr	r6, [sp, #16]
 80059e4:	ea42 0103 	orr.w	r1, r2, r3
 80059e8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80059ea:	4319      	orrs	r1, r3
 80059ec:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80059ee:	d10d      	bne.n	8005a0c <_dtoa_r+0xa4c>
 80059f0:	2b39      	cmp	r3, #57	@ 0x39
 80059f2:	d027      	beq.n	8005a44 <_dtoa_r+0xa84>
 80059f4:	9a08      	ldr	r2, [sp, #32]
 80059f6:	2a00      	cmp	r2, #0
 80059f8:	dd01      	ble.n	80059fe <_dtoa_r+0xa3e>
 80059fa:	9b06      	ldr	r3, [sp, #24]
 80059fc:	3331      	adds	r3, #49	@ 0x31
 80059fe:	f88b 3000 	strb.w	r3, [fp]
 8005a02:	e52e      	b.n	8005462 <_dtoa_r+0x4a2>
 8005a04:	4628      	mov	r0, r5
 8005a06:	e7b9      	b.n	800597c <_dtoa_r+0x9bc>
 8005a08:	2201      	movs	r2, #1
 8005a0a:	e7e2      	b.n	80059d2 <_dtoa_r+0xa12>
 8005a0c:	9908      	ldr	r1, [sp, #32]
 8005a0e:	2900      	cmp	r1, #0
 8005a10:	db04      	blt.n	8005a1c <_dtoa_r+0xa5c>
 8005a12:	9820      	ldr	r0, [sp, #128]	@ 0x80
 8005a14:	4301      	orrs	r1, r0
 8005a16:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8005a18:	4301      	orrs	r1, r0
 8005a1a:	d120      	bne.n	8005a5e <_dtoa_r+0xa9e>
 8005a1c:	2a00      	cmp	r2, #0
 8005a1e:	ddee      	ble.n	80059fe <_dtoa_r+0xa3e>
 8005a20:	2201      	movs	r2, #1
 8005a22:	9903      	ldr	r1, [sp, #12]
 8005a24:	4648      	mov	r0, r9
 8005a26:	9304      	str	r3, [sp, #16]
 8005a28:	f000 fbec 	bl	8006204 <__lshift>
 8005a2c:	4621      	mov	r1, r4
 8005a2e:	9003      	str	r0, [sp, #12]
 8005a30:	f000 fc54 	bl	80062dc <__mcmp>
 8005a34:	2800      	cmp	r0, #0
 8005a36:	9b04      	ldr	r3, [sp, #16]
 8005a38:	dc02      	bgt.n	8005a40 <_dtoa_r+0xa80>
 8005a3a:	d1e0      	bne.n	80059fe <_dtoa_r+0xa3e>
 8005a3c:	07da      	lsls	r2, r3, #31
 8005a3e:	d5de      	bpl.n	80059fe <_dtoa_r+0xa3e>
 8005a40:	2b39      	cmp	r3, #57	@ 0x39
 8005a42:	d1da      	bne.n	80059fa <_dtoa_r+0xa3a>
 8005a44:	2339      	movs	r3, #57	@ 0x39
 8005a46:	f88b 3000 	strb.w	r3, [fp]
 8005a4a:	4633      	mov	r3, r6
 8005a4c:	461e      	mov	r6, r3
 8005a4e:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 8005a52:	3b01      	subs	r3, #1
 8005a54:	2a39      	cmp	r2, #57	@ 0x39
 8005a56:	d04e      	beq.n	8005af6 <_dtoa_r+0xb36>
 8005a58:	3201      	adds	r2, #1
 8005a5a:	701a      	strb	r2, [r3, #0]
 8005a5c:	e501      	b.n	8005462 <_dtoa_r+0x4a2>
 8005a5e:	2a00      	cmp	r2, #0
 8005a60:	dd03      	ble.n	8005a6a <_dtoa_r+0xaaa>
 8005a62:	2b39      	cmp	r3, #57	@ 0x39
 8005a64:	d0ee      	beq.n	8005a44 <_dtoa_r+0xa84>
 8005a66:	3301      	adds	r3, #1
 8005a68:	e7c9      	b.n	80059fe <_dtoa_r+0xa3e>
 8005a6a:	9a04      	ldr	r2, [sp, #16]
 8005a6c:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8005a6e:	f802 3c01 	strb.w	r3, [r2, #-1]
 8005a72:	428a      	cmp	r2, r1
 8005a74:	d028      	beq.n	8005ac8 <_dtoa_r+0xb08>
 8005a76:	2300      	movs	r3, #0
 8005a78:	220a      	movs	r2, #10
 8005a7a:	9903      	ldr	r1, [sp, #12]
 8005a7c:	4648      	mov	r0, r9
 8005a7e:	f000 f9d3 	bl	8005e28 <__multadd>
 8005a82:	42af      	cmp	r7, r5
 8005a84:	9003      	str	r0, [sp, #12]
 8005a86:	f04f 0300 	mov.w	r3, #0
 8005a8a:	f04f 020a 	mov.w	r2, #10
 8005a8e:	4639      	mov	r1, r7
 8005a90:	4648      	mov	r0, r9
 8005a92:	d107      	bne.n	8005aa4 <_dtoa_r+0xae4>
 8005a94:	f000 f9c8 	bl	8005e28 <__multadd>
 8005a98:	4607      	mov	r7, r0
 8005a9a:	4605      	mov	r5, r0
 8005a9c:	9b04      	ldr	r3, [sp, #16]
 8005a9e:	3301      	adds	r3, #1
 8005aa0:	9304      	str	r3, [sp, #16]
 8005aa2:	e777      	b.n	8005994 <_dtoa_r+0x9d4>
 8005aa4:	f000 f9c0 	bl	8005e28 <__multadd>
 8005aa8:	4629      	mov	r1, r5
 8005aaa:	4607      	mov	r7, r0
 8005aac:	2300      	movs	r3, #0
 8005aae:	220a      	movs	r2, #10
 8005ab0:	4648      	mov	r0, r9
 8005ab2:	f000 f9b9 	bl	8005e28 <__multadd>
 8005ab6:	4605      	mov	r5, r0
 8005ab8:	e7f0      	b.n	8005a9c <_dtoa_r+0xadc>
 8005aba:	f1bb 0f00 	cmp.w	fp, #0
 8005abe:	bfcc      	ite	gt
 8005ac0:	465e      	movgt	r6, fp
 8005ac2:	2601      	movle	r6, #1
 8005ac4:	2700      	movs	r7, #0
 8005ac6:	4456      	add	r6, sl
 8005ac8:	2201      	movs	r2, #1
 8005aca:	9903      	ldr	r1, [sp, #12]
 8005acc:	4648      	mov	r0, r9
 8005ace:	9304      	str	r3, [sp, #16]
 8005ad0:	f000 fb98 	bl	8006204 <__lshift>
 8005ad4:	4621      	mov	r1, r4
 8005ad6:	9003      	str	r0, [sp, #12]
 8005ad8:	f000 fc00 	bl	80062dc <__mcmp>
 8005adc:	2800      	cmp	r0, #0
 8005ade:	dcb4      	bgt.n	8005a4a <_dtoa_r+0xa8a>
 8005ae0:	d102      	bne.n	8005ae8 <_dtoa_r+0xb28>
 8005ae2:	9b04      	ldr	r3, [sp, #16]
 8005ae4:	07db      	lsls	r3, r3, #31
 8005ae6:	d4b0      	bmi.n	8005a4a <_dtoa_r+0xa8a>
 8005ae8:	4633      	mov	r3, r6
 8005aea:	461e      	mov	r6, r3
 8005aec:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8005af0:	2a30      	cmp	r2, #48	@ 0x30
 8005af2:	d0fa      	beq.n	8005aea <_dtoa_r+0xb2a>
 8005af4:	e4b5      	b.n	8005462 <_dtoa_r+0x4a2>
 8005af6:	459a      	cmp	sl, r3
 8005af8:	d1a8      	bne.n	8005a4c <_dtoa_r+0xa8c>
 8005afa:	2331      	movs	r3, #49	@ 0x31
 8005afc:	f108 0801 	add.w	r8, r8, #1
 8005b00:	f88a 3000 	strb.w	r3, [sl]
 8005b04:	e4ad      	b.n	8005462 <_dtoa_r+0x4a2>
 8005b06:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 8005b08:	f8df a058 	ldr.w	sl, [pc, #88]	@ 8005b64 <_dtoa_r+0xba4>
 8005b0c:	b11b      	cbz	r3, 8005b16 <_dtoa_r+0xb56>
 8005b0e:	f10a 0308 	add.w	r3, sl, #8
 8005b12:	9a24      	ldr	r2, [sp, #144]	@ 0x90
 8005b14:	6013      	str	r3, [r2, #0]
 8005b16:	4650      	mov	r0, sl
 8005b18:	b017      	add	sp, #92	@ 0x5c
 8005b1a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005b1e:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8005b20:	2b01      	cmp	r3, #1
 8005b22:	f77f ae2e 	ble.w	8005782 <_dtoa_r+0x7c2>
 8005b26:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8005b28:	930a      	str	r3, [sp, #40]	@ 0x28
 8005b2a:	2001      	movs	r0, #1
 8005b2c:	e64d      	b.n	80057ca <_dtoa_r+0x80a>
 8005b2e:	f1bb 0f00 	cmp.w	fp, #0
 8005b32:	f77f aed9 	ble.w	80058e8 <_dtoa_r+0x928>
 8005b36:	4656      	mov	r6, sl
 8005b38:	4621      	mov	r1, r4
 8005b3a:	9803      	ldr	r0, [sp, #12]
 8005b3c:	f7ff f9b6 	bl	8004eac <quorem>
 8005b40:	f100 0330 	add.w	r3, r0, #48	@ 0x30
 8005b44:	f806 3b01 	strb.w	r3, [r6], #1
 8005b48:	eba6 020a 	sub.w	r2, r6, sl
 8005b4c:	4593      	cmp	fp, r2
 8005b4e:	ddb4      	ble.n	8005aba <_dtoa_r+0xafa>
 8005b50:	2300      	movs	r3, #0
 8005b52:	220a      	movs	r2, #10
 8005b54:	4648      	mov	r0, r9
 8005b56:	9903      	ldr	r1, [sp, #12]
 8005b58:	f000 f966 	bl	8005e28 <__multadd>
 8005b5c:	9003      	str	r0, [sp, #12]
 8005b5e:	e7eb      	b.n	8005b38 <_dtoa_r+0xb78>
 8005b60:	0800883f 	.word	0x0800883f
 8005b64:	080087c3 	.word	0x080087c3

08005b68 <_free_r>:
 8005b68:	b538      	push	{r3, r4, r5, lr}
 8005b6a:	4605      	mov	r5, r0
 8005b6c:	2900      	cmp	r1, #0
 8005b6e:	d040      	beq.n	8005bf2 <_free_r+0x8a>
 8005b70:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005b74:	1f0c      	subs	r4, r1, #4
 8005b76:	2b00      	cmp	r3, #0
 8005b78:	bfb8      	it	lt
 8005b7a:	18e4      	addlt	r4, r4, r3
 8005b7c:	f000 f8e6 	bl	8005d4c <__malloc_lock>
 8005b80:	4a1c      	ldr	r2, [pc, #112]	@ (8005bf4 <_free_r+0x8c>)
 8005b82:	6813      	ldr	r3, [r2, #0]
 8005b84:	b933      	cbnz	r3, 8005b94 <_free_r+0x2c>
 8005b86:	6063      	str	r3, [r4, #4]
 8005b88:	6014      	str	r4, [r2, #0]
 8005b8a:	4628      	mov	r0, r5
 8005b8c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8005b90:	f000 b8e2 	b.w	8005d58 <__malloc_unlock>
 8005b94:	42a3      	cmp	r3, r4
 8005b96:	d908      	bls.n	8005baa <_free_r+0x42>
 8005b98:	6820      	ldr	r0, [r4, #0]
 8005b9a:	1821      	adds	r1, r4, r0
 8005b9c:	428b      	cmp	r3, r1
 8005b9e:	bf01      	itttt	eq
 8005ba0:	6819      	ldreq	r1, [r3, #0]
 8005ba2:	685b      	ldreq	r3, [r3, #4]
 8005ba4:	1809      	addeq	r1, r1, r0
 8005ba6:	6021      	streq	r1, [r4, #0]
 8005ba8:	e7ed      	b.n	8005b86 <_free_r+0x1e>
 8005baa:	461a      	mov	r2, r3
 8005bac:	685b      	ldr	r3, [r3, #4]
 8005bae:	b10b      	cbz	r3, 8005bb4 <_free_r+0x4c>
 8005bb0:	42a3      	cmp	r3, r4
 8005bb2:	d9fa      	bls.n	8005baa <_free_r+0x42>
 8005bb4:	6811      	ldr	r1, [r2, #0]
 8005bb6:	1850      	adds	r0, r2, r1
 8005bb8:	42a0      	cmp	r0, r4
 8005bba:	d10b      	bne.n	8005bd4 <_free_r+0x6c>
 8005bbc:	6820      	ldr	r0, [r4, #0]
 8005bbe:	4401      	add	r1, r0
 8005bc0:	1850      	adds	r0, r2, r1
 8005bc2:	4283      	cmp	r3, r0
 8005bc4:	6011      	str	r1, [r2, #0]
 8005bc6:	d1e0      	bne.n	8005b8a <_free_r+0x22>
 8005bc8:	6818      	ldr	r0, [r3, #0]
 8005bca:	685b      	ldr	r3, [r3, #4]
 8005bcc:	4408      	add	r0, r1
 8005bce:	6010      	str	r0, [r2, #0]
 8005bd0:	6053      	str	r3, [r2, #4]
 8005bd2:	e7da      	b.n	8005b8a <_free_r+0x22>
 8005bd4:	d902      	bls.n	8005bdc <_free_r+0x74>
 8005bd6:	230c      	movs	r3, #12
 8005bd8:	602b      	str	r3, [r5, #0]
 8005bda:	e7d6      	b.n	8005b8a <_free_r+0x22>
 8005bdc:	6820      	ldr	r0, [r4, #0]
 8005bde:	1821      	adds	r1, r4, r0
 8005be0:	428b      	cmp	r3, r1
 8005be2:	bf01      	itttt	eq
 8005be4:	6819      	ldreq	r1, [r3, #0]
 8005be6:	685b      	ldreq	r3, [r3, #4]
 8005be8:	1809      	addeq	r1, r1, r0
 8005bea:	6021      	streq	r1, [r4, #0]
 8005bec:	6063      	str	r3, [r4, #4]
 8005bee:	6054      	str	r4, [r2, #4]
 8005bf0:	e7cb      	b.n	8005b8a <_free_r+0x22>
 8005bf2:	bd38      	pop	{r3, r4, r5, pc}
 8005bf4:	200007c4 	.word	0x200007c4

08005bf8 <malloc>:
 8005bf8:	4b02      	ldr	r3, [pc, #8]	@ (8005c04 <malloc+0xc>)
 8005bfa:	4601      	mov	r1, r0
 8005bfc:	6818      	ldr	r0, [r3, #0]
 8005bfe:	f000 b825 	b.w	8005c4c <_malloc_r>
 8005c02:	bf00      	nop
 8005c04:	20000018 	.word	0x20000018

08005c08 <sbrk_aligned>:
 8005c08:	b570      	push	{r4, r5, r6, lr}
 8005c0a:	4e0f      	ldr	r6, [pc, #60]	@ (8005c48 <sbrk_aligned+0x40>)
 8005c0c:	460c      	mov	r4, r1
 8005c0e:	6831      	ldr	r1, [r6, #0]
 8005c10:	4605      	mov	r5, r0
 8005c12:	b911      	cbnz	r1, 8005c1a <sbrk_aligned+0x12>
 8005c14:	f001 fdee 	bl	80077f4 <_sbrk_r>
 8005c18:	6030      	str	r0, [r6, #0]
 8005c1a:	4621      	mov	r1, r4
 8005c1c:	4628      	mov	r0, r5
 8005c1e:	f001 fde9 	bl	80077f4 <_sbrk_r>
 8005c22:	1c43      	adds	r3, r0, #1
 8005c24:	d103      	bne.n	8005c2e <sbrk_aligned+0x26>
 8005c26:	f04f 34ff 	mov.w	r4, #4294967295
 8005c2a:	4620      	mov	r0, r4
 8005c2c:	bd70      	pop	{r4, r5, r6, pc}
 8005c2e:	1cc4      	adds	r4, r0, #3
 8005c30:	f024 0403 	bic.w	r4, r4, #3
 8005c34:	42a0      	cmp	r0, r4
 8005c36:	d0f8      	beq.n	8005c2a <sbrk_aligned+0x22>
 8005c38:	1a21      	subs	r1, r4, r0
 8005c3a:	4628      	mov	r0, r5
 8005c3c:	f001 fdda 	bl	80077f4 <_sbrk_r>
 8005c40:	3001      	adds	r0, #1
 8005c42:	d1f2      	bne.n	8005c2a <sbrk_aligned+0x22>
 8005c44:	e7ef      	b.n	8005c26 <sbrk_aligned+0x1e>
 8005c46:	bf00      	nop
 8005c48:	200007c0 	.word	0x200007c0

08005c4c <_malloc_r>:
 8005c4c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005c50:	1ccd      	adds	r5, r1, #3
 8005c52:	f025 0503 	bic.w	r5, r5, #3
 8005c56:	3508      	adds	r5, #8
 8005c58:	2d0c      	cmp	r5, #12
 8005c5a:	bf38      	it	cc
 8005c5c:	250c      	movcc	r5, #12
 8005c5e:	2d00      	cmp	r5, #0
 8005c60:	4606      	mov	r6, r0
 8005c62:	db01      	blt.n	8005c68 <_malloc_r+0x1c>
 8005c64:	42a9      	cmp	r1, r5
 8005c66:	d904      	bls.n	8005c72 <_malloc_r+0x26>
 8005c68:	230c      	movs	r3, #12
 8005c6a:	6033      	str	r3, [r6, #0]
 8005c6c:	2000      	movs	r0, #0
 8005c6e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8005c72:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8005d48 <_malloc_r+0xfc>
 8005c76:	f000 f869 	bl	8005d4c <__malloc_lock>
 8005c7a:	f8d8 3000 	ldr.w	r3, [r8]
 8005c7e:	461c      	mov	r4, r3
 8005c80:	bb44      	cbnz	r4, 8005cd4 <_malloc_r+0x88>
 8005c82:	4629      	mov	r1, r5
 8005c84:	4630      	mov	r0, r6
 8005c86:	f7ff ffbf 	bl	8005c08 <sbrk_aligned>
 8005c8a:	1c43      	adds	r3, r0, #1
 8005c8c:	4604      	mov	r4, r0
 8005c8e:	d158      	bne.n	8005d42 <_malloc_r+0xf6>
 8005c90:	f8d8 4000 	ldr.w	r4, [r8]
 8005c94:	4627      	mov	r7, r4
 8005c96:	2f00      	cmp	r7, #0
 8005c98:	d143      	bne.n	8005d22 <_malloc_r+0xd6>
 8005c9a:	2c00      	cmp	r4, #0
 8005c9c:	d04b      	beq.n	8005d36 <_malloc_r+0xea>
 8005c9e:	6823      	ldr	r3, [r4, #0]
 8005ca0:	4639      	mov	r1, r7
 8005ca2:	4630      	mov	r0, r6
 8005ca4:	eb04 0903 	add.w	r9, r4, r3
 8005ca8:	f001 fda4 	bl	80077f4 <_sbrk_r>
 8005cac:	4581      	cmp	r9, r0
 8005cae:	d142      	bne.n	8005d36 <_malloc_r+0xea>
 8005cb0:	6821      	ldr	r1, [r4, #0]
 8005cb2:	4630      	mov	r0, r6
 8005cb4:	1a6d      	subs	r5, r5, r1
 8005cb6:	4629      	mov	r1, r5
 8005cb8:	f7ff ffa6 	bl	8005c08 <sbrk_aligned>
 8005cbc:	3001      	adds	r0, #1
 8005cbe:	d03a      	beq.n	8005d36 <_malloc_r+0xea>
 8005cc0:	6823      	ldr	r3, [r4, #0]
 8005cc2:	442b      	add	r3, r5
 8005cc4:	6023      	str	r3, [r4, #0]
 8005cc6:	f8d8 3000 	ldr.w	r3, [r8]
 8005cca:	685a      	ldr	r2, [r3, #4]
 8005ccc:	bb62      	cbnz	r2, 8005d28 <_malloc_r+0xdc>
 8005cce:	f8c8 7000 	str.w	r7, [r8]
 8005cd2:	e00f      	b.n	8005cf4 <_malloc_r+0xa8>
 8005cd4:	6822      	ldr	r2, [r4, #0]
 8005cd6:	1b52      	subs	r2, r2, r5
 8005cd8:	d420      	bmi.n	8005d1c <_malloc_r+0xd0>
 8005cda:	2a0b      	cmp	r2, #11
 8005cdc:	d917      	bls.n	8005d0e <_malloc_r+0xc2>
 8005cde:	1961      	adds	r1, r4, r5
 8005ce0:	42a3      	cmp	r3, r4
 8005ce2:	6025      	str	r5, [r4, #0]
 8005ce4:	bf18      	it	ne
 8005ce6:	6059      	strne	r1, [r3, #4]
 8005ce8:	6863      	ldr	r3, [r4, #4]
 8005cea:	bf08      	it	eq
 8005cec:	f8c8 1000 	streq.w	r1, [r8]
 8005cf0:	5162      	str	r2, [r4, r5]
 8005cf2:	604b      	str	r3, [r1, #4]
 8005cf4:	4630      	mov	r0, r6
 8005cf6:	f000 f82f 	bl	8005d58 <__malloc_unlock>
 8005cfa:	f104 000b 	add.w	r0, r4, #11
 8005cfe:	1d23      	adds	r3, r4, #4
 8005d00:	f020 0007 	bic.w	r0, r0, #7
 8005d04:	1ac2      	subs	r2, r0, r3
 8005d06:	bf1c      	itt	ne
 8005d08:	1a1b      	subne	r3, r3, r0
 8005d0a:	50a3      	strne	r3, [r4, r2]
 8005d0c:	e7af      	b.n	8005c6e <_malloc_r+0x22>
 8005d0e:	6862      	ldr	r2, [r4, #4]
 8005d10:	42a3      	cmp	r3, r4
 8005d12:	bf0c      	ite	eq
 8005d14:	f8c8 2000 	streq.w	r2, [r8]
 8005d18:	605a      	strne	r2, [r3, #4]
 8005d1a:	e7eb      	b.n	8005cf4 <_malloc_r+0xa8>
 8005d1c:	4623      	mov	r3, r4
 8005d1e:	6864      	ldr	r4, [r4, #4]
 8005d20:	e7ae      	b.n	8005c80 <_malloc_r+0x34>
 8005d22:	463c      	mov	r4, r7
 8005d24:	687f      	ldr	r7, [r7, #4]
 8005d26:	e7b6      	b.n	8005c96 <_malloc_r+0x4a>
 8005d28:	461a      	mov	r2, r3
 8005d2a:	685b      	ldr	r3, [r3, #4]
 8005d2c:	42a3      	cmp	r3, r4
 8005d2e:	d1fb      	bne.n	8005d28 <_malloc_r+0xdc>
 8005d30:	2300      	movs	r3, #0
 8005d32:	6053      	str	r3, [r2, #4]
 8005d34:	e7de      	b.n	8005cf4 <_malloc_r+0xa8>
 8005d36:	230c      	movs	r3, #12
 8005d38:	4630      	mov	r0, r6
 8005d3a:	6033      	str	r3, [r6, #0]
 8005d3c:	f000 f80c 	bl	8005d58 <__malloc_unlock>
 8005d40:	e794      	b.n	8005c6c <_malloc_r+0x20>
 8005d42:	6005      	str	r5, [r0, #0]
 8005d44:	e7d6      	b.n	8005cf4 <_malloc_r+0xa8>
 8005d46:	bf00      	nop
 8005d48:	200007c4 	.word	0x200007c4

08005d4c <__malloc_lock>:
 8005d4c:	4801      	ldr	r0, [pc, #4]	@ (8005d54 <__malloc_lock+0x8>)
 8005d4e:	f7ff b88a 	b.w	8004e66 <__retarget_lock_acquire_recursive>
 8005d52:	bf00      	nop
 8005d54:	200007bc 	.word	0x200007bc

08005d58 <__malloc_unlock>:
 8005d58:	4801      	ldr	r0, [pc, #4]	@ (8005d60 <__malloc_unlock+0x8>)
 8005d5a:	f7ff b885 	b.w	8004e68 <__retarget_lock_release_recursive>
 8005d5e:	bf00      	nop
 8005d60:	200007bc 	.word	0x200007bc

08005d64 <_Balloc>:
 8005d64:	b570      	push	{r4, r5, r6, lr}
 8005d66:	69c6      	ldr	r6, [r0, #28]
 8005d68:	4604      	mov	r4, r0
 8005d6a:	460d      	mov	r5, r1
 8005d6c:	b976      	cbnz	r6, 8005d8c <_Balloc+0x28>
 8005d6e:	2010      	movs	r0, #16
 8005d70:	f7ff ff42 	bl	8005bf8 <malloc>
 8005d74:	4602      	mov	r2, r0
 8005d76:	61e0      	str	r0, [r4, #28]
 8005d78:	b920      	cbnz	r0, 8005d84 <_Balloc+0x20>
 8005d7a:	216b      	movs	r1, #107	@ 0x6b
 8005d7c:	4b17      	ldr	r3, [pc, #92]	@ (8005ddc <_Balloc+0x78>)
 8005d7e:	4818      	ldr	r0, [pc, #96]	@ (8005de0 <_Balloc+0x7c>)
 8005d80:	f001 fd4e 	bl	8007820 <__assert_func>
 8005d84:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8005d88:	6006      	str	r6, [r0, #0]
 8005d8a:	60c6      	str	r6, [r0, #12]
 8005d8c:	69e6      	ldr	r6, [r4, #28]
 8005d8e:	68f3      	ldr	r3, [r6, #12]
 8005d90:	b183      	cbz	r3, 8005db4 <_Balloc+0x50>
 8005d92:	69e3      	ldr	r3, [r4, #28]
 8005d94:	68db      	ldr	r3, [r3, #12]
 8005d96:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8005d9a:	b9b8      	cbnz	r0, 8005dcc <_Balloc+0x68>
 8005d9c:	2101      	movs	r1, #1
 8005d9e:	fa01 f605 	lsl.w	r6, r1, r5
 8005da2:	1d72      	adds	r2, r6, #5
 8005da4:	4620      	mov	r0, r4
 8005da6:	0092      	lsls	r2, r2, #2
 8005da8:	f001 fd58 	bl	800785c <_calloc_r>
 8005dac:	b160      	cbz	r0, 8005dc8 <_Balloc+0x64>
 8005dae:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8005db2:	e00e      	b.n	8005dd2 <_Balloc+0x6e>
 8005db4:	2221      	movs	r2, #33	@ 0x21
 8005db6:	2104      	movs	r1, #4
 8005db8:	4620      	mov	r0, r4
 8005dba:	f001 fd4f 	bl	800785c <_calloc_r>
 8005dbe:	69e3      	ldr	r3, [r4, #28]
 8005dc0:	60f0      	str	r0, [r6, #12]
 8005dc2:	68db      	ldr	r3, [r3, #12]
 8005dc4:	2b00      	cmp	r3, #0
 8005dc6:	d1e4      	bne.n	8005d92 <_Balloc+0x2e>
 8005dc8:	2000      	movs	r0, #0
 8005dca:	bd70      	pop	{r4, r5, r6, pc}
 8005dcc:	6802      	ldr	r2, [r0, #0]
 8005dce:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8005dd2:	2300      	movs	r3, #0
 8005dd4:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8005dd8:	e7f7      	b.n	8005dca <_Balloc+0x66>
 8005dda:	bf00      	nop
 8005ddc:	080087d0 	.word	0x080087d0
 8005de0:	08008850 	.word	0x08008850

08005de4 <_Bfree>:
 8005de4:	b570      	push	{r4, r5, r6, lr}
 8005de6:	69c6      	ldr	r6, [r0, #28]
 8005de8:	4605      	mov	r5, r0
 8005dea:	460c      	mov	r4, r1
 8005dec:	b976      	cbnz	r6, 8005e0c <_Bfree+0x28>
 8005dee:	2010      	movs	r0, #16
 8005df0:	f7ff ff02 	bl	8005bf8 <malloc>
 8005df4:	4602      	mov	r2, r0
 8005df6:	61e8      	str	r0, [r5, #28]
 8005df8:	b920      	cbnz	r0, 8005e04 <_Bfree+0x20>
 8005dfa:	218f      	movs	r1, #143	@ 0x8f
 8005dfc:	4b08      	ldr	r3, [pc, #32]	@ (8005e20 <_Bfree+0x3c>)
 8005dfe:	4809      	ldr	r0, [pc, #36]	@ (8005e24 <_Bfree+0x40>)
 8005e00:	f001 fd0e 	bl	8007820 <__assert_func>
 8005e04:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8005e08:	6006      	str	r6, [r0, #0]
 8005e0a:	60c6      	str	r6, [r0, #12]
 8005e0c:	b13c      	cbz	r4, 8005e1e <_Bfree+0x3a>
 8005e0e:	69eb      	ldr	r3, [r5, #28]
 8005e10:	6862      	ldr	r2, [r4, #4]
 8005e12:	68db      	ldr	r3, [r3, #12]
 8005e14:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8005e18:	6021      	str	r1, [r4, #0]
 8005e1a:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8005e1e:	bd70      	pop	{r4, r5, r6, pc}
 8005e20:	080087d0 	.word	0x080087d0
 8005e24:	08008850 	.word	0x08008850

08005e28 <__multadd>:
 8005e28:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005e2c:	4607      	mov	r7, r0
 8005e2e:	460c      	mov	r4, r1
 8005e30:	461e      	mov	r6, r3
 8005e32:	2000      	movs	r0, #0
 8005e34:	690d      	ldr	r5, [r1, #16]
 8005e36:	f101 0c14 	add.w	ip, r1, #20
 8005e3a:	f8dc 3000 	ldr.w	r3, [ip]
 8005e3e:	3001      	adds	r0, #1
 8005e40:	b299      	uxth	r1, r3
 8005e42:	fb02 6101 	mla	r1, r2, r1, r6
 8005e46:	0c1e      	lsrs	r6, r3, #16
 8005e48:	0c0b      	lsrs	r3, r1, #16
 8005e4a:	fb02 3306 	mla	r3, r2, r6, r3
 8005e4e:	b289      	uxth	r1, r1
 8005e50:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8005e54:	4285      	cmp	r5, r0
 8005e56:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8005e5a:	f84c 1b04 	str.w	r1, [ip], #4
 8005e5e:	dcec      	bgt.n	8005e3a <__multadd+0x12>
 8005e60:	b30e      	cbz	r6, 8005ea6 <__multadd+0x7e>
 8005e62:	68a3      	ldr	r3, [r4, #8]
 8005e64:	42ab      	cmp	r3, r5
 8005e66:	dc19      	bgt.n	8005e9c <__multadd+0x74>
 8005e68:	6861      	ldr	r1, [r4, #4]
 8005e6a:	4638      	mov	r0, r7
 8005e6c:	3101      	adds	r1, #1
 8005e6e:	f7ff ff79 	bl	8005d64 <_Balloc>
 8005e72:	4680      	mov	r8, r0
 8005e74:	b928      	cbnz	r0, 8005e82 <__multadd+0x5a>
 8005e76:	4602      	mov	r2, r0
 8005e78:	21ba      	movs	r1, #186	@ 0xba
 8005e7a:	4b0c      	ldr	r3, [pc, #48]	@ (8005eac <__multadd+0x84>)
 8005e7c:	480c      	ldr	r0, [pc, #48]	@ (8005eb0 <__multadd+0x88>)
 8005e7e:	f001 fccf 	bl	8007820 <__assert_func>
 8005e82:	6922      	ldr	r2, [r4, #16]
 8005e84:	f104 010c 	add.w	r1, r4, #12
 8005e88:	3202      	adds	r2, #2
 8005e8a:	0092      	lsls	r2, r2, #2
 8005e8c:	300c      	adds	r0, #12
 8005e8e:	f7fe fffa 	bl	8004e86 <memcpy>
 8005e92:	4621      	mov	r1, r4
 8005e94:	4638      	mov	r0, r7
 8005e96:	f7ff ffa5 	bl	8005de4 <_Bfree>
 8005e9a:	4644      	mov	r4, r8
 8005e9c:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8005ea0:	3501      	adds	r5, #1
 8005ea2:	615e      	str	r6, [r3, #20]
 8005ea4:	6125      	str	r5, [r4, #16]
 8005ea6:	4620      	mov	r0, r4
 8005ea8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005eac:	0800883f 	.word	0x0800883f
 8005eb0:	08008850 	.word	0x08008850

08005eb4 <__s2b>:
 8005eb4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005eb8:	4615      	mov	r5, r2
 8005eba:	2209      	movs	r2, #9
 8005ebc:	461f      	mov	r7, r3
 8005ebe:	3308      	adds	r3, #8
 8005ec0:	460c      	mov	r4, r1
 8005ec2:	fb93 f3f2 	sdiv	r3, r3, r2
 8005ec6:	4606      	mov	r6, r0
 8005ec8:	2201      	movs	r2, #1
 8005eca:	2100      	movs	r1, #0
 8005ecc:	429a      	cmp	r2, r3
 8005ece:	db09      	blt.n	8005ee4 <__s2b+0x30>
 8005ed0:	4630      	mov	r0, r6
 8005ed2:	f7ff ff47 	bl	8005d64 <_Balloc>
 8005ed6:	b940      	cbnz	r0, 8005eea <__s2b+0x36>
 8005ed8:	4602      	mov	r2, r0
 8005eda:	21d3      	movs	r1, #211	@ 0xd3
 8005edc:	4b18      	ldr	r3, [pc, #96]	@ (8005f40 <__s2b+0x8c>)
 8005ede:	4819      	ldr	r0, [pc, #100]	@ (8005f44 <__s2b+0x90>)
 8005ee0:	f001 fc9e 	bl	8007820 <__assert_func>
 8005ee4:	0052      	lsls	r2, r2, #1
 8005ee6:	3101      	adds	r1, #1
 8005ee8:	e7f0      	b.n	8005ecc <__s2b+0x18>
 8005eea:	9b08      	ldr	r3, [sp, #32]
 8005eec:	2d09      	cmp	r5, #9
 8005eee:	6143      	str	r3, [r0, #20]
 8005ef0:	f04f 0301 	mov.w	r3, #1
 8005ef4:	6103      	str	r3, [r0, #16]
 8005ef6:	dd16      	ble.n	8005f26 <__s2b+0x72>
 8005ef8:	f104 0909 	add.w	r9, r4, #9
 8005efc:	46c8      	mov	r8, r9
 8005efe:	442c      	add	r4, r5
 8005f00:	f818 3b01 	ldrb.w	r3, [r8], #1
 8005f04:	4601      	mov	r1, r0
 8005f06:	220a      	movs	r2, #10
 8005f08:	4630      	mov	r0, r6
 8005f0a:	3b30      	subs	r3, #48	@ 0x30
 8005f0c:	f7ff ff8c 	bl	8005e28 <__multadd>
 8005f10:	45a0      	cmp	r8, r4
 8005f12:	d1f5      	bne.n	8005f00 <__s2b+0x4c>
 8005f14:	f1a5 0408 	sub.w	r4, r5, #8
 8005f18:	444c      	add	r4, r9
 8005f1a:	1b2d      	subs	r5, r5, r4
 8005f1c:	1963      	adds	r3, r4, r5
 8005f1e:	42bb      	cmp	r3, r7
 8005f20:	db04      	blt.n	8005f2c <__s2b+0x78>
 8005f22:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8005f26:	2509      	movs	r5, #9
 8005f28:	340a      	adds	r4, #10
 8005f2a:	e7f6      	b.n	8005f1a <__s2b+0x66>
 8005f2c:	f814 3b01 	ldrb.w	r3, [r4], #1
 8005f30:	4601      	mov	r1, r0
 8005f32:	220a      	movs	r2, #10
 8005f34:	4630      	mov	r0, r6
 8005f36:	3b30      	subs	r3, #48	@ 0x30
 8005f38:	f7ff ff76 	bl	8005e28 <__multadd>
 8005f3c:	e7ee      	b.n	8005f1c <__s2b+0x68>
 8005f3e:	bf00      	nop
 8005f40:	0800883f 	.word	0x0800883f
 8005f44:	08008850 	.word	0x08008850

08005f48 <__hi0bits>:
 8005f48:	4603      	mov	r3, r0
 8005f4a:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 8005f4e:	bf3a      	itte	cc
 8005f50:	0403      	lslcc	r3, r0, #16
 8005f52:	2010      	movcc	r0, #16
 8005f54:	2000      	movcs	r0, #0
 8005f56:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8005f5a:	bf3c      	itt	cc
 8005f5c:	021b      	lslcc	r3, r3, #8
 8005f5e:	3008      	addcc	r0, #8
 8005f60:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8005f64:	bf3c      	itt	cc
 8005f66:	011b      	lslcc	r3, r3, #4
 8005f68:	3004      	addcc	r0, #4
 8005f6a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005f6e:	bf3c      	itt	cc
 8005f70:	009b      	lslcc	r3, r3, #2
 8005f72:	3002      	addcc	r0, #2
 8005f74:	2b00      	cmp	r3, #0
 8005f76:	db05      	blt.n	8005f84 <__hi0bits+0x3c>
 8005f78:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 8005f7c:	f100 0001 	add.w	r0, r0, #1
 8005f80:	bf08      	it	eq
 8005f82:	2020      	moveq	r0, #32
 8005f84:	4770      	bx	lr

08005f86 <__lo0bits>:
 8005f86:	6803      	ldr	r3, [r0, #0]
 8005f88:	4602      	mov	r2, r0
 8005f8a:	f013 0007 	ands.w	r0, r3, #7
 8005f8e:	d00b      	beq.n	8005fa8 <__lo0bits+0x22>
 8005f90:	07d9      	lsls	r1, r3, #31
 8005f92:	d421      	bmi.n	8005fd8 <__lo0bits+0x52>
 8005f94:	0798      	lsls	r0, r3, #30
 8005f96:	bf49      	itett	mi
 8005f98:	085b      	lsrmi	r3, r3, #1
 8005f9a:	089b      	lsrpl	r3, r3, #2
 8005f9c:	2001      	movmi	r0, #1
 8005f9e:	6013      	strmi	r3, [r2, #0]
 8005fa0:	bf5c      	itt	pl
 8005fa2:	2002      	movpl	r0, #2
 8005fa4:	6013      	strpl	r3, [r2, #0]
 8005fa6:	4770      	bx	lr
 8005fa8:	b299      	uxth	r1, r3
 8005faa:	b909      	cbnz	r1, 8005fb0 <__lo0bits+0x2a>
 8005fac:	2010      	movs	r0, #16
 8005fae:	0c1b      	lsrs	r3, r3, #16
 8005fb0:	b2d9      	uxtb	r1, r3
 8005fb2:	b909      	cbnz	r1, 8005fb8 <__lo0bits+0x32>
 8005fb4:	3008      	adds	r0, #8
 8005fb6:	0a1b      	lsrs	r3, r3, #8
 8005fb8:	0719      	lsls	r1, r3, #28
 8005fba:	bf04      	itt	eq
 8005fbc:	091b      	lsreq	r3, r3, #4
 8005fbe:	3004      	addeq	r0, #4
 8005fc0:	0799      	lsls	r1, r3, #30
 8005fc2:	bf04      	itt	eq
 8005fc4:	089b      	lsreq	r3, r3, #2
 8005fc6:	3002      	addeq	r0, #2
 8005fc8:	07d9      	lsls	r1, r3, #31
 8005fca:	d403      	bmi.n	8005fd4 <__lo0bits+0x4e>
 8005fcc:	085b      	lsrs	r3, r3, #1
 8005fce:	f100 0001 	add.w	r0, r0, #1
 8005fd2:	d003      	beq.n	8005fdc <__lo0bits+0x56>
 8005fd4:	6013      	str	r3, [r2, #0]
 8005fd6:	4770      	bx	lr
 8005fd8:	2000      	movs	r0, #0
 8005fda:	4770      	bx	lr
 8005fdc:	2020      	movs	r0, #32
 8005fde:	4770      	bx	lr

08005fe0 <__i2b>:
 8005fe0:	b510      	push	{r4, lr}
 8005fe2:	460c      	mov	r4, r1
 8005fe4:	2101      	movs	r1, #1
 8005fe6:	f7ff febd 	bl	8005d64 <_Balloc>
 8005fea:	4602      	mov	r2, r0
 8005fec:	b928      	cbnz	r0, 8005ffa <__i2b+0x1a>
 8005fee:	f240 1145 	movw	r1, #325	@ 0x145
 8005ff2:	4b04      	ldr	r3, [pc, #16]	@ (8006004 <__i2b+0x24>)
 8005ff4:	4804      	ldr	r0, [pc, #16]	@ (8006008 <__i2b+0x28>)
 8005ff6:	f001 fc13 	bl	8007820 <__assert_func>
 8005ffa:	2301      	movs	r3, #1
 8005ffc:	6144      	str	r4, [r0, #20]
 8005ffe:	6103      	str	r3, [r0, #16]
 8006000:	bd10      	pop	{r4, pc}
 8006002:	bf00      	nop
 8006004:	0800883f 	.word	0x0800883f
 8006008:	08008850 	.word	0x08008850

0800600c <__multiply>:
 800600c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006010:	4617      	mov	r7, r2
 8006012:	690a      	ldr	r2, [r1, #16]
 8006014:	693b      	ldr	r3, [r7, #16]
 8006016:	4689      	mov	r9, r1
 8006018:	429a      	cmp	r2, r3
 800601a:	bfa2      	ittt	ge
 800601c:	463b      	movge	r3, r7
 800601e:	460f      	movge	r7, r1
 8006020:	4699      	movge	r9, r3
 8006022:	693d      	ldr	r5, [r7, #16]
 8006024:	f8d9 a010 	ldr.w	sl, [r9, #16]
 8006028:	68bb      	ldr	r3, [r7, #8]
 800602a:	6879      	ldr	r1, [r7, #4]
 800602c:	eb05 060a 	add.w	r6, r5, sl
 8006030:	42b3      	cmp	r3, r6
 8006032:	b085      	sub	sp, #20
 8006034:	bfb8      	it	lt
 8006036:	3101      	addlt	r1, #1
 8006038:	f7ff fe94 	bl	8005d64 <_Balloc>
 800603c:	b930      	cbnz	r0, 800604c <__multiply+0x40>
 800603e:	4602      	mov	r2, r0
 8006040:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 8006044:	4b40      	ldr	r3, [pc, #256]	@ (8006148 <__multiply+0x13c>)
 8006046:	4841      	ldr	r0, [pc, #260]	@ (800614c <__multiply+0x140>)
 8006048:	f001 fbea 	bl	8007820 <__assert_func>
 800604c:	f100 0414 	add.w	r4, r0, #20
 8006050:	4623      	mov	r3, r4
 8006052:	2200      	movs	r2, #0
 8006054:	eb04 0e86 	add.w	lr, r4, r6, lsl #2
 8006058:	4573      	cmp	r3, lr
 800605a:	d320      	bcc.n	800609e <__multiply+0x92>
 800605c:	f107 0814 	add.w	r8, r7, #20
 8006060:	f109 0114 	add.w	r1, r9, #20
 8006064:	eb08 0585 	add.w	r5, r8, r5, lsl #2
 8006068:	eb01 038a 	add.w	r3, r1, sl, lsl #2
 800606c:	9302      	str	r3, [sp, #8]
 800606e:	1beb      	subs	r3, r5, r7
 8006070:	3b15      	subs	r3, #21
 8006072:	f023 0303 	bic.w	r3, r3, #3
 8006076:	3304      	adds	r3, #4
 8006078:	3715      	adds	r7, #21
 800607a:	42bd      	cmp	r5, r7
 800607c:	bf38      	it	cc
 800607e:	2304      	movcc	r3, #4
 8006080:	9301      	str	r3, [sp, #4]
 8006082:	9b02      	ldr	r3, [sp, #8]
 8006084:	9103      	str	r1, [sp, #12]
 8006086:	428b      	cmp	r3, r1
 8006088:	d80c      	bhi.n	80060a4 <__multiply+0x98>
 800608a:	2e00      	cmp	r6, #0
 800608c:	dd03      	ble.n	8006096 <__multiply+0x8a>
 800608e:	f85e 3d04 	ldr.w	r3, [lr, #-4]!
 8006092:	2b00      	cmp	r3, #0
 8006094:	d055      	beq.n	8006142 <__multiply+0x136>
 8006096:	6106      	str	r6, [r0, #16]
 8006098:	b005      	add	sp, #20
 800609a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800609e:	f843 2b04 	str.w	r2, [r3], #4
 80060a2:	e7d9      	b.n	8006058 <__multiply+0x4c>
 80060a4:	f8b1 a000 	ldrh.w	sl, [r1]
 80060a8:	f1ba 0f00 	cmp.w	sl, #0
 80060ac:	d01f      	beq.n	80060ee <__multiply+0xe2>
 80060ae:	46c4      	mov	ip, r8
 80060b0:	46a1      	mov	r9, r4
 80060b2:	2700      	movs	r7, #0
 80060b4:	f85c 2b04 	ldr.w	r2, [ip], #4
 80060b8:	f8d9 3000 	ldr.w	r3, [r9]
 80060bc:	fa1f fb82 	uxth.w	fp, r2
 80060c0:	b29b      	uxth	r3, r3
 80060c2:	fb0a 330b 	mla	r3, sl, fp, r3
 80060c6:	443b      	add	r3, r7
 80060c8:	f8d9 7000 	ldr.w	r7, [r9]
 80060cc:	0c12      	lsrs	r2, r2, #16
 80060ce:	0c3f      	lsrs	r7, r7, #16
 80060d0:	fb0a 7202 	mla	r2, sl, r2, r7
 80060d4:	eb02 4213 	add.w	r2, r2, r3, lsr #16
 80060d8:	b29b      	uxth	r3, r3
 80060da:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80060de:	4565      	cmp	r5, ip
 80060e0:	ea4f 4712 	mov.w	r7, r2, lsr #16
 80060e4:	f849 3b04 	str.w	r3, [r9], #4
 80060e8:	d8e4      	bhi.n	80060b4 <__multiply+0xa8>
 80060ea:	9b01      	ldr	r3, [sp, #4]
 80060ec:	50e7      	str	r7, [r4, r3]
 80060ee:	9b03      	ldr	r3, [sp, #12]
 80060f0:	3104      	adds	r1, #4
 80060f2:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 80060f6:	f1b9 0f00 	cmp.w	r9, #0
 80060fa:	d020      	beq.n	800613e <__multiply+0x132>
 80060fc:	4647      	mov	r7, r8
 80060fe:	46a4      	mov	ip, r4
 8006100:	f04f 0a00 	mov.w	sl, #0
 8006104:	6823      	ldr	r3, [r4, #0]
 8006106:	f8b7 b000 	ldrh.w	fp, [r7]
 800610a:	f8bc 2002 	ldrh.w	r2, [ip, #2]
 800610e:	b29b      	uxth	r3, r3
 8006110:	fb09 220b 	mla	r2, r9, fp, r2
 8006114:	4452      	add	r2, sl
 8006116:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800611a:	f84c 3b04 	str.w	r3, [ip], #4
 800611e:	f857 3b04 	ldr.w	r3, [r7], #4
 8006122:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8006126:	f8bc 3000 	ldrh.w	r3, [ip]
 800612a:	42bd      	cmp	r5, r7
 800612c:	fb09 330a 	mla	r3, r9, sl, r3
 8006130:	eb03 4312 	add.w	r3, r3, r2, lsr #16
 8006134:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8006138:	d8e5      	bhi.n	8006106 <__multiply+0xfa>
 800613a:	9a01      	ldr	r2, [sp, #4]
 800613c:	50a3      	str	r3, [r4, r2]
 800613e:	3404      	adds	r4, #4
 8006140:	e79f      	b.n	8006082 <__multiply+0x76>
 8006142:	3e01      	subs	r6, #1
 8006144:	e7a1      	b.n	800608a <__multiply+0x7e>
 8006146:	bf00      	nop
 8006148:	0800883f 	.word	0x0800883f
 800614c:	08008850 	.word	0x08008850

08006150 <__pow5mult>:
 8006150:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006154:	4615      	mov	r5, r2
 8006156:	f012 0203 	ands.w	r2, r2, #3
 800615a:	4607      	mov	r7, r0
 800615c:	460e      	mov	r6, r1
 800615e:	d007      	beq.n	8006170 <__pow5mult+0x20>
 8006160:	4c25      	ldr	r4, [pc, #148]	@ (80061f8 <__pow5mult+0xa8>)
 8006162:	3a01      	subs	r2, #1
 8006164:	2300      	movs	r3, #0
 8006166:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800616a:	f7ff fe5d 	bl	8005e28 <__multadd>
 800616e:	4606      	mov	r6, r0
 8006170:	10ad      	asrs	r5, r5, #2
 8006172:	d03d      	beq.n	80061f0 <__pow5mult+0xa0>
 8006174:	69fc      	ldr	r4, [r7, #28]
 8006176:	b97c      	cbnz	r4, 8006198 <__pow5mult+0x48>
 8006178:	2010      	movs	r0, #16
 800617a:	f7ff fd3d 	bl	8005bf8 <malloc>
 800617e:	4602      	mov	r2, r0
 8006180:	61f8      	str	r0, [r7, #28]
 8006182:	b928      	cbnz	r0, 8006190 <__pow5mult+0x40>
 8006184:	f240 11b3 	movw	r1, #435	@ 0x1b3
 8006188:	4b1c      	ldr	r3, [pc, #112]	@ (80061fc <__pow5mult+0xac>)
 800618a:	481d      	ldr	r0, [pc, #116]	@ (8006200 <__pow5mult+0xb0>)
 800618c:	f001 fb48 	bl	8007820 <__assert_func>
 8006190:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8006194:	6004      	str	r4, [r0, #0]
 8006196:	60c4      	str	r4, [r0, #12]
 8006198:	f8d7 801c 	ldr.w	r8, [r7, #28]
 800619c:	f8d8 4008 	ldr.w	r4, [r8, #8]
 80061a0:	b94c      	cbnz	r4, 80061b6 <__pow5mult+0x66>
 80061a2:	f240 2171 	movw	r1, #625	@ 0x271
 80061a6:	4638      	mov	r0, r7
 80061a8:	f7ff ff1a 	bl	8005fe0 <__i2b>
 80061ac:	2300      	movs	r3, #0
 80061ae:	4604      	mov	r4, r0
 80061b0:	f8c8 0008 	str.w	r0, [r8, #8]
 80061b4:	6003      	str	r3, [r0, #0]
 80061b6:	f04f 0900 	mov.w	r9, #0
 80061ba:	07eb      	lsls	r3, r5, #31
 80061bc:	d50a      	bpl.n	80061d4 <__pow5mult+0x84>
 80061be:	4631      	mov	r1, r6
 80061c0:	4622      	mov	r2, r4
 80061c2:	4638      	mov	r0, r7
 80061c4:	f7ff ff22 	bl	800600c <__multiply>
 80061c8:	4680      	mov	r8, r0
 80061ca:	4631      	mov	r1, r6
 80061cc:	4638      	mov	r0, r7
 80061ce:	f7ff fe09 	bl	8005de4 <_Bfree>
 80061d2:	4646      	mov	r6, r8
 80061d4:	106d      	asrs	r5, r5, #1
 80061d6:	d00b      	beq.n	80061f0 <__pow5mult+0xa0>
 80061d8:	6820      	ldr	r0, [r4, #0]
 80061da:	b938      	cbnz	r0, 80061ec <__pow5mult+0x9c>
 80061dc:	4622      	mov	r2, r4
 80061de:	4621      	mov	r1, r4
 80061e0:	4638      	mov	r0, r7
 80061e2:	f7ff ff13 	bl	800600c <__multiply>
 80061e6:	6020      	str	r0, [r4, #0]
 80061e8:	f8c0 9000 	str.w	r9, [r0]
 80061ec:	4604      	mov	r4, r0
 80061ee:	e7e4      	b.n	80061ba <__pow5mult+0x6a>
 80061f0:	4630      	mov	r0, r6
 80061f2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80061f6:	bf00      	nop
 80061f8:	08008960 	.word	0x08008960
 80061fc:	080087d0 	.word	0x080087d0
 8006200:	08008850 	.word	0x08008850

08006204 <__lshift>:
 8006204:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006208:	460c      	mov	r4, r1
 800620a:	4607      	mov	r7, r0
 800620c:	4691      	mov	r9, r2
 800620e:	6923      	ldr	r3, [r4, #16]
 8006210:	6849      	ldr	r1, [r1, #4]
 8006212:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8006216:	68a3      	ldr	r3, [r4, #8]
 8006218:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800621c:	f108 0601 	add.w	r6, r8, #1
 8006220:	42b3      	cmp	r3, r6
 8006222:	db0b      	blt.n	800623c <__lshift+0x38>
 8006224:	4638      	mov	r0, r7
 8006226:	f7ff fd9d 	bl	8005d64 <_Balloc>
 800622a:	4605      	mov	r5, r0
 800622c:	b948      	cbnz	r0, 8006242 <__lshift+0x3e>
 800622e:	4602      	mov	r2, r0
 8006230:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 8006234:	4b27      	ldr	r3, [pc, #156]	@ (80062d4 <__lshift+0xd0>)
 8006236:	4828      	ldr	r0, [pc, #160]	@ (80062d8 <__lshift+0xd4>)
 8006238:	f001 faf2 	bl	8007820 <__assert_func>
 800623c:	3101      	adds	r1, #1
 800623e:	005b      	lsls	r3, r3, #1
 8006240:	e7ee      	b.n	8006220 <__lshift+0x1c>
 8006242:	2300      	movs	r3, #0
 8006244:	f100 0114 	add.w	r1, r0, #20
 8006248:	f100 0210 	add.w	r2, r0, #16
 800624c:	4618      	mov	r0, r3
 800624e:	4553      	cmp	r3, sl
 8006250:	db33      	blt.n	80062ba <__lshift+0xb6>
 8006252:	6920      	ldr	r0, [r4, #16]
 8006254:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8006258:	f104 0314 	add.w	r3, r4, #20
 800625c:	f019 091f 	ands.w	r9, r9, #31
 8006260:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8006264:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8006268:	d02b      	beq.n	80062c2 <__lshift+0xbe>
 800626a:	468a      	mov	sl, r1
 800626c:	2200      	movs	r2, #0
 800626e:	f1c9 0e20 	rsb	lr, r9, #32
 8006272:	6818      	ldr	r0, [r3, #0]
 8006274:	fa00 f009 	lsl.w	r0, r0, r9
 8006278:	4310      	orrs	r0, r2
 800627a:	f84a 0b04 	str.w	r0, [sl], #4
 800627e:	f853 2b04 	ldr.w	r2, [r3], #4
 8006282:	459c      	cmp	ip, r3
 8006284:	fa22 f20e 	lsr.w	r2, r2, lr
 8006288:	d8f3      	bhi.n	8006272 <__lshift+0x6e>
 800628a:	ebac 0304 	sub.w	r3, ip, r4
 800628e:	3b15      	subs	r3, #21
 8006290:	f023 0303 	bic.w	r3, r3, #3
 8006294:	3304      	adds	r3, #4
 8006296:	f104 0015 	add.w	r0, r4, #21
 800629a:	4560      	cmp	r0, ip
 800629c:	bf88      	it	hi
 800629e:	2304      	movhi	r3, #4
 80062a0:	50ca      	str	r2, [r1, r3]
 80062a2:	b10a      	cbz	r2, 80062a8 <__lshift+0xa4>
 80062a4:	f108 0602 	add.w	r6, r8, #2
 80062a8:	3e01      	subs	r6, #1
 80062aa:	4638      	mov	r0, r7
 80062ac:	4621      	mov	r1, r4
 80062ae:	612e      	str	r6, [r5, #16]
 80062b0:	f7ff fd98 	bl	8005de4 <_Bfree>
 80062b4:	4628      	mov	r0, r5
 80062b6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80062ba:	f842 0f04 	str.w	r0, [r2, #4]!
 80062be:	3301      	adds	r3, #1
 80062c0:	e7c5      	b.n	800624e <__lshift+0x4a>
 80062c2:	3904      	subs	r1, #4
 80062c4:	f853 2b04 	ldr.w	r2, [r3], #4
 80062c8:	459c      	cmp	ip, r3
 80062ca:	f841 2f04 	str.w	r2, [r1, #4]!
 80062ce:	d8f9      	bhi.n	80062c4 <__lshift+0xc0>
 80062d0:	e7ea      	b.n	80062a8 <__lshift+0xa4>
 80062d2:	bf00      	nop
 80062d4:	0800883f 	.word	0x0800883f
 80062d8:	08008850 	.word	0x08008850

080062dc <__mcmp>:
 80062dc:	4603      	mov	r3, r0
 80062de:	690a      	ldr	r2, [r1, #16]
 80062e0:	6900      	ldr	r0, [r0, #16]
 80062e2:	b530      	push	{r4, r5, lr}
 80062e4:	1a80      	subs	r0, r0, r2
 80062e6:	d10e      	bne.n	8006306 <__mcmp+0x2a>
 80062e8:	3314      	adds	r3, #20
 80062ea:	3114      	adds	r1, #20
 80062ec:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 80062f0:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 80062f4:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 80062f8:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 80062fc:	4295      	cmp	r5, r2
 80062fe:	d003      	beq.n	8006308 <__mcmp+0x2c>
 8006300:	d205      	bcs.n	800630e <__mcmp+0x32>
 8006302:	f04f 30ff 	mov.w	r0, #4294967295
 8006306:	bd30      	pop	{r4, r5, pc}
 8006308:	42a3      	cmp	r3, r4
 800630a:	d3f3      	bcc.n	80062f4 <__mcmp+0x18>
 800630c:	e7fb      	b.n	8006306 <__mcmp+0x2a>
 800630e:	2001      	movs	r0, #1
 8006310:	e7f9      	b.n	8006306 <__mcmp+0x2a>
	...

08006314 <__mdiff>:
 8006314:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006318:	4689      	mov	r9, r1
 800631a:	4606      	mov	r6, r0
 800631c:	4611      	mov	r1, r2
 800631e:	4648      	mov	r0, r9
 8006320:	4614      	mov	r4, r2
 8006322:	f7ff ffdb 	bl	80062dc <__mcmp>
 8006326:	1e05      	subs	r5, r0, #0
 8006328:	d112      	bne.n	8006350 <__mdiff+0x3c>
 800632a:	4629      	mov	r1, r5
 800632c:	4630      	mov	r0, r6
 800632e:	f7ff fd19 	bl	8005d64 <_Balloc>
 8006332:	4602      	mov	r2, r0
 8006334:	b928      	cbnz	r0, 8006342 <__mdiff+0x2e>
 8006336:	f240 2137 	movw	r1, #567	@ 0x237
 800633a:	4b3e      	ldr	r3, [pc, #248]	@ (8006434 <__mdiff+0x120>)
 800633c:	483e      	ldr	r0, [pc, #248]	@ (8006438 <__mdiff+0x124>)
 800633e:	f001 fa6f 	bl	8007820 <__assert_func>
 8006342:	2301      	movs	r3, #1
 8006344:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8006348:	4610      	mov	r0, r2
 800634a:	b003      	add	sp, #12
 800634c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006350:	bfbc      	itt	lt
 8006352:	464b      	movlt	r3, r9
 8006354:	46a1      	movlt	r9, r4
 8006356:	4630      	mov	r0, r6
 8006358:	f8d9 1004 	ldr.w	r1, [r9, #4]
 800635c:	bfba      	itte	lt
 800635e:	461c      	movlt	r4, r3
 8006360:	2501      	movlt	r5, #1
 8006362:	2500      	movge	r5, #0
 8006364:	f7ff fcfe 	bl	8005d64 <_Balloc>
 8006368:	4602      	mov	r2, r0
 800636a:	b918      	cbnz	r0, 8006374 <__mdiff+0x60>
 800636c:	f240 2145 	movw	r1, #581	@ 0x245
 8006370:	4b30      	ldr	r3, [pc, #192]	@ (8006434 <__mdiff+0x120>)
 8006372:	e7e3      	b.n	800633c <__mdiff+0x28>
 8006374:	f100 0b14 	add.w	fp, r0, #20
 8006378:	f8d9 7010 	ldr.w	r7, [r9, #16]
 800637c:	f109 0310 	add.w	r3, r9, #16
 8006380:	60c5      	str	r5, [r0, #12]
 8006382:	f04f 0c00 	mov.w	ip, #0
 8006386:	f109 0514 	add.w	r5, r9, #20
 800638a:	46d9      	mov	r9, fp
 800638c:	6926      	ldr	r6, [r4, #16]
 800638e:	f104 0e14 	add.w	lr, r4, #20
 8006392:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 8006396:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 800639a:	9301      	str	r3, [sp, #4]
 800639c:	9b01      	ldr	r3, [sp, #4]
 800639e:	f85e 0b04 	ldr.w	r0, [lr], #4
 80063a2:	f853 af04 	ldr.w	sl, [r3, #4]!
 80063a6:	b281      	uxth	r1, r0
 80063a8:	9301      	str	r3, [sp, #4]
 80063aa:	fa1f f38a 	uxth.w	r3, sl
 80063ae:	1a5b      	subs	r3, r3, r1
 80063b0:	0c00      	lsrs	r0, r0, #16
 80063b2:	4463      	add	r3, ip
 80063b4:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 80063b8:	eb00 4023 	add.w	r0, r0, r3, asr #16
 80063bc:	b29b      	uxth	r3, r3
 80063be:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 80063c2:	4576      	cmp	r6, lr
 80063c4:	ea4f 4c20 	mov.w	ip, r0, asr #16
 80063c8:	f849 3b04 	str.w	r3, [r9], #4
 80063cc:	d8e6      	bhi.n	800639c <__mdiff+0x88>
 80063ce:	1b33      	subs	r3, r6, r4
 80063d0:	3b15      	subs	r3, #21
 80063d2:	f023 0303 	bic.w	r3, r3, #3
 80063d6:	3415      	adds	r4, #21
 80063d8:	3304      	adds	r3, #4
 80063da:	42a6      	cmp	r6, r4
 80063dc:	bf38      	it	cc
 80063de:	2304      	movcc	r3, #4
 80063e0:	441d      	add	r5, r3
 80063e2:	445b      	add	r3, fp
 80063e4:	461e      	mov	r6, r3
 80063e6:	462c      	mov	r4, r5
 80063e8:	4544      	cmp	r4, r8
 80063ea:	d30e      	bcc.n	800640a <__mdiff+0xf6>
 80063ec:	f108 0103 	add.w	r1, r8, #3
 80063f0:	1b49      	subs	r1, r1, r5
 80063f2:	f021 0103 	bic.w	r1, r1, #3
 80063f6:	3d03      	subs	r5, #3
 80063f8:	45a8      	cmp	r8, r5
 80063fa:	bf38      	it	cc
 80063fc:	2100      	movcc	r1, #0
 80063fe:	440b      	add	r3, r1
 8006400:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8006404:	b199      	cbz	r1, 800642e <__mdiff+0x11a>
 8006406:	6117      	str	r7, [r2, #16]
 8006408:	e79e      	b.n	8006348 <__mdiff+0x34>
 800640a:	46e6      	mov	lr, ip
 800640c:	f854 1b04 	ldr.w	r1, [r4], #4
 8006410:	fa1f fc81 	uxth.w	ip, r1
 8006414:	44f4      	add	ip, lr
 8006416:	0c08      	lsrs	r0, r1, #16
 8006418:	4471      	add	r1, lr
 800641a:	eb00 402c 	add.w	r0, r0, ip, asr #16
 800641e:	b289      	uxth	r1, r1
 8006420:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8006424:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8006428:	f846 1b04 	str.w	r1, [r6], #4
 800642c:	e7dc      	b.n	80063e8 <__mdiff+0xd4>
 800642e:	3f01      	subs	r7, #1
 8006430:	e7e6      	b.n	8006400 <__mdiff+0xec>
 8006432:	bf00      	nop
 8006434:	0800883f 	.word	0x0800883f
 8006438:	08008850 	.word	0x08008850

0800643c <__ulp>:
 800643c:	4b0e      	ldr	r3, [pc, #56]	@ (8006478 <__ulp+0x3c>)
 800643e:	400b      	ands	r3, r1
 8006440:	f1a3 7350 	sub.w	r3, r3, #54525952	@ 0x3400000
 8006444:	2b00      	cmp	r3, #0
 8006446:	dc08      	bgt.n	800645a <__ulp+0x1e>
 8006448:	425b      	negs	r3, r3
 800644a:	f1b3 7fa0 	cmp.w	r3, #20971520	@ 0x1400000
 800644e:	ea4f 5223 	mov.w	r2, r3, asr #20
 8006452:	da04      	bge.n	800645e <__ulp+0x22>
 8006454:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 8006458:	4113      	asrs	r3, r2
 800645a:	2200      	movs	r2, #0
 800645c:	e008      	b.n	8006470 <__ulp+0x34>
 800645e:	f1a2 0314 	sub.w	r3, r2, #20
 8006462:	2b1e      	cmp	r3, #30
 8006464:	bfd6      	itet	le
 8006466:	f04f 4200 	movle.w	r2, #2147483648	@ 0x80000000
 800646a:	2201      	movgt	r2, #1
 800646c:	40da      	lsrle	r2, r3
 800646e:	2300      	movs	r3, #0
 8006470:	4619      	mov	r1, r3
 8006472:	4610      	mov	r0, r2
 8006474:	4770      	bx	lr
 8006476:	bf00      	nop
 8006478:	7ff00000 	.word	0x7ff00000

0800647c <__b2d>:
 800647c:	6902      	ldr	r2, [r0, #16]
 800647e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006480:	f100 0614 	add.w	r6, r0, #20
 8006484:	eb06 0282 	add.w	r2, r6, r2, lsl #2
 8006488:	f852 4c04 	ldr.w	r4, [r2, #-4]
 800648c:	4f1e      	ldr	r7, [pc, #120]	@ (8006508 <__b2d+0x8c>)
 800648e:	4620      	mov	r0, r4
 8006490:	f7ff fd5a 	bl	8005f48 <__hi0bits>
 8006494:	4603      	mov	r3, r0
 8006496:	f1c0 0020 	rsb	r0, r0, #32
 800649a:	2b0a      	cmp	r3, #10
 800649c:	f1a2 0504 	sub.w	r5, r2, #4
 80064a0:	6008      	str	r0, [r1, #0]
 80064a2:	dc12      	bgt.n	80064ca <__b2d+0x4e>
 80064a4:	42ae      	cmp	r6, r5
 80064a6:	bf2c      	ite	cs
 80064a8:	2200      	movcs	r2, #0
 80064aa:	f852 2c08 	ldrcc.w	r2, [r2, #-8]
 80064ae:	f1c3 0c0b 	rsb	ip, r3, #11
 80064b2:	3315      	adds	r3, #21
 80064b4:	fa24 fe0c 	lsr.w	lr, r4, ip
 80064b8:	fa04 f303 	lsl.w	r3, r4, r3
 80064bc:	fa22 f20c 	lsr.w	r2, r2, ip
 80064c0:	ea4e 0107 	orr.w	r1, lr, r7
 80064c4:	431a      	orrs	r2, r3
 80064c6:	4610      	mov	r0, r2
 80064c8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80064ca:	42ae      	cmp	r6, r5
 80064cc:	bf36      	itet	cc
 80064ce:	f1a2 0508 	subcc.w	r5, r2, #8
 80064d2:	2200      	movcs	r2, #0
 80064d4:	f852 2c08 	ldrcc.w	r2, [r2, #-8]
 80064d8:	3b0b      	subs	r3, #11
 80064da:	d012      	beq.n	8006502 <__b2d+0x86>
 80064dc:	f1c3 0720 	rsb	r7, r3, #32
 80064e0:	fa22 f107 	lsr.w	r1, r2, r7
 80064e4:	409c      	lsls	r4, r3
 80064e6:	430c      	orrs	r4, r1
 80064e8:	42b5      	cmp	r5, r6
 80064ea:	f044 517f 	orr.w	r1, r4, #1069547520	@ 0x3fc00000
 80064ee:	bf94      	ite	ls
 80064f0:	2400      	movls	r4, #0
 80064f2:	f855 4c04 	ldrhi.w	r4, [r5, #-4]
 80064f6:	409a      	lsls	r2, r3
 80064f8:	40fc      	lsrs	r4, r7
 80064fa:	f441 1140 	orr.w	r1, r1, #3145728	@ 0x300000
 80064fe:	4322      	orrs	r2, r4
 8006500:	e7e1      	b.n	80064c6 <__b2d+0x4a>
 8006502:	ea44 0107 	orr.w	r1, r4, r7
 8006506:	e7de      	b.n	80064c6 <__b2d+0x4a>
 8006508:	3ff00000 	.word	0x3ff00000

0800650c <__d2b>:
 800650c:	e92d 4373 	stmdb	sp!, {r0, r1, r4, r5, r6, r8, r9, lr}
 8006510:	2101      	movs	r1, #1
 8006512:	4690      	mov	r8, r2
 8006514:	4699      	mov	r9, r3
 8006516:	9e08      	ldr	r6, [sp, #32]
 8006518:	f7ff fc24 	bl	8005d64 <_Balloc>
 800651c:	4604      	mov	r4, r0
 800651e:	b930      	cbnz	r0, 800652e <__d2b+0x22>
 8006520:	4602      	mov	r2, r0
 8006522:	f240 310f 	movw	r1, #783	@ 0x30f
 8006526:	4b23      	ldr	r3, [pc, #140]	@ (80065b4 <__d2b+0xa8>)
 8006528:	4823      	ldr	r0, [pc, #140]	@ (80065b8 <__d2b+0xac>)
 800652a:	f001 f979 	bl	8007820 <__assert_func>
 800652e:	f3c9 550a 	ubfx	r5, r9, #20, #11
 8006532:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8006536:	b10d      	cbz	r5, 800653c <__d2b+0x30>
 8006538:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800653c:	9301      	str	r3, [sp, #4]
 800653e:	f1b8 0300 	subs.w	r3, r8, #0
 8006542:	d024      	beq.n	800658e <__d2b+0x82>
 8006544:	4668      	mov	r0, sp
 8006546:	9300      	str	r3, [sp, #0]
 8006548:	f7ff fd1d 	bl	8005f86 <__lo0bits>
 800654c:	e9dd 1200 	ldrd	r1, r2, [sp]
 8006550:	b1d8      	cbz	r0, 800658a <__d2b+0x7e>
 8006552:	f1c0 0320 	rsb	r3, r0, #32
 8006556:	fa02 f303 	lsl.w	r3, r2, r3
 800655a:	430b      	orrs	r3, r1
 800655c:	40c2      	lsrs	r2, r0
 800655e:	6163      	str	r3, [r4, #20]
 8006560:	9201      	str	r2, [sp, #4]
 8006562:	9b01      	ldr	r3, [sp, #4]
 8006564:	2b00      	cmp	r3, #0
 8006566:	bf0c      	ite	eq
 8006568:	2201      	moveq	r2, #1
 800656a:	2202      	movne	r2, #2
 800656c:	61a3      	str	r3, [r4, #24]
 800656e:	6122      	str	r2, [r4, #16]
 8006570:	b1ad      	cbz	r5, 800659e <__d2b+0x92>
 8006572:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 8006576:	4405      	add	r5, r0
 8006578:	6035      	str	r5, [r6, #0]
 800657a:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 800657e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006580:	6018      	str	r0, [r3, #0]
 8006582:	4620      	mov	r0, r4
 8006584:	b002      	add	sp, #8
 8006586:	e8bd 8370 	ldmia.w	sp!, {r4, r5, r6, r8, r9, pc}
 800658a:	6161      	str	r1, [r4, #20]
 800658c:	e7e9      	b.n	8006562 <__d2b+0x56>
 800658e:	a801      	add	r0, sp, #4
 8006590:	f7ff fcf9 	bl	8005f86 <__lo0bits>
 8006594:	9b01      	ldr	r3, [sp, #4]
 8006596:	2201      	movs	r2, #1
 8006598:	6163      	str	r3, [r4, #20]
 800659a:	3020      	adds	r0, #32
 800659c:	e7e7      	b.n	800656e <__d2b+0x62>
 800659e:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 80065a2:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 80065a6:	6030      	str	r0, [r6, #0]
 80065a8:	6918      	ldr	r0, [r3, #16]
 80065aa:	f7ff fccd 	bl	8005f48 <__hi0bits>
 80065ae:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 80065b2:	e7e4      	b.n	800657e <__d2b+0x72>
 80065b4:	0800883f 	.word	0x0800883f
 80065b8:	08008850 	.word	0x08008850

080065bc <__ratio>:
 80065bc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80065c0:	b085      	sub	sp, #20
 80065c2:	e9cd 1000 	strd	r1, r0, [sp]
 80065c6:	a902      	add	r1, sp, #8
 80065c8:	f7ff ff58 	bl	800647c <__b2d>
 80065cc:	468b      	mov	fp, r1
 80065ce:	4606      	mov	r6, r0
 80065d0:	460f      	mov	r7, r1
 80065d2:	9800      	ldr	r0, [sp, #0]
 80065d4:	a903      	add	r1, sp, #12
 80065d6:	f7ff ff51 	bl	800647c <__b2d>
 80065da:	460d      	mov	r5, r1
 80065dc:	9b01      	ldr	r3, [sp, #4]
 80065de:	4689      	mov	r9, r1
 80065e0:	6919      	ldr	r1, [r3, #16]
 80065e2:	9b00      	ldr	r3, [sp, #0]
 80065e4:	4604      	mov	r4, r0
 80065e6:	691b      	ldr	r3, [r3, #16]
 80065e8:	4630      	mov	r0, r6
 80065ea:	1ac9      	subs	r1, r1, r3
 80065ec:	e9dd 3202 	ldrd	r3, r2, [sp, #8]
 80065f0:	1a9b      	subs	r3, r3, r2
 80065f2:	eb03 1341 	add.w	r3, r3, r1, lsl #5
 80065f6:	2b00      	cmp	r3, #0
 80065f8:	bfcd      	iteet	gt
 80065fa:	463a      	movgt	r2, r7
 80065fc:	462a      	movle	r2, r5
 80065fe:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 8006602:	eb02 5b03 	addgt.w	fp, r2, r3, lsl #20
 8006606:	bfd8      	it	le
 8006608:	eb02 5903 	addle.w	r9, r2, r3, lsl #20
 800660c:	464b      	mov	r3, r9
 800660e:	4622      	mov	r2, r4
 8006610:	4659      	mov	r1, fp
 8006612:	f7fa f88b 	bl	800072c <__aeabi_ddiv>
 8006616:	b005      	add	sp, #20
 8006618:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800661c <__copybits>:
 800661c:	3901      	subs	r1, #1
 800661e:	b570      	push	{r4, r5, r6, lr}
 8006620:	1149      	asrs	r1, r1, #5
 8006622:	6914      	ldr	r4, [r2, #16]
 8006624:	3101      	adds	r1, #1
 8006626:	f102 0314 	add.w	r3, r2, #20
 800662a:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 800662e:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 8006632:	1f05      	subs	r5, r0, #4
 8006634:	42a3      	cmp	r3, r4
 8006636:	d30c      	bcc.n	8006652 <__copybits+0x36>
 8006638:	1aa3      	subs	r3, r4, r2
 800663a:	3b11      	subs	r3, #17
 800663c:	f023 0303 	bic.w	r3, r3, #3
 8006640:	3211      	adds	r2, #17
 8006642:	42a2      	cmp	r2, r4
 8006644:	bf88      	it	hi
 8006646:	2300      	movhi	r3, #0
 8006648:	4418      	add	r0, r3
 800664a:	2300      	movs	r3, #0
 800664c:	4288      	cmp	r0, r1
 800664e:	d305      	bcc.n	800665c <__copybits+0x40>
 8006650:	bd70      	pop	{r4, r5, r6, pc}
 8006652:	f853 6b04 	ldr.w	r6, [r3], #4
 8006656:	f845 6f04 	str.w	r6, [r5, #4]!
 800665a:	e7eb      	b.n	8006634 <__copybits+0x18>
 800665c:	f840 3b04 	str.w	r3, [r0], #4
 8006660:	e7f4      	b.n	800664c <__copybits+0x30>

08006662 <__any_on>:
 8006662:	f100 0214 	add.w	r2, r0, #20
 8006666:	6900      	ldr	r0, [r0, #16]
 8006668:	114b      	asrs	r3, r1, #5
 800666a:	4298      	cmp	r0, r3
 800666c:	b510      	push	{r4, lr}
 800666e:	db11      	blt.n	8006694 <__any_on+0x32>
 8006670:	dd0a      	ble.n	8006688 <__any_on+0x26>
 8006672:	f011 011f 	ands.w	r1, r1, #31
 8006676:	d007      	beq.n	8006688 <__any_on+0x26>
 8006678:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 800667c:	fa24 f001 	lsr.w	r0, r4, r1
 8006680:	fa00 f101 	lsl.w	r1, r0, r1
 8006684:	428c      	cmp	r4, r1
 8006686:	d10b      	bne.n	80066a0 <__any_on+0x3e>
 8006688:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800668c:	4293      	cmp	r3, r2
 800668e:	d803      	bhi.n	8006698 <__any_on+0x36>
 8006690:	2000      	movs	r0, #0
 8006692:	bd10      	pop	{r4, pc}
 8006694:	4603      	mov	r3, r0
 8006696:	e7f7      	b.n	8006688 <__any_on+0x26>
 8006698:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800669c:	2900      	cmp	r1, #0
 800669e:	d0f5      	beq.n	800668c <__any_on+0x2a>
 80066a0:	2001      	movs	r0, #1
 80066a2:	e7f6      	b.n	8006692 <__any_on+0x30>

080066a4 <sulp>:
 80066a4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80066a8:	460f      	mov	r7, r1
 80066aa:	4690      	mov	r8, r2
 80066ac:	f7ff fec6 	bl	800643c <__ulp>
 80066b0:	4604      	mov	r4, r0
 80066b2:	460d      	mov	r5, r1
 80066b4:	f1b8 0f00 	cmp.w	r8, #0
 80066b8:	d011      	beq.n	80066de <sulp+0x3a>
 80066ba:	f3c7 530a 	ubfx	r3, r7, #20, #11
 80066be:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 80066c2:	2b00      	cmp	r3, #0
 80066c4:	dd0b      	ble.n	80066de <sulp+0x3a>
 80066c6:	2400      	movs	r4, #0
 80066c8:	051b      	lsls	r3, r3, #20
 80066ca:	f103 557f 	add.w	r5, r3, #1069547520	@ 0x3fc00000
 80066ce:	f505 1540 	add.w	r5, r5, #3145728	@ 0x300000
 80066d2:	4622      	mov	r2, r4
 80066d4:	462b      	mov	r3, r5
 80066d6:	f7f9 feff 	bl	80004d8 <__aeabi_dmul>
 80066da:	4604      	mov	r4, r0
 80066dc:	460d      	mov	r5, r1
 80066de:	4620      	mov	r0, r4
 80066e0:	4629      	mov	r1, r5
 80066e2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	...

080066e8 <_strtod_l>:
 80066e8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80066ec:	b09f      	sub	sp, #124	@ 0x7c
 80066ee:	9217      	str	r2, [sp, #92]	@ 0x5c
 80066f0:	2200      	movs	r2, #0
 80066f2:	460c      	mov	r4, r1
 80066f4:	921a      	str	r2, [sp, #104]	@ 0x68
 80066f6:	f04f 0a00 	mov.w	sl, #0
 80066fa:	f04f 0b00 	mov.w	fp, #0
 80066fe:	460a      	mov	r2, r1
 8006700:	9005      	str	r0, [sp, #20]
 8006702:	9219      	str	r2, [sp, #100]	@ 0x64
 8006704:	7811      	ldrb	r1, [r2, #0]
 8006706:	292b      	cmp	r1, #43	@ 0x2b
 8006708:	d048      	beq.n	800679c <_strtod_l+0xb4>
 800670a:	d836      	bhi.n	800677a <_strtod_l+0x92>
 800670c:	290d      	cmp	r1, #13
 800670e:	d830      	bhi.n	8006772 <_strtod_l+0x8a>
 8006710:	2908      	cmp	r1, #8
 8006712:	d830      	bhi.n	8006776 <_strtod_l+0x8e>
 8006714:	2900      	cmp	r1, #0
 8006716:	d039      	beq.n	800678c <_strtod_l+0xa4>
 8006718:	2200      	movs	r2, #0
 800671a:	920e      	str	r2, [sp, #56]	@ 0x38
 800671c:	9d19      	ldr	r5, [sp, #100]	@ 0x64
 800671e:	782a      	ldrb	r2, [r5, #0]
 8006720:	2a30      	cmp	r2, #48	@ 0x30
 8006722:	f040 80b0 	bne.w	8006886 <_strtod_l+0x19e>
 8006726:	786a      	ldrb	r2, [r5, #1]
 8006728:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 800672c:	2a58      	cmp	r2, #88	@ 0x58
 800672e:	d16c      	bne.n	800680a <_strtod_l+0x122>
 8006730:	9302      	str	r3, [sp, #8]
 8006732:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8006734:	4a8f      	ldr	r2, [pc, #572]	@ (8006974 <_strtod_l+0x28c>)
 8006736:	9301      	str	r3, [sp, #4]
 8006738:	ab1a      	add	r3, sp, #104	@ 0x68
 800673a:	9300      	str	r3, [sp, #0]
 800673c:	9805      	ldr	r0, [sp, #20]
 800673e:	ab1b      	add	r3, sp, #108	@ 0x6c
 8006740:	a919      	add	r1, sp, #100	@ 0x64
 8006742:	f001 f907 	bl	8007954 <__gethex>
 8006746:	f010 060f 	ands.w	r6, r0, #15
 800674a:	4604      	mov	r4, r0
 800674c:	d005      	beq.n	800675a <_strtod_l+0x72>
 800674e:	2e06      	cmp	r6, #6
 8006750:	d126      	bne.n	80067a0 <_strtod_l+0xb8>
 8006752:	2300      	movs	r3, #0
 8006754:	3501      	adds	r5, #1
 8006756:	9519      	str	r5, [sp, #100]	@ 0x64
 8006758:	930e      	str	r3, [sp, #56]	@ 0x38
 800675a:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 800675c:	2b00      	cmp	r3, #0
 800675e:	f040 8582 	bne.w	8007266 <_strtod_l+0xb7e>
 8006762:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8006764:	b1bb      	cbz	r3, 8006796 <_strtod_l+0xae>
 8006766:	4650      	mov	r0, sl
 8006768:	f10b 4100 	add.w	r1, fp, #2147483648	@ 0x80000000
 800676c:	b01f      	add	sp, #124	@ 0x7c
 800676e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006772:	2920      	cmp	r1, #32
 8006774:	d1d0      	bne.n	8006718 <_strtod_l+0x30>
 8006776:	3201      	adds	r2, #1
 8006778:	e7c3      	b.n	8006702 <_strtod_l+0x1a>
 800677a:	292d      	cmp	r1, #45	@ 0x2d
 800677c:	d1cc      	bne.n	8006718 <_strtod_l+0x30>
 800677e:	2101      	movs	r1, #1
 8006780:	910e      	str	r1, [sp, #56]	@ 0x38
 8006782:	1c51      	adds	r1, r2, #1
 8006784:	9119      	str	r1, [sp, #100]	@ 0x64
 8006786:	7852      	ldrb	r2, [r2, #1]
 8006788:	2a00      	cmp	r2, #0
 800678a:	d1c7      	bne.n	800671c <_strtod_l+0x34>
 800678c:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 800678e:	9419      	str	r4, [sp, #100]	@ 0x64
 8006790:	2b00      	cmp	r3, #0
 8006792:	f040 8566 	bne.w	8007262 <_strtod_l+0xb7a>
 8006796:	4650      	mov	r0, sl
 8006798:	4659      	mov	r1, fp
 800679a:	e7e7      	b.n	800676c <_strtod_l+0x84>
 800679c:	2100      	movs	r1, #0
 800679e:	e7ef      	b.n	8006780 <_strtod_l+0x98>
 80067a0:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 80067a2:	b13a      	cbz	r2, 80067b4 <_strtod_l+0xcc>
 80067a4:	2135      	movs	r1, #53	@ 0x35
 80067a6:	a81c      	add	r0, sp, #112	@ 0x70
 80067a8:	f7ff ff38 	bl	800661c <__copybits>
 80067ac:	991a      	ldr	r1, [sp, #104]	@ 0x68
 80067ae:	9805      	ldr	r0, [sp, #20]
 80067b0:	f7ff fb18 	bl	8005de4 <_Bfree>
 80067b4:	3e01      	subs	r6, #1
 80067b6:	9a1b      	ldr	r2, [sp, #108]	@ 0x6c
 80067b8:	2e04      	cmp	r6, #4
 80067ba:	d806      	bhi.n	80067ca <_strtod_l+0xe2>
 80067bc:	e8df f006 	tbb	[pc, r6]
 80067c0:	201d0314 	.word	0x201d0314
 80067c4:	14          	.byte	0x14
 80067c5:	00          	.byte	0x00
 80067c6:	e9dd ab1c 	ldrd	sl, fp, [sp, #112]	@ 0x70
 80067ca:	05e1      	lsls	r1, r4, #23
 80067cc:	bf48      	it	mi
 80067ce:	f04b 4b00 	orrmi.w	fp, fp, #2147483648	@ 0x80000000
 80067d2:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 80067d6:	0d1b      	lsrs	r3, r3, #20
 80067d8:	051b      	lsls	r3, r3, #20
 80067da:	2b00      	cmp	r3, #0
 80067dc:	d1bd      	bne.n	800675a <_strtod_l+0x72>
 80067de:	f7fe fb17 	bl	8004e10 <__errno>
 80067e2:	2322      	movs	r3, #34	@ 0x22
 80067e4:	6003      	str	r3, [r0, #0]
 80067e6:	e7b8      	b.n	800675a <_strtod_l+0x72>
 80067e8:	f202 4233 	addw	r2, r2, #1075	@ 0x433
 80067ec:	e9dd a31c 	ldrd	sl, r3, [sp, #112]	@ 0x70
 80067f0:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 80067f4:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 80067f8:	e7e7      	b.n	80067ca <_strtod_l+0xe2>
 80067fa:	f8df b17c 	ldr.w	fp, [pc, #380]	@ 8006978 <_strtod_l+0x290>
 80067fe:	e7e4      	b.n	80067ca <_strtod_l+0xe2>
 8006800:	f06f 4b00 	mvn.w	fp, #2147483648	@ 0x80000000
 8006804:	f04f 3aff 	mov.w	sl, #4294967295
 8006808:	e7df      	b.n	80067ca <_strtod_l+0xe2>
 800680a:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800680c:	1c5a      	adds	r2, r3, #1
 800680e:	9219      	str	r2, [sp, #100]	@ 0x64
 8006810:	785b      	ldrb	r3, [r3, #1]
 8006812:	2b30      	cmp	r3, #48	@ 0x30
 8006814:	d0f9      	beq.n	800680a <_strtod_l+0x122>
 8006816:	2b00      	cmp	r3, #0
 8006818:	d09f      	beq.n	800675a <_strtod_l+0x72>
 800681a:	2301      	movs	r3, #1
 800681c:	2700      	movs	r7, #0
 800681e:	220a      	movs	r2, #10
 8006820:	46b9      	mov	r9, r7
 8006822:	9308      	str	r3, [sp, #32]
 8006824:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8006826:	970b      	str	r7, [sp, #44]	@ 0x2c
 8006828:	930c      	str	r3, [sp, #48]	@ 0x30
 800682a:	9819      	ldr	r0, [sp, #100]	@ 0x64
 800682c:	7805      	ldrb	r5, [r0, #0]
 800682e:	f1a5 0330 	sub.w	r3, r5, #48	@ 0x30
 8006832:	b2d9      	uxtb	r1, r3
 8006834:	2909      	cmp	r1, #9
 8006836:	d928      	bls.n	800688a <_strtod_l+0x1a2>
 8006838:	2201      	movs	r2, #1
 800683a:	4950      	ldr	r1, [pc, #320]	@ (800697c <_strtod_l+0x294>)
 800683c:	f000 ffc8 	bl	80077d0 <strncmp>
 8006840:	2800      	cmp	r0, #0
 8006842:	d032      	beq.n	80068aa <_strtod_l+0x1c2>
 8006844:	2000      	movs	r0, #0
 8006846:	462a      	mov	r2, r5
 8006848:	4603      	mov	r3, r0
 800684a:	464d      	mov	r5, r9
 800684c:	900a      	str	r0, [sp, #40]	@ 0x28
 800684e:	2a65      	cmp	r2, #101	@ 0x65
 8006850:	d001      	beq.n	8006856 <_strtod_l+0x16e>
 8006852:	2a45      	cmp	r2, #69	@ 0x45
 8006854:	d114      	bne.n	8006880 <_strtod_l+0x198>
 8006856:	b91d      	cbnz	r5, 8006860 <_strtod_l+0x178>
 8006858:	9a08      	ldr	r2, [sp, #32]
 800685a:	4302      	orrs	r2, r0
 800685c:	d096      	beq.n	800678c <_strtod_l+0xa4>
 800685e:	2500      	movs	r5, #0
 8006860:	9c19      	ldr	r4, [sp, #100]	@ 0x64
 8006862:	1c62      	adds	r2, r4, #1
 8006864:	9219      	str	r2, [sp, #100]	@ 0x64
 8006866:	7862      	ldrb	r2, [r4, #1]
 8006868:	2a2b      	cmp	r2, #43	@ 0x2b
 800686a:	d07a      	beq.n	8006962 <_strtod_l+0x27a>
 800686c:	2a2d      	cmp	r2, #45	@ 0x2d
 800686e:	d07e      	beq.n	800696e <_strtod_l+0x286>
 8006870:	f04f 0c00 	mov.w	ip, #0
 8006874:	f1a2 0130 	sub.w	r1, r2, #48	@ 0x30
 8006878:	2909      	cmp	r1, #9
 800687a:	f240 8085 	bls.w	8006988 <_strtod_l+0x2a0>
 800687e:	9419      	str	r4, [sp, #100]	@ 0x64
 8006880:	f04f 0800 	mov.w	r8, #0
 8006884:	e0a5      	b.n	80069d2 <_strtod_l+0x2ea>
 8006886:	2300      	movs	r3, #0
 8006888:	e7c8      	b.n	800681c <_strtod_l+0x134>
 800688a:	f1b9 0f08 	cmp.w	r9, #8
 800688e:	bfd8      	it	le
 8006890:	990b      	ldrle	r1, [sp, #44]	@ 0x2c
 8006892:	f100 0001 	add.w	r0, r0, #1
 8006896:	bfd6      	itet	le
 8006898:	fb02 3301 	mlale	r3, r2, r1, r3
 800689c:	fb02 3707 	mlagt	r7, r2, r7, r3
 80068a0:	930b      	strle	r3, [sp, #44]	@ 0x2c
 80068a2:	f109 0901 	add.w	r9, r9, #1
 80068a6:	9019      	str	r0, [sp, #100]	@ 0x64
 80068a8:	e7bf      	b.n	800682a <_strtod_l+0x142>
 80068aa:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 80068ac:	1c5a      	adds	r2, r3, #1
 80068ae:	9219      	str	r2, [sp, #100]	@ 0x64
 80068b0:	785a      	ldrb	r2, [r3, #1]
 80068b2:	f1b9 0f00 	cmp.w	r9, #0
 80068b6:	d03b      	beq.n	8006930 <_strtod_l+0x248>
 80068b8:	464d      	mov	r5, r9
 80068ba:	900a      	str	r0, [sp, #40]	@ 0x28
 80068bc:	f1a2 0330 	sub.w	r3, r2, #48	@ 0x30
 80068c0:	2b09      	cmp	r3, #9
 80068c2:	d912      	bls.n	80068ea <_strtod_l+0x202>
 80068c4:	2301      	movs	r3, #1
 80068c6:	e7c2      	b.n	800684e <_strtod_l+0x166>
 80068c8:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 80068ca:	3001      	adds	r0, #1
 80068cc:	1c5a      	adds	r2, r3, #1
 80068ce:	9219      	str	r2, [sp, #100]	@ 0x64
 80068d0:	785a      	ldrb	r2, [r3, #1]
 80068d2:	2a30      	cmp	r2, #48	@ 0x30
 80068d4:	d0f8      	beq.n	80068c8 <_strtod_l+0x1e0>
 80068d6:	f1a2 0331 	sub.w	r3, r2, #49	@ 0x31
 80068da:	2b08      	cmp	r3, #8
 80068dc:	f200 84c8 	bhi.w	8007270 <_strtod_l+0xb88>
 80068e0:	900a      	str	r0, [sp, #40]	@ 0x28
 80068e2:	2000      	movs	r0, #0
 80068e4:	4605      	mov	r5, r0
 80068e6:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 80068e8:	930c      	str	r3, [sp, #48]	@ 0x30
 80068ea:	3a30      	subs	r2, #48	@ 0x30
 80068ec:	f100 0301 	add.w	r3, r0, #1
 80068f0:	d018      	beq.n	8006924 <_strtod_l+0x23c>
 80068f2:	462e      	mov	r6, r5
 80068f4:	f04f 0e0a 	mov.w	lr, #10
 80068f8:	990a      	ldr	r1, [sp, #40]	@ 0x28
 80068fa:	4419      	add	r1, r3
 80068fc:	910a      	str	r1, [sp, #40]	@ 0x28
 80068fe:	1c71      	adds	r1, r6, #1
 8006900:	eba1 0c05 	sub.w	ip, r1, r5
 8006904:	4563      	cmp	r3, ip
 8006906:	dc15      	bgt.n	8006934 <_strtod_l+0x24c>
 8006908:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
 800690c:	182b      	adds	r3, r5, r0
 800690e:	2b08      	cmp	r3, #8
 8006910:	f105 0501 	add.w	r5, r5, #1
 8006914:	4405      	add	r5, r0
 8006916:	dc1a      	bgt.n	800694e <_strtod_l+0x266>
 8006918:	230a      	movs	r3, #10
 800691a:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800691c:	fb03 2301 	mla	r3, r3, r1, r2
 8006920:	930b      	str	r3, [sp, #44]	@ 0x2c
 8006922:	2300      	movs	r3, #0
 8006924:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 8006926:	4618      	mov	r0, r3
 8006928:	1c51      	adds	r1, r2, #1
 800692a:	9119      	str	r1, [sp, #100]	@ 0x64
 800692c:	7852      	ldrb	r2, [r2, #1]
 800692e:	e7c5      	b.n	80068bc <_strtod_l+0x1d4>
 8006930:	4648      	mov	r0, r9
 8006932:	e7ce      	b.n	80068d2 <_strtod_l+0x1ea>
 8006934:	2e08      	cmp	r6, #8
 8006936:	dc05      	bgt.n	8006944 <_strtod_l+0x25c>
 8006938:	9e0b      	ldr	r6, [sp, #44]	@ 0x2c
 800693a:	fb0e f606 	mul.w	r6, lr, r6
 800693e:	960b      	str	r6, [sp, #44]	@ 0x2c
 8006940:	460e      	mov	r6, r1
 8006942:	e7dc      	b.n	80068fe <_strtod_l+0x216>
 8006944:	2910      	cmp	r1, #16
 8006946:	bfd8      	it	le
 8006948:	fb0e f707 	mulle.w	r7, lr, r7
 800694c:	e7f8      	b.n	8006940 <_strtod_l+0x258>
 800694e:	2b0f      	cmp	r3, #15
 8006950:	bfdc      	itt	le
 8006952:	230a      	movle	r3, #10
 8006954:	fb03 2707 	mlale	r7, r3, r7, r2
 8006958:	e7e3      	b.n	8006922 <_strtod_l+0x23a>
 800695a:	2300      	movs	r3, #0
 800695c:	930a      	str	r3, [sp, #40]	@ 0x28
 800695e:	2301      	movs	r3, #1
 8006960:	e77a      	b.n	8006858 <_strtod_l+0x170>
 8006962:	f04f 0c00 	mov.w	ip, #0
 8006966:	1ca2      	adds	r2, r4, #2
 8006968:	9219      	str	r2, [sp, #100]	@ 0x64
 800696a:	78a2      	ldrb	r2, [r4, #2]
 800696c:	e782      	b.n	8006874 <_strtod_l+0x18c>
 800696e:	f04f 0c01 	mov.w	ip, #1
 8006972:	e7f8      	b.n	8006966 <_strtod_l+0x27e>
 8006974:	08008a74 	.word	0x08008a74
 8006978:	7ff00000 	.word	0x7ff00000
 800697c:	080088a9 	.word	0x080088a9
 8006980:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 8006982:	1c51      	adds	r1, r2, #1
 8006984:	9119      	str	r1, [sp, #100]	@ 0x64
 8006986:	7852      	ldrb	r2, [r2, #1]
 8006988:	2a30      	cmp	r2, #48	@ 0x30
 800698a:	d0f9      	beq.n	8006980 <_strtod_l+0x298>
 800698c:	f1a2 0131 	sub.w	r1, r2, #49	@ 0x31
 8006990:	2908      	cmp	r1, #8
 8006992:	f63f af75 	bhi.w	8006880 <_strtod_l+0x198>
 8006996:	f04f 080a 	mov.w	r8, #10
 800699a:	3a30      	subs	r2, #48	@ 0x30
 800699c:	9209      	str	r2, [sp, #36]	@ 0x24
 800699e:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 80069a0:	920f      	str	r2, [sp, #60]	@ 0x3c
 80069a2:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 80069a4:	1c56      	adds	r6, r2, #1
 80069a6:	9619      	str	r6, [sp, #100]	@ 0x64
 80069a8:	7852      	ldrb	r2, [r2, #1]
 80069aa:	f1a2 0e30 	sub.w	lr, r2, #48	@ 0x30
 80069ae:	f1be 0f09 	cmp.w	lr, #9
 80069b2:	d939      	bls.n	8006a28 <_strtod_l+0x340>
 80069b4:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 80069b6:	f644 681f 	movw	r8, #19999	@ 0x4e1f
 80069ba:	1a76      	subs	r6, r6, r1
 80069bc:	2e08      	cmp	r6, #8
 80069be:	dc03      	bgt.n	80069c8 <_strtod_l+0x2e0>
 80069c0:	9909      	ldr	r1, [sp, #36]	@ 0x24
 80069c2:	4588      	cmp	r8, r1
 80069c4:	bfa8      	it	ge
 80069c6:	4688      	movge	r8, r1
 80069c8:	f1bc 0f00 	cmp.w	ip, #0
 80069cc:	d001      	beq.n	80069d2 <_strtod_l+0x2ea>
 80069ce:	f1c8 0800 	rsb	r8, r8, #0
 80069d2:	2d00      	cmp	r5, #0
 80069d4:	d14e      	bne.n	8006a74 <_strtod_l+0x38c>
 80069d6:	9908      	ldr	r1, [sp, #32]
 80069d8:	4308      	orrs	r0, r1
 80069da:	f47f aebe 	bne.w	800675a <_strtod_l+0x72>
 80069de:	2b00      	cmp	r3, #0
 80069e0:	f47f aed4 	bne.w	800678c <_strtod_l+0xa4>
 80069e4:	2a69      	cmp	r2, #105	@ 0x69
 80069e6:	d028      	beq.n	8006a3a <_strtod_l+0x352>
 80069e8:	dc25      	bgt.n	8006a36 <_strtod_l+0x34e>
 80069ea:	2a49      	cmp	r2, #73	@ 0x49
 80069ec:	d025      	beq.n	8006a3a <_strtod_l+0x352>
 80069ee:	2a4e      	cmp	r2, #78	@ 0x4e
 80069f0:	f47f aecc 	bne.w	800678c <_strtod_l+0xa4>
 80069f4:	4999      	ldr	r1, [pc, #612]	@ (8006c5c <_strtod_l+0x574>)
 80069f6:	a819      	add	r0, sp, #100	@ 0x64
 80069f8:	f001 f9ce 	bl	8007d98 <__match>
 80069fc:	2800      	cmp	r0, #0
 80069fe:	f43f aec5 	beq.w	800678c <_strtod_l+0xa4>
 8006a02:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8006a04:	781b      	ldrb	r3, [r3, #0]
 8006a06:	2b28      	cmp	r3, #40	@ 0x28
 8006a08:	d12e      	bne.n	8006a68 <_strtod_l+0x380>
 8006a0a:	4995      	ldr	r1, [pc, #596]	@ (8006c60 <_strtod_l+0x578>)
 8006a0c:	aa1c      	add	r2, sp, #112	@ 0x70
 8006a0e:	a819      	add	r0, sp, #100	@ 0x64
 8006a10:	f001 f9d6 	bl	8007dc0 <__hexnan>
 8006a14:	2805      	cmp	r0, #5
 8006a16:	d127      	bne.n	8006a68 <_strtod_l+0x380>
 8006a18:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 8006a1a:	f8dd a070 	ldr.w	sl, [sp, #112]	@ 0x70
 8006a1e:	f043 4bff 	orr.w	fp, r3, #2139095040	@ 0x7f800000
 8006a22:	f44b 0be0 	orr.w	fp, fp, #7340032	@ 0x700000
 8006a26:	e698      	b.n	800675a <_strtod_l+0x72>
 8006a28:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8006a2a:	fb08 2101 	mla	r1, r8, r1, r2
 8006a2e:	f1a1 0230 	sub.w	r2, r1, #48	@ 0x30
 8006a32:	9209      	str	r2, [sp, #36]	@ 0x24
 8006a34:	e7b5      	b.n	80069a2 <_strtod_l+0x2ba>
 8006a36:	2a6e      	cmp	r2, #110	@ 0x6e
 8006a38:	e7da      	b.n	80069f0 <_strtod_l+0x308>
 8006a3a:	498a      	ldr	r1, [pc, #552]	@ (8006c64 <_strtod_l+0x57c>)
 8006a3c:	a819      	add	r0, sp, #100	@ 0x64
 8006a3e:	f001 f9ab 	bl	8007d98 <__match>
 8006a42:	2800      	cmp	r0, #0
 8006a44:	f43f aea2 	beq.w	800678c <_strtod_l+0xa4>
 8006a48:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8006a4a:	4987      	ldr	r1, [pc, #540]	@ (8006c68 <_strtod_l+0x580>)
 8006a4c:	3b01      	subs	r3, #1
 8006a4e:	a819      	add	r0, sp, #100	@ 0x64
 8006a50:	9319      	str	r3, [sp, #100]	@ 0x64
 8006a52:	f001 f9a1 	bl	8007d98 <__match>
 8006a56:	b910      	cbnz	r0, 8006a5e <_strtod_l+0x376>
 8006a58:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8006a5a:	3301      	adds	r3, #1
 8006a5c:	9319      	str	r3, [sp, #100]	@ 0x64
 8006a5e:	f04f 0a00 	mov.w	sl, #0
 8006a62:	f8df b208 	ldr.w	fp, [pc, #520]	@ 8006c6c <_strtod_l+0x584>
 8006a66:	e678      	b.n	800675a <_strtod_l+0x72>
 8006a68:	4881      	ldr	r0, [pc, #516]	@ (8006c70 <_strtod_l+0x588>)
 8006a6a:	f000 fed3 	bl	8007814 <nan>
 8006a6e:	4682      	mov	sl, r0
 8006a70:	468b      	mov	fp, r1
 8006a72:	e672      	b.n	800675a <_strtod_l+0x72>
 8006a74:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8006a76:	f1b9 0f00 	cmp.w	r9, #0
 8006a7a:	bf08      	it	eq
 8006a7c:	46a9      	moveq	r9, r5
 8006a7e:	eba8 0303 	sub.w	r3, r8, r3
 8006a82:	2d10      	cmp	r5, #16
 8006a84:	980b      	ldr	r0, [sp, #44]	@ 0x2c
 8006a86:	462c      	mov	r4, r5
 8006a88:	9309      	str	r3, [sp, #36]	@ 0x24
 8006a8a:	bfa8      	it	ge
 8006a8c:	2410      	movge	r4, #16
 8006a8e:	f7f9 fca9 	bl	80003e4 <__aeabi_ui2d>
 8006a92:	2d09      	cmp	r5, #9
 8006a94:	4682      	mov	sl, r0
 8006a96:	468b      	mov	fp, r1
 8006a98:	dc11      	bgt.n	8006abe <_strtod_l+0x3d6>
 8006a9a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006a9c:	2b00      	cmp	r3, #0
 8006a9e:	f43f ae5c 	beq.w	800675a <_strtod_l+0x72>
 8006aa2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006aa4:	dd76      	ble.n	8006b94 <_strtod_l+0x4ac>
 8006aa6:	2b16      	cmp	r3, #22
 8006aa8:	dc5d      	bgt.n	8006b66 <_strtod_l+0x47e>
 8006aaa:	4972      	ldr	r1, [pc, #456]	@ (8006c74 <_strtod_l+0x58c>)
 8006aac:	4652      	mov	r2, sl
 8006aae:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8006ab2:	465b      	mov	r3, fp
 8006ab4:	e9d1 0100 	ldrd	r0, r1, [r1]
 8006ab8:	f7f9 fd0e 	bl	80004d8 <__aeabi_dmul>
 8006abc:	e7d7      	b.n	8006a6e <_strtod_l+0x386>
 8006abe:	4b6d      	ldr	r3, [pc, #436]	@ (8006c74 <_strtod_l+0x58c>)
 8006ac0:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8006ac4:	e953 2312 	ldrd	r2, r3, [r3, #-72]	@ 0x48
 8006ac8:	f7f9 fd06 	bl	80004d8 <__aeabi_dmul>
 8006acc:	4682      	mov	sl, r0
 8006ace:	4638      	mov	r0, r7
 8006ad0:	468b      	mov	fp, r1
 8006ad2:	f7f9 fc87 	bl	80003e4 <__aeabi_ui2d>
 8006ad6:	4602      	mov	r2, r0
 8006ad8:	460b      	mov	r3, r1
 8006ada:	4650      	mov	r0, sl
 8006adc:	4659      	mov	r1, fp
 8006ade:	f7f9 fb45 	bl	800016c <__adddf3>
 8006ae2:	2d0f      	cmp	r5, #15
 8006ae4:	4682      	mov	sl, r0
 8006ae6:	468b      	mov	fp, r1
 8006ae8:	ddd7      	ble.n	8006a9a <_strtod_l+0x3b2>
 8006aea:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006aec:	1b2c      	subs	r4, r5, r4
 8006aee:	441c      	add	r4, r3
 8006af0:	2c00      	cmp	r4, #0
 8006af2:	f340 8093 	ble.w	8006c1c <_strtod_l+0x534>
 8006af6:	f014 030f 	ands.w	r3, r4, #15
 8006afa:	d00a      	beq.n	8006b12 <_strtod_l+0x42a>
 8006afc:	495d      	ldr	r1, [pc, #372]	@ (8006c74 <_strtod_l+0x58c>)
 8006afe:	4652      	mov	r2, sl
 8006b00:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8006b04:	e9d1 0100 	ldrd	r0, r1, [r1]
 8006b08:	465b      	mov	r3, fp
 8006b0a:	f7f9 fce5 	bl	80004d8 <__aeabi_dmul>
 8006b0e:	4682      	mov	sl, r0
 8006b10:	468b      	mov	fp, r1
 8006b12:	f034 040f 	bics.w	r4, r4, #15
 8006b16:	d073      	beq.n	8006c00 <_strtod_l+0x518>
 8006b18:	f5b4 7f9a 	cmp.w	r4, #308	@ 0x134
 8006b1c:	dd49      	ble.n	8006bb2 <_strtod_l+0x4ca>
 8006b1e:	2400      	movs	r4, #0
 8006b20:	46a0      	mov	r8, r4
 8006b22:	46a1      	mov	r9, r4
 8006b24:	940b      	str	r4, [sp, #44]	@ 0x2c
 8006b26:	2322      	movs	r3, #34	@ 0x22
 8006b28:	f04f 0a00 	mov.w	sl, #0
 8006b2c:	9a05      	ldr	r2, [sp, #20]
 8006b2e:	f8df b13c 	ldr.w	fp, [pc, #316]	@ 8006c6c <_strtod_l+0x584>
 8006b32:	6013      	str	r3, [r2, #0]
 8006b34:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8006b36:	2b00      	cmp	r3, #0
 8006b38:	f43f ae0f 	beq.w	800675a <_strtod_l+0x72>
 8006b3c:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8006b3e:	9805      	ldr	r0, [sp, #20]
 8006b40:	f7ff f950 	bl	8005de4 <_Bfree>
 8006b44:	4649      	mov	r1, r9
 8006b46:	9805      	ldr	r0, [sp, #20]
 8006b48:	f7ff f94c 	bl	8005de4 <_Bfree>
 8006b4c:	4641      	mov	r1, r8
 8006b4e:	9805      	ldr	r0, [sp, #20]
 8006b50:	f7ff f948 	bl	8005de4 <_Bfree>
 8006b54:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8006b56:	9805      	ldr	r0, [sp, #20]
 8006b58:	f7ff f944 	bl	8005de4 <_Bfree>
 8006b5c:	4621      	mov	r1, r4
 8006b5e:	9805      	ldr	r0, [sp, #20]
 8006b60:	f7ff f940 	bl	8005de4 <_Bfree>
 8006b64:	e5f9      	b.n	800675a <_strtod_l+0x72>
 8006b66:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8006b68:	f1c5 0325 	rsb	r3, r5, #37	@ 0x25
 8006b6c:	4293      	cmp	r3, r2
 8006b6e:	dbbc      	blt.n	8006aea <_strtod_l+0x402>
 8006b70:	4c40      	ldr	r4, [pc, #256]	@ (8006c74 <_strtod_l+0x58c>)
 8006b72:	f1c5 050f 	rsb	r5, r5, #15
 8006b76:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 8006b7a:	4652      	mov	r2, sl
 8006b7c:	e9d1 0100 	ldrd	r0, r1, [r1]
 8006b80:	465b      	mov	r3, fp
 8006b82:	f7f9 fca9 	bl	80004d8 <__aeabi_dmul>
 8006b86:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006b88:	1b5d      	subs	r5, r3, r5
 8006b8a:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 8006b8e:	e9d4 2300 	ldrd	r2, r3, [r4]
 8006b92:	e791      	b.n	8006ab8 <_strtod_l+0x3d0>
 8006b94:	3316      	adds	r3, #22
 8006b96:	dba8      	blt.n	8006aea <_strtod_l+0x402>
 8006b98:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8006b9a:	4650      	mov	r0, sl
 8006b9c:	eba3 0808 	sub.w	r8, r3, r8
 8006ba0:	4b34      	ldr	r3, [pc, #208]	@ (8006c74 <_strtod_l+0x58c>)
 8006ba2:	4659      	mov	r1, fp
 8006ba4:	eb03 08c8 	add.w	r8, r3, r8, lsl #3
 8006ba8:	e9d8 2300 	ldrd	r2, r3, [r8]
 8006bac:	f7f9 fdbe 	bl	800072c <__aeabi_ddiv>
 8006bb0:	e75d      	b.n	8006a6e <_strtod_l+0x386>
 8006bb2:	2300      	movs	r3, #0
 8006bb4:	4650      	mov	r0, sl
 8006bb6:	4659      	mov	r1, fp
 8006bb8:	461e      	mov	r6, r3
 8006bba:	4f2f      	ldr	r7, [pc, #188]	@ (8006c78 <_strtod_l+0x590>)
 8006bbc:	1124      	asrs	r4, r4, #4
 8006bbe:	2c01      	cmp	r4, #1
 8006bc0:	dc21      	bgt.n	8006c06 <_strtod_l+0x51e>
 8006bc2:	b10b      	cbz	r3, 8006bc8 <_strtod_l+0x4e0>
 8006bc4:	4682      	mov	sl, r0
 8006bc6:	468b      	mov	fp, r1
 8006bc8:	492b      	ldr	r1, [pc, #172]	@ (8006c78 <_strtod_l+0x590>)
 8006bca:	f1ab 7b54 	sub.w	fp, fp, #55574528	@ 0x3500000
 8006bce:	eb01 01c6 	add.w	r1, r1, r6, lsl #3
 8006bd2:	4652      	mov	r2, sl
 8006bd4:	e9d1 0100 	ldrd	r0, r1, [r1]
 8006bd8:	465b      	mov	r3, fp
 8006bda:	f7f9 fc7d 	bl	80004d8 <__aeabi_dmul>
 8006bde:	4b23      	ldr	r3, [pc, #140]	@ (8006c6c <_strtod_l+0x584>)
 8006be0:	460a      	mov	r2, r1
 8006be2:	400b      	ands	r3, r1
 8006be4:	4925      	ldr	r1, [pc, #148]	@ (8006c7c <_strtod_l+0x594>)
 8006be6:	4682      	mov	sl, r0
 8006be8:	428b      	cmp	r3, r1
 8006bea:	d898      	bhi.n	8006b1e <_strtod_l+0x436>
 8006bec:	f5a1 1180 	sub.w	r1, r1, #1048576	@ 0x100000
 8006bf0:	428b      	cmp	r3, r1
 8006bf2:	bf86      	itte	hi
 8006bf4:	f04f 3aff 	movhi.w	sl, #4294967295
 8006bf8:	f8df b084 	ldrhi.w	fp, [pc, #132]	@ 8006c80 <_strtod_l+0x598>
 8006bfc:	f102 7b54 	addls.w	fp, r2, #55574528	@ 0x3500000
 8006c00:	2300      	movs	r3, #0
 8006c02:	9308      	str	r3, [sp, #32]
 8006c04:	e076      	b.n	8006cf4 <_strtod_l+0x60c>
 8006c06:	07e2      	lsls	r2, r4, #31
 8006c08:	d504      	bpl.n	8006c14 <_strtod_l+0x52c>
 8006c0a:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006c0e:	f7f9 fc63 	bl	80004d8 <__aeabi_dmul>
 8006c12:	2301      	movs	r3, #1
 8006c14:	3601      	adds	r6, #1
 8006c16:	1064      	asrs	r4, r4, #1
 8006c18:	3708      	adds	r7, #8
 8006c1a:	e7d0      	b.n	8006bbe <_strtod_l+0x4d6>
 8006c1c:	d0f0      	beq.n	8006c00 <_strtod_l+0x518>
 8006c1e:	4264      	negs	r4, r4
 8006c20:	f014 020f 	ands.w	r2, r4, #15
 8006c24:	d00a      	beq.n	8006c3c <_strtod_l+0x554>
 8006c26:	4b13      	ldr	r3, [pc, #76]	@ (8006c74 <_strtod_l+0x58c>)
 8006c28:	4650      	mov	r0, sl
 8006c2a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8006c2e:	4659      	mov	r1, fp
 8006c30:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006c34:	f7f9 fd7a 	bl	800072c <__aeabi_ddiv>
 8006c38:	4682      	mov	sl, r0
 8006c3a:	468b      	mov	fp, r1
 8006c3c:	1124      	asrs	r4, r4, #4
 8006c3e:	d0df      	beq.n	8006c00 <_strtod_l+0x518>
 8006c40:	2c1f      	cmp	r4, #31
 8006c42:	dd1f      	ble.n	8006c84 <_strtod_l+0x59c>
 8006c44:	2400      	movs	r4, #0
 8006c46:	46a0      	mov	r8, r4
 8006c48:	46a1      	mov	r9, r4
 8006c4a:	940b      	str	r4, [sp, #44]	@ 0x2c
 8006c4c:	2322      	movs	r3, #34	@ 0x22
 8006c4e:	9a05      	ldr	r2, [sp, #20]
 8006c50:	f04f 0a00 	mov.w	sl, #0
 8006c54:	f04f 0b00 	mov.w	fp, #0
 8006c58:	6013      	str	r3, [r2, #0]
 8006c5a:	e76b      	b.n	8006b34 <_strtod_l+0x44c>
 8006c5c:	08008797 	.word	0x08008797
 8006c60:	08008a60 	.word	0x08008a60
 8006c64:	0800878f 	.word	0x0800878f
 8006c68:	080087c6 	.word	0x080087c6
 8006c6c:	7ff00000 	.word	0x7ff00000
 8006c70:	080088ff 	.word	0x080088ff
 8006c74:	08008998 	.word	0x08008998
 8006c78:	08008970 	.word	0x08008970
 8006c7c:	7ca00000 	.word	0x7ca00000
 8006c80:	7fefffff 	.word	0x7fefffff
 8006c84:	f014 0310 	ands.w	r3, r4, #16
 8006c88:	bf18      	it	ne
 8006c8a:	236a      	movne	r3, #106	@ 0x6a
 8006c8c:	4650      	mov	r0, sl
 8006c8e:	9308      	str	r3, [sp, #32]
 8006c90:	4659      	mov	r1, fp
 8006c92:	2300      	movs	r3, #0
 8006c94:	4e77      	ldr	r6, [pc, #476]	@ (8006e74 <_strtod_l+0x78c>)
 8006c96:	07e7      	lsls	r7, r4, #31
 8006c98:	d504      	bpl.n	8006ca4 <_strtod_l+0x5bc>
 8006c9a:	e9d6 2300 	ldrd	r2, r3, [r6]
 8006c9e:	f7f9 fc1b 	bl	80004d8 <__aeabi_dmul>
 8006ca2:	2301      	movs	r3, #1
 8006ca4:	1064      	asrs	r4, r4, #1
 8006ca6:	f106 0608 	add.w	r6, r6, #8
 8006caa:	d1f4      	bne.n	8006c96 <_strtod_l+0x5ae>
 8006cac:	b10b      	cbz	r3, 8006cb2 <_strtod_l+0x5ca>
 8006cae:	4682      	mov	sl, r0
 8006cb0:	468b      	mov	fp, r1
 8006cb2:	9b08      	ldr	r3, [sp, #32]
 8006cb4:	b1b3      	cbz	r3, 8006ce4 <_strtod_l+0x5fc>
 8006cb6:	f3cb 520a 	ubfx	r2, fp, #20, #11
 8006cba:	f1c2 036b 	rsb	r3, r2, #107	@ 0x6b
 8006cbe:	2b00      	cmp	r3, #0
 8006cc0:	4659      	mov	r1, fp
 8006cc2:	dd0f      	ble.n	8006ce4 <_strtod_l+0x5fc>
 8006cc4:	2b1f      	cmp	r3, #31
 8006cc6:	dd58      	ble.n	8006d7a <_strtod_l+0x692>
 8006cc8:	2b34      	cmp	r3, #52	@ 0x34
 8006cca:	bfd8      	it	le
 8006ccc:	f04f 33ff 	movle.w	r3, #4294967295
 8006cd0:	f04f 0a00 	mov.w	sl, #0
 8006cd4:	bfcf      	iteee	gt
 8006cd6:	f04f 7b5c 	movgt.w	fp, #57671680	@ 0x3700000
 8006cda:	f1c2 024b 	rsble	r2, r2, #75	@ 0x4b
 8006cde:	4093      	lslle	r3, r2
 8006ce0:	ea03 0b01 	andle.w	fp, r3, r1
 8006ce4:	2200      	movs	r2, #0
 8006ce6:	2300      	movs	r3, #0
 8006ce8:	4650      	mov	r0, sl
 8006cea:	4659      	mov	r1, fp
 8006cec:	f7f9 fe5c 	bl	80009a8 <__aeabi_dcmpeq>
 8006cf0:	2800      	cmp	r0, #0
 8006cf2:	d1a7      	bne.n	8006c44 <_strtod_l+0x55c>
 8006cf4:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8006cf6:	464a      	mov	r2, r9
 8006cf8:	9300      	str	r3, [sp, #0]
 8006cfa:	990c      	ldr	r1, [sp, #48]	@ 0x30
 8006cfc:	462b      	mov	r3, r5
 8006cfe:	9805      	ldr	r0, [sp, #20]
 8006d00:	f7ff f8d8 	bl	8005eb4 <__s2b>
 8006d04:	900b      	str	r0, [sp, #44]	@ 0x2c
 8006d06:	2800      	cmp	r0, #0
 8006d08:	f43f af09 	beq.w	8006b1e <_strtod_l+0x436>
 8006d0c:	2400      	movs	r4, #0
 8006d0e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8006d10:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8006d12:	2a00      	cmp	r2, #0
 8006d14:	eba3 0308 	sub.w	r3, r3, r8
 8006d18:	bfa8      	it	ge
 8006d1a:	2300      	movge	r3, #0
 8006d1c:	46a0      	mov	r8, r4
 8006d1e:	9312      	str	r3, [sp, #72]	@ 0x48
 8006d20:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 8006d24:	9316      	str	r3, [sp, #88]	@ 0x58
 8006d26:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8006d28:	9805      	ldr	r0, [sp, #20]
 8006d2a:	6859      	ldr	r1, [r3, #4]
 8006d2c:	f7ff f81a 	bl	8005d64 <_Balloc>
 8006d30:	4681      	mov	r9, r0
 8006d32:	2800      	cmp	r0, #0
 8006d34:	f43f aef7 	beq.w	8006b26 <_strtod_l+0x43e>
 8006d38:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8006d3a:	300c      	adds	r0, #12
 8006d3c:	691a      	ldr	r2, [r3, #16]
 8006d3e:	f103 010c 	add.w	r1, r3, #12
 8006d42:	3202      	adds	r2, #2
 8006d44:	0092      	lsls	r2, r2, #2
 8006d46:	f7fe f89e 	bl	8004e86 <memcpy>
 8006d4a:	ab1c      	add	r3, sp, #112	@ 0x70
 8006d4c:	9301      	str	r3, [sp, #4]
 8006d4e:	ab1b      	add	r3, sp, #108	@ 0x6c
 8006d50:	9300      	str	r3, [sp, #0]
 8006d52:	4652      	mov	r2, sl
 8006d54:	465b      	mov	r3, fp
 8006d56:	9805      	ldr	r0, [sp, #20]
 8006d58:	e9cd ab0c 	strd	sl, fp, [sp, #48]	@ 0x30
 8006d5c:	f7ff fbd6 	bl	800650c <__d2b>
 8006d60:	901a      	str	r0, [sp, #104]	@ 0x68
 8006d62:	2800      	cmp	r0, #0
 8006d64:	f43f aedf 	beq.w	8006b26 <_strtod_l+0x43e>
 8006d68:	2101      	movs	r1, #1
 8006d6a:	9805      	ldr	r0, [sp, #20]
 8006d6c:	f7ff f938 	bl	8005fe0 <__i2b>
 8006d70:	4680      	mov	r8, r0
 8006d72:	b948      	cbnz	r0, 8006d88 <_strtod_l+0x6a0>
 8006d74:	f04f 0800 	mov.w	r8, #0
 8006d78:	e6d5      	b.n	8006b26 <_strtod_l+0x43e>
 8006d7a:	f04f 32ff 	mov.w	r2, #4294967295
 8006d7e:	fa02 f303 	lsl.w	r3, r2, r3
 8006d82:	ea03 0a0a 	and.w	sl, r3, sl
 8006d86:	e7ad      	b.n	8006ce4 <_strtod_l+0x5fc>
 8006d88:	9d1b      	ldr	r5, [sp, #108]	@ 0x6c
 8006d8a:	9a1c      	ldr	r2, [sp, #112]	@ 0x70
 8006d8c:	2d00      	cmp	r5, #0
 8006d8e:	bfab      	itete	ge
 8006d90:	9b12      	ldrge	r3, [sp, #72]	@ 0x48
 8006d92:	9b16      	ldrlt	r3, [sp, #88]	@ 0x58
 8006d94:	18ef      	addge	r7, r5, r3
 8006d96:	1b5e      	sublt	r6, r3, r5
 8006d98:	9b08      	ldr	r3, [sp, #32]
 8006d9a:	bfa8      	it	ge
 8006d9c:	9e16      	ldrge	r6, [sp, #88]	@ 0x58
 8006d9e:	eba5 0503 	sub.w	r5, r5, r3
 8006da2:	4415      	add	r5, r2
 8006da4:	4b34      	ldr	r3, [pc, #208]	@ (8006e78 <_strtod_l+0x790>)
 8006da6:	f105 35ff 	add.w	r5, r5, #4294967295
 8006daa:	bfb8      	it	lt
 8006dac:	9f12      	ldrlt	r7, [sp, #72]	@ 0x48
 8006dae:	429d      	cmp	r5, r3
 8006db0:	f1c2 0236 	rsb	r2, r2, #54	@ 0x36
 8006db4:	da50      	bge.n	8006e58 <_strtod_l+0x770>
 8006db6:	1b5b      	subs	r3, r3, r5
 8006db8:	2b1f      	cmp	r3, #31
 8006dba:	f04f 0101 	mov.w	r1, #1
 8006dbe:	eba2 0203 	sub.w	r2, r2, r3
 8006dc2:	dc3d      	bgt.n	8006e40 <_strtod_l+0x758>
 8006dc4:	fa01 f303 	lsl.w	r3, r1, r3
 8006dc8:	9313      	str	r3, [sp, #76]	@ 0x4c
 8006dca:	2300      	movs	r3, #0
 8006dcc:	9310      	str	r3, [sp, #64]	@ 0x40
 8006dce:	18bd      	adds	r5, r7, r2
 8006dd0:	9b08      	ldr	r3, [sp, #32]
 8006dd2:	42af      	cmp	r7, r5
 8006dd4:	4416      	add	r6, r2
 8006dd6:	441e      	add	r6, r3
 8006dd8:	463b      	mov	r3, r7
 8006dda:	bfa8      	it	ge
 8006ddc:	462b      	movge	r3, r5
 8006dde:	42b3      	cmp	r3, r6
 8006de0:	bfa8      	it	ge
 8006de2:	4633      	movge	r3, r6
 8006de4:	2b00      	cmp	r3, #0
 8006de6:	bfc2      	ittt	gt
 8006de8:	1aed      	subgt	r5, r5, r3
 8006dea:	1af6      	subgt	r6, r6, r3
 8006dec:	1aff      	subgt	r7, r7, r3
 8006dee:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 8006df0:	2b00      	cmp	r3, #0
 8006df2:	dd16      	ble.n	8006e22 <_strtod_l+0x73a>
 8006df4:	4641      	mov	r1, r8
 8006df6:	461a      	mov	r2, r3
 8006df8:	9805      	ldr	r0, [sp, #20]
 8006dfa:	f7ff f9a9 	bl	8006150 <__pow5mult>
 8006dfe:	4680      	mov	r8, r0
 8006e00:	2800      	cmp	r0, #0
 8006e02:	d0b7      	beq.n	8006d74 <_strtod_l+0x68c>
 8006e04:	4601      	mov	r1, r0
 8006e06:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 8006e08:	9805      	ldr	r0, [sp, #20]
 8006e0a:	f7ff f8ff 	bl	800600c <__multiply>
 8006e0e:	900a      	str	r0, [sp, #40]	@ 0x28
 8006e10:	2800      	cmp	r0, #0
 8006e12:	f43f ae88 	beq.w	8006b26 <_strtod_l+0x43e>
 8006e16:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8006e18:	9805      	ldr	r0, [sp, #20]
 8006e1a:	f7fe ffe3 	bl	8005de4 <_Bfree>
 8006e1e:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8006e20:	931a      	str	r3, [sp, #104]	@ 0x68
 8006e22:	2d00      	cmp	r5, #0
 8006e24:	dc1d      	bgt.n	8006e62 <_strtod_l+0x77a>
 8006e26:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006e28:	2b00      	cmp	r3, #0
 8006e2a:	dd27      	ble.n	8006e7c <_strtod_l+0x794>
 8006e2c:	4649      	mov	r1, r9
 8006e2e:	9a16      	ldr	r2, [sp, #88]	@ 0x58
 8006e30:	9805      	ldr	r0, [sp, #20]
 8006e32:	f7ff f98d 	bl	8006150 <__pow5mult>
 8006e36:	4681      	mov	r9, r0
 8006e38:	bb00      	cbnz	r0, 8006e7c <_strtod_l+0x794>
 8006e3a:	f04f 0900 	mov.w	r9, #0
 8006e3e:	e672      	b.n	8006b26 <_strtod_l+0x43e>
 8006e40:	f1c5 457f 	rsb	r5, r5, #4278190080	@ 0xff000000
 8006e44:	f505 057f 	add.w	r5, r5, #16711680	@ 0xff0000
 8006e48:	f505 457b 	add.w	r5, r5, #64256	@ 0xfb00
 8006e4c:	35e2      	adds	r5, #226	@ 0xe2
 8006e4e:	fa01 f305 	lsl.w	r3, r1, r5
 8006e52:	9310      	str	r3, [sp, #64]	@ 0x40
 8006e54:	9113      	str	r1, [sp, #76]	@ 0x4c
 8006e56:	e7ba      	b.n	8006dce <_strtod_l+0x6e6>
 8006e58:	2300      	movs	r3, #0
 8006e5a:	9310      	str	r3, [sp, #64]	@ 0x40
 8006e5c:	2301      	movs	r3, #1
 8006e5e:	9313      	str	r3, [sp, #76]	@ 0x4c
 8006e60:	e7b5      	b.n	8006dce <_strtod_l+0x6e6>
 8006e62:	462a      	mov	r2, r5
 8006e64:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8006e66:	9805      	ldr	r0, [sp, #20]
 8006e68:	f7ff f9cc 	bl	8006204 <__lshift>
 8006e6c:	901a      	str	r0, [sp, #104]	@ 0x68
 8006e6e:	2800      	cmp	r0, #0
 8006e70:	d1d9      	bne.n	8006e26 <_strtod_l+0x73e>
 8006e72:	e658      	b.n	8006b26 <_strtod_l+0x43e>
 8006e74:	08008a88 	.word	0x08008a88
 8006e78:	fffffc02 	.word	0xfffffc02
 8006e7c:	2e00      	cmp	r6, #0
 8006e7e:	dd07      	ble.n	8006e90 <_strtod_l+0x7a8>
 8006e80:	4649      	mov	r1, r9
 8006e82:	4632      	mov	r2, r6
 8006e84:	9805      	ldr	r0, [sp, #20]
 8006e86:	f7ff f9bd 	bl	8006204 <__lshift>
 8006e8a:	4681      	mov	r9, r0
 8006e8c:	2800      	cmp	r0, #0
 8006e8e:	d0d4      	beq.n	8006e3a <_strtod_l+0x752>
 8006e90:	2f00      	cmp	r7, #0
 8006e92:	dd08      	ble.n	8006ea6 <_strtod_l+0x7be>
 8006e94:	4641      	mov	r1, r8
 8006e96:	463a      	mov	r2, r7
 8006e98:	9805      	ldr	r0, [sp, #20]
 8006e9a:	f7ff f9b3 	bl	8006204 <__lshift>
 8006e9e:	4680      	mov	r8, r0
 8006ea0:	2800      	cmp	r0, #0
 8006ea2:	f43f ae40 	beq.w	8006b26 <_strtod_l+0x43e>
 8006ea6:	464a      	mov	r2, r9
 8006ea8:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8006eaa:	9805      	ldr	r0, [sp, #20]
 8006eac:	f7ff fa32 	bl	8006314 <__mdiff>
 8006eb0:	4604      	mov	r4, r0
 8006eb2:	2800      	cmp	r0, #0
 8006eb4:	f43f ae37 	beq.w	8006b26 <_strtod_l+0x43e>
 8006eb8:	68c3      	ldr	r3, [r0, #12]
 8006eba:	4641      	mov	r1, r8
 8006ebc:	930f      	str	r3, [sp, #60]	@ 0x3c
 8006ebe:	2300      	movs	r3, #0
 8006ec0:	60c3      	str	r3, [r0, #12]
 8006ec2:	f7ff fa0b 	bl	80062dc <__mcmp>
 8006ec6:	2800      	cmp	r0, #0
 8006ec8:	da3d      	bge.n	8006f46 <_strtod_l+0x85e>
 8006eca:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8006ecc:	ea53 030a 	orrs.w	r3, r3, sl
 8006ed0:	d163      	bne.n	8006f9a <_strtod_l+0x8b2>
 8006ed2:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8006ed6:	2b00      	cmp	r3, #0
 8006ed8:	d15f      	bne.n	8006f9a <_strtod_l+0x8b2>
 8006eda:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 8006ede:	0d1b      	lsrs	r3, r3, #20
 8006ee0:	051b      	lsls	r3, r3, #20
 8006ee2:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 8006ee6:	d958      	bls.n	8006f9a <_strtod_l+0x8b2>
 8006ee8:	6963      	ldr	r3, [r4, #20]
 8006eea:	b913      	cbnz	r3, 8006ef2 <_strtod_l+0x80a>
 8006eec:	6923      	ldr	r3, [r4, #16]
 8006eee:	2b01      	cmp	r3, #1
 8006ef0:	dd53      	ble.n	8006f9a <_strtod_l+0x8b2>
 8006ef2:	4621      	mov	r1, r4
 8006ef4:	2201      	movs	r2, #1
 8006ef6:	9805      	ldr	r0, [sp, #20]
 8006ef8:	f7ff f984 	bl	8006204 <__lshift>
 8006efc:	4641      	mov	r1, r8
 8006efe:	4604      	mov	r4, r0
 8006f00:	f7ff f9ec 	bl	80062dc <__mcmp>
 8006f04:	2800      	cmp	r0, #0
 8006f06:	dd48      	ble.n	8006f9a <_strtod_l+0x8b2>
 8006f08:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 8006f0c:	9a08      	ldr	r2, [sp, #32]
 8006f0e:	0d1b      	lsrs	r3, r3, #20
 8006f10:	051b      	lsls	r3, r3, #20
 8006f12:	2a00      	cmp	r2, #0
 8006f14:	d062      	beq.n	8006fdc <_strtod_l+0x8f4>
 8006f16:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 8006f1a:	d85f      	bhi.n	8006fdc <_strtod_l+0x8f4>
 8006f1c:	f1b3 7f5c 	cmp.w	r3, #57671680	@ 0x3700000
 8006f20:	f67f ae94 	bls.w	8006c4c <_strtod_l+0x564>
 8006f24:	4650      	mov	r0, sl
 8006f26:	4659      	mov	r1, fp
 8006f28:	4ba3      	ldr	r3, [pc, #652]	@ (80071b8 <_strtod_l+0xad0>)
 8006f2a:	2200      	movs	r2, #0
 8006f2c:	f7f9 fad4 	bl	80004d8 <__aeabi_dmul>
 8006f30:	4ba2      	ldr	r3, [pc, #648]	@ (80071bc <_strtod_l+0xad4>)
 8006f32:	4682      	mov	sl, r0
 8006f34:	400b      	ands	r3, r1
 8006f36:	468b      	mov	fp, r1
 8006f38:	2b00      	cmp	r3, #0
 8006f3a:	f47f adff 	bne.w	8006b3c <_strtod_l+0x454>
 8006f3e:	2322      	movs	r3, #34	@ 0x22
 8006f40:	9a05      	ldr	r2, [sp, #20]
 8006f42:	6013      	str	r3, [r2, #0]
 8006f44:	e5fa      	b.n	8006b3c <_strtod_l+0x454>
 8006f46:	f8cd b028 	str.w	fp, [sp, #40]	@ 0x28
 8006f4a:	d165      	bne.n	8007018 <_strtod_l+0x930>
 8006f4c:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 8006f4e:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8006f52:	b35a      	cbz	r2, 8006fac <_strtod_l+0x8c4>
 8006f54:	4a9a      	ldr	r2, [pc, #616]	@ (80071c0 <_strtod_l+0xad8>)
 8006f56:	4293      	cmp	r3, r2
 8006f58:	d12b      	bne.n	8006fb2 <_strtod_l+0x8ca>
 8006f5a:	9b08      	ldr	r3, [sp, #32]
 8006f5c:	4651      	mov	r1, sl
 8006f5e:	b303      	cbz	r3, 8006fa2 <_strtod_l+0x8ba>
 8006f60:	465a      	mov	r2, fp
 8006f62:	4b96      	ldr	r3, [pc, #600]	@ (80071bc <_strtod_l+0xad4>)
 8006f64:	4013      	ands	r3, r2
 8006f66:	f1b3 6fd4 	cmp.w	r3, #111149056	@ 0x6a00000
 8006f6a:	f04f 32ff 	mov.w	r2, #4294967295
 8006f6e:	d81b      	bhi.n	8006fa8 <_strtod_l+0x8c0>
 8006f70:	0d1b      	lsrs	r3, r3, #20
 8006f72:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 8006f76:	fa02 f303 	lsl.w	r3, r2, r3
 8006f7a:	4299      	cmp	r1, r3
 8006f7c:	d119      	bne.n	8006fb2 <_strtod_l+0x8ca>
 8006f7e:	4b91      	ldr	r3, [pc, #580]	@ (80071c4 <_strtod_l+0xadc>)
 8006f80:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8006f82:	429a      	cmp	r2, r3
 8006f84:	d102      	bne.n	8006f8c <_strtod_l+0x8a4>
 8006f86:	3101      	adds	r1, #1
 8006f88:	f43f adcd 	beq.w	8006b26 <_strtod_l+0x43e>
 8006f8c:	f04f 0a00 	mov.w	sl, #0
 8006f90:	4b8a      	ldr	r3, [pc, #552]	@ (80071bc <_strtod_l+0xad4>)
 8006f92:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8006f94:	401a      	ands	r2, r3
 8006f96:	f502 1b80 	add.w	fp, r2, #1048576	@ 0x100000
 8006f9a:	9b08      	ldr	r3, [sp, #32]
 8006f9c:	2b00      	cmp	r3, #0
 8006f9e:	d1c1      	bne.n	8006f24 <_strtod_l+0x83c>
 8006fa0:	e5cc      	b.n	8006b3c <_strtod_l+0x454>
 8006fa2:	f04f 33ff 	mov.w	r3, #4294967295
 8006fa6:	e7e8      	b.n	8006f7a <_strtod_l+0x892>
 8006fa8:	4613      	mov	r3, r2
 8006faa:	e7e6      	b.n	8006f7a <_strtod_l+0x892>
 8006fac:	ea53 030a 	orrs.w	r3, r3, sl
 8006fb0:	d0aa      	beq.n	8006f08 <_strtod_l+0x820>
 8006fb2:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8006fb4:	b1db      	cbz	r3, 8006fee <_strtod_l+0x906>
 8006fb6:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8006fb8:	4213      	tst	r3, r2
 8006fba:	d0ee      	beq.n	8006f9a <_strtod_l+0x8b2>
 8006fbc:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8006fbe:	4650      	mov	r0, sl
 8006fc0:	4659      	mov	r1, fp
 8006fc2:	9a08      	ldr	r2, [sp, #32]
 8006fc4:	b1bb      	cbz	r3, 8006ff6 <_strtod_l+0x90e>
 8006fc6:	f7ff fb6d 	bl	80066a4 <sulp>
 8006fca:	4602      	mov	r2, r0
 8006fcc:	460b      	mov	r3, r1
 8006fce:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8006fd2:	f7f9 f8cb 	bl	800016c <__adddf3>
 8006fd6:	4682      	mov	sl, r0
 8006fd8:	468b      	mov	fp, r1
 8006fda:	e7de      	b.n	8006f9a <_strtod_l+0x8b2>
 8006fdc:	f5a3 1380 	sub.w	r3, r3, #1048576	@ 0x100000
 8006fe0:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 8006fe4:	f04f 3aff 	mov.w	sl, #4294967295
 8006fe8:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 8006fec:	e7d5      	b.n	8006f9a <_strtod_l+0x8b2>
 8006fee:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 8006ff0:	ea13 0f0a 	tst.w	r3, sl
 8006ff4:	e7e1      	b.n	8006fba <_strtod_l+0x8d2>
 8006ff6:	f7ff fb55 	bl	80066a4 <sulp>
 8006ffa:	4602      	mov	r2, r0
 8006ffc:	460b      	mov	r3, r1
 8006ffe:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8007002:	f7f9 f8b1 	bl	8000168 <__aeabi_dsub>
 8007006:	2200      	movs	r2, #0
 8007008:	2300      	movs	r3, #0
 800700a:	4682      	mov	sl, r0
 800700c:	468b      	mov	fp, r1
 800700e:	f7f9 fccb 	bl	80009a8 <__aeabi_dcmpeq>
 8007012:	2800      	cmp	r0, #0
 8007014:	d0c1      	beq.n	8006f9a <_strtod_l+0x8b2>
 8007016:	e619      	b.n	8006c4c <_strtod_l+0x564>
 8007018:	4641      	mov	r1, r8
 800701a:	4620      	mov	r0, r4
 800701c:	f7ff face 	bl	80065bc <__ratio>
 8007020:	2200      	movs	r2, #0
 8007022:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8007026:	4606      	mov	r6, r0
 8007028:	460f      	mov	r7, r1
 800702a:	f7f9 fcd1 	bl	80009d0 <__aeabi_dcmple>
 800702e:	2800      	cmp	r0, #0
 8007030:	d06d      	beq.n	800710e <_strtod_l+0xa26>
 8007032:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8007034:	2b00      	cmp	r3, #0
 8007036:	d178      	bne.n	800712a <_strtod_l+0xa42>
 8007038:	f1ba 0f00 	cmp.w	sl, #0
 800703c:	d156      	bne.n	80070ec <_strtod_l+0xa04>
 800703e:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8007040:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8007044:	2b00      	cmp	r3, #0
 8007046:	d158      	bne.n	80070fa <_strtod_l+0xa12>
 8007048:	2200      	movs	r2, #0
 800704a:	4630      	mov	r0, r6
 800704c:	4639      	mov	r1, r7
 800704e:	4b5e      	ldr	r3, [pc, #376]	@ (80071c8 <_strtod_l+0xae0>)
 8007050:	f7f9 fcb4 	bl	80009bc <__aeabi_dcmplt>
 8007054:	2800      	cmp	r0, #0
 8007056:	d157      	bne.n	8007108 <_strtod_l+0xa20>
 8007058:	4630      	mov	r0, r6
 800705a:	4639      	mov	r1, r7
 800705c:	2200      	movs	r2, #0
 800705e:	4b5b      	ldr	r3, [pc, #364]	@ (80071cc <_strtod_l+0xae4>)
 8007060:	f7f9 fa3a 	bl	80004d8 <__aeabi_dmul>
 8007064:	4606      	mov	r6, r0
 8007066:	460f      	mov	r7, r1
 8007068:	f107 4300 	add.w	r3, r7, #2147483648	@ 0x80000000
 800706c:	9606      	str	r6, [sp, #24]
 800706e:	9307      	str	r3, [sp, #28]
 8007070:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8007074:	4d51      	ldr	r5, [pc, #324]	@ (80071bc <_strtod_l+0xad4>)
 8007076:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 800707a:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800707c:	401d      	ands	r5, r3
 800707e:	4b54      	ldr	r3, [pc, #336]	@ (80071d0 <_strtod_l+0xae8>)
 8007080:	429d      	cmp	r5, r3
 8007082:	f040 80ab 	bne.w	80071dc <_strtod_l+0xaf4>
 8007086:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8007088:	4650      	mov	r0, sl
 800708a:	f1a3 7b54 	sub.w	fp, r3, #55574528	@ 0x3500000
 800708e:	4659      	mov	r1, fp
 8007090:	f7ff f9d4 	bl	800643c <__ulp>
 8007094:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8007098:	f7f9 fa1e 	bl	80004d8 <__aeabi_dmul>
 800709c:	4652      	mov	r2, sl
 800709e:	465b      	mov	r3, fp
 80070a0:	f7f9 f864 	bl	800016c <__adddf3>
 80070a4:	460b      	mov	r3, r1
 80070a6:	4945      	ldr	r1, [pc, #276]	@ (80071bc <_strtod_l+0xad4>)
 80070a8:	4a4a      	ldr	r2, [pc, #296]	@ (80071d4 <_strtod_l+0xaec>)
 80070aa:	4019      	ands	r1, r3
 80070ac:	4291      	cmp	r1, r2
 80070ae:	4682      	mov	sl, r0
 80070b0:	d942      	bls.n	8007138 <_strtod_l+0xa50>
 80070b2:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 80070b4:	4b43      	ldr	r3, [pc, #268]	@ (80071c4 <_strtod_l+0xadc>)
 80070b6:	429a      	cmp	r2, r3
 80070b8:	d103      	bne.n	80070c2 <_strtod_l+0x9da>
 80070ba:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 80070bc:	3301      	adds	r3, #1
 80070be:	f43f ad32 	beq.w	8006b26 <_strtod_l+0x43e>
 80070c2:	f04f 3aff 	mov.w	sl, #4294967295
 80070c6:	f8df b0fc 	ldr.w	fp, [pc, #252]	@ 80071c4 <_strtod_l+0xadc>
 80070ca:	991a      	ldr	r1, [sp, #104]	@ 0x68
 80070cc:	9805      	ldr	r0, [sp, #20]
 80070ce:	f7fe fe89 	bl	8005de4 <_Bfree>
 80070d2:	4649      	mov	r1, r9
 80070d4:	9805      	ldr	r0, [sp, #20]
 80070d6:	f7fe fe85 	bl	8005de4 <_Bfree>
 80070da:	4641      	mov	r1, r8
 80070dc:	9805      	ldr	r0, [sp, #20]
 80070de:	f7fe fe81 	bl	8005de4 <_Bfree>
 80070e2:	4621      	mov	r1, r4
 80070e4:	9805      	ldr	r0, [sp, #20]
 80070e6:	f7fe fe7d 	bl	8005de4 <_Bfree>
 80070ea:	e61c      	b.n	8006d26 <_strtod_l+0x63e>
 80070ec:	f1ba 0f01 	cmp.w	sl, #1
 80070f0:	d103      	bne.n	80070fa <_strtod_l+0xa12>
 80070f2:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80070f4:	2b00      	cmp	r3, #0
 80070f6:	f43f ada9 	beq.w	8006c4c <_strtod_l+0x564>
 80070fa:	2200      	movs	r2, #0
 80070fc:	4b36      	ldr	r3, [pc, #216]	@ (80071d8 <_strtod_l+0xaf0>)
 80070fe:	2600      	movs	r6, #0
 8007100:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8007104:	4f30      	ldr	r7, [pc, #192]	@ (80071c8 <_strtod_l+0xae0>)
 8007106:	e7b3      	b.n	8007070 <_strtod_l+0x988>
 8007108:	2600      	movs	r6, #0
 800710a:	4f30      	ldr	r7, [pc, #192]	@ (80071cc <_strtod_l+0xae4>)
 800710c:	e7ac      	b.n	8007068 <_strtod_l+0x980>
 800710e:	4630      	mov	r0, r6
 8007110:	4639      	mov	r1, r7
 8007112:	4b2e      	ldr	r3, [pc, #184]	@ (80071cc <_strtod_l+0xae4>)
 8007114:	2200      	movs	r2, #0
 8007116:	f7f9 f9df 	bl	80004d8 <__aeabi_dmul>
 800711a:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800711c:	4606      	mov	r6, r0
 800711e:	460f      	mov	r7, r1
 8007120:	2b00      	cmp	r3, #0
 8007122:	d0a1      	beq.n	8007068 <_strtod_l+0x980>
 8007124:	e9cd 6706 	strd	r6, r7, [sp, #24]
 8007128:	e7a2      	b.n	8007070 <_strtod_l+0x988>
 800712a:	2200      	movs	r2, #0
 800712c:	4b26      	ldr	r3, [pc, #152]	@ (80071c8 <_strtod_l+0xae0>)
 800712e:	4616      	mov	r6, r2
 8007130:	461f      	mov	r7, r3
 8007132:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8007136:	e79b      	b.n	8007070 <_strtod_l+0x988>
 8007138:	f103 7b54 	add.w	fp, r3, #55574528	@ 0x3500000
 800713c:	9b08      	ldr	r3, [sp, #32]
 800713e:	f8cd b028 	str.w	fp, [sp, #40]	@ 0x28
 8007142:	2b00      	cmp	r3, #0
 8007144:	d1c1      	bne.n	80070ca <_strtod_l+0x9e2>
 8007146:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800714a:	0d1b      	lsrs	r3, r3, #20
 800714c:	051b      	lsls	r3, r3, #20
 800714e:	429d      	cmp	r5, r3
 8007150:	d1bb      	bne.n	80070ca <_strtod_l+0x9e2>
 8007152:	4630      	mov	r0, r6
 8007154:	4639      	mov	r1, r7
 8007156:	f7f9 ffdb 	bl	8001110 <__aeabi_d2lz>
 800715a:	f7f9 f98f 	bl	800047c <__aeabi_l2d>
 800715e:	4602      	mov	r2, r0
 8007160:	460b      	mov	r3, r1
 8007162:	4630      	mov	r0, r6
 8007164:	4639      	mov	r1, r7
 8007166:	f7f8 ffff 	bl	8000168 <__aeabi_dsub>
 800716a:	460b      	mov	r3, r1
 800716c:	4602      	mov	r2, r0
 800716e:	f3cb 0613 	ubfx	r6, fp, #0, #20
 8007172:	e9cd 230c 	strd	r2, r3, [sp, #48]	@ 0x30
 8007176:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8007178:	ea46 060a 	orr.w	r6, r6, sl
 800717c:	431e      	orrs	r6, r3
 800717e:	d06a      	beq.n	8007256 <_strtod_l+0xb6e>
 8007180:	a309      	add	r3, pc, #36	@ (adr r3, 80071a8 <_strtod_l+0xac0>)
 8007182:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007186:	f7f9 fc19 	bl	80009bc <__aeabi_dcmplt>
 800718a:	2800      	cmp	r0, #0
 800718c:	f47f acd6 	bne.w	8006b3c <_strtod_l+0x454>
 8007190:	a307      	add	r3, pc, #28	@ (adr r3, 80071b0 <_strtod_l+0xac8>)
 8007192:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007196:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800719a:	f7f9 fc2d 	bl	80009f8 <__aeabi_dcmpgt>
 800719e:	2800      	cmp	r0, #0
 80071a0:	d093      	beq.n	80070ca <_strtod_l+0x9e2>
 80071a2:	e4cb      	b.n	8006b3c <_strtod_l+0x454>
 80071a4:	f3af 8000 	nop.w
 80071a8:	94a03595 	.word	0x94a03595
 80071ac:	3fdfffff 	.word	0x3fdfffff
 80071b0:	35afe535 	.word	0x35afe535
 80071b4:	3fe00000 	.word	0x3fe00000
 80071b8:	39500000 	.word	0x39500000
 80071bc:	7ff00000 	.word	0x7ff00000
 80071c0:	000fffff 	.word	0x000fffff
 80071c4:	7fefffff 	.word	0x7fefffff
 80071c8:	3ff00000 	.word	0x3ff00000
 80071cc:	3fe00000 	.word	0x3fe00000
 80071d0:	7fe00000 	.word	0x7fe00000
 80071d4:	7c9fffff 	.word	0x7c9fffff
 80071d8:	bff00000 	.word	0xbff00000
 80071dc:	9b08      	ldr	r3, [sp, #32]
 80071de:	b323      	cbz	r3, 800722a <_strtod_l+0xb42>
 80071e0:	f1b5 6fd4 	cmp.w	r5, #111149056	@ 0x6a00000
 80071e4:	d821      	bhi.n	800722a <_strtod_l+0xb42>
 80071e6:	a328      	add	r3, pc, #160	@ (adr r3, 8007288 <_strtod_l+0xba0>)
 80071e8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80071ec:	4630      	mov	r0, r6
 80071ee:	4639      	mov	r1, r7
 80071f0:	f7f9 fbee 	bl	80009d0 <__aeabi_dcmple>
 80071f4:	b1a0      	cbz	r0, 8007220 <_strtod_l+0xb38>
 80071f6:	4639      	mov	r1, r7
 80071f8:	4630      	mov	r0, r6
 80071fa:	f7f9 fc45 	bl	8000a88 <__aeabi_d2uiz>
 80071fe:	2801      	cmp	r0, #1
 8007200:	bf38      	it	cc
 8007202:	2001      	movcc	r0, #1
 8007204:	f7f9 f8ee 	bl	80003e4 <__aeabi_ui2d>
 8007208:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800720a:	4606      	mov	r6, r0
 800720c:	460f      	mov	r7, r1
 800720e:	b9fb      	cbnz	r3, 8007250 <_strtod_l+0xb68>
 8007210:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 8007214:	9014      	str	r0, [sp, #80]	@ 0x50
 8007216:	9315      	str	r3, [sp, #84]	@ 0x54
 8007218:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	@ 0x50
 800721c:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 8007220:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 8007222:	f103 63d6 	add.w	r3, r3, #112197632	@ 0x6b00000
 8007226:	1b5b      	subs	r3, r3, r5
 8007228:	9311      	str	r3, [sp, #68]	@ 0x44
 800722a:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800722e:	e9dd ab10 	ldrd	sl, fp, [sp, #64]	@ 0x40
 8007232:	f7ff f903 	bl	800643c <__ulp>
 8007236:	4602      	mov	r2, r0
 8007238:	460b      	mov	r3, r1
 800723a:	4650      	mov	r0, sl
 800723c:	4659      	mov	r1, fp
 800723e:	f7f9 f94b 	bl	80004d8 <__aeabi_dmul>
 8007242:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	@ 0x30
 8007246:	f7f8 ff91 	bl	800016c <__adddf3>
 800724a:	4682      	mov	sl, r0
 800724c:	468b      	mov	fp, r1
 800724e:	e775      	b.n	800713c <_strtod_l+0xa54>
 8007250:	e9cd 6714 	strd	r6, r7, [sp, #80]	@ 0x50
 8007254:	e7e0      	b.n	8007218 <_strtod_l+0xb30>
 8007256:	a30e      	add	r3, pc, #56	@ (adr r3, 8007290 <_strtod_l+0xba8>)
 8007258:	e9d3 2300 	ldrd	r2, r3, [r3]
 800725c:	f7f9 fbae 	bl	80009bc <__aeabi_dcmplt>
 8007260:	e79d      	b.n	800719e <_strtod_l+0xab6>
 8007262:	2300      	movs	r3, #0
 8007264:	930e      	str	r3, [sp, #56]	@ 0x38
 8007266:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8007268:	9a17      	ldr	r2, [sp, #92]	@ 0x5c
 800726a:	6013      	str	r3, [r2, #0]
 800726c:	f7ff ba79 	b.w	8006762 <_strtod_l+0x7a>
 8007270:	2a65      	cmp	r2, #101	@ 0x65
 8007272:	f43f ab72 	beq.w	800695a <_strtod_l+0x272>
 8007276:	2a45      	cmp	r2, #69	@ 0x45
 8007278:	f43f ab6f 	beq.w	800695a <_strtod_l+0x272>
 800727c:	2301      	movs	r3, #1
 800727e:	f7ff bbaa 	b.w	80069d6 <_strtod_l+0x2ee>
 8007282:	bf00      	nop
 8007284:	f3af 8000 	nop.w
 8007288:	ffc00000 	.word	0xffc00000
 800728c:	41dfffff 	.word	0x41dfffff
 8007290:	94a03595 	.word	0x94a03595
 8007294:	3fcfffff 	.word	0x3fcfffff

08007298 <_strtod_r>:
 8007298:	4b01      	ldr	r3, [pc, #4]	@ (80072a0 <_strtod_r+0x8>)
 800729a:	f7ff ba25 	b.w	80066e8 <_strtod_l>
 800729e:	bf00      	nop
 80072a0:	20000068 	.word	0x20000068

080072a4 <_strtol_l.isra.0>:
 80072a4:	2b24      	cmp	r3, #36	@ 0x24
 80072a6:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80072aa:	4686      	mov	lr, r0
 80072ac:	4690      	mov	r8, r2
 80072ae:	d801      	bhi.n	80072b4 <_strtol_l.isra.0+0x10>
 80072b0:	2b01      	cmp	r3, #1
 80072b2:	d106      	bne.n	80072c2 <_strtol_l.isra.0+0x1e>
 80072b4:	f7fd fdac 	bl	8004e10 <__errno>
 80072b8:	2316      	movs	r3, #22
 80072ba:	6003      	str	r3, [r0, #0]
 80072bc:	2000      	movs	r0, #0
 80072be:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80072c2:	460d      	mov	r5, r1
 80072c4:	4833      	ldr	r0, [pc, #204]	@ (8007394 <_strtol_l.isra.0+0xf0>)
 80072c6:	462a      	mov	r2, r5
 80072c8:	f815 4b01 	ldrb.w	r4, [r5], #1
 80072cc:	5d06      	ldrb	r6, [r0, r4]
 80072ce:	f016 0608 	ands.w	r6, r6, #8
 80072d2:	d1f8      	bne.n	80072c6 <_strtol_l.isra.0+0x22>
 80072d4:	2c2d      	cmp	r4, #45	@ 0x2d
 80072d6:	d110      	bne.n	80072fa <_strtol_l.isra.0+0x56>
 80072d8:	2601      	movs	r6, #1
 80072da:	782c      	ldrb	r4, [r5, #0]
 80072dc:	1c95      	adds	r5, r2, #2
 80072de:	f033 0210 	bics.w	r2, r3, #16
 80072e2:	d115      	bne.n	8007310 <_strtol_l.isra.0+0x6c>
 80072e4:	2c30      	cmp	r4, #48	@ 0x30
 80072e6:	d10d      	bne.n	8007304 <_strtol_l.isra.0+0x60>
 80072e8:	782a      	ldrb	r2, [r5, #0]
 80072ea:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 80072ee:	2a58      	cmp	r2, #88	@ 0x58
 80072f0:	d108      	bne.n	8007304 <_strtol_l.isra.0+0x60>
 80072f2:	786c      	ldrb	r4, [r5, #1]
 80072f4:	3502      	adds	r5, #2
 80072f6:	2310      	movs	r3, #16
 80072f8:	e00a      	b.n	8007310 <_strtol_l.isra.0+0x6c>
 80072fa:	2c2b      	cmp	r4, #43	@ 0x2b
 80072fc:	bf04      	itt	eq
 80072fe:	782c      	ldrbeq	r4, [r5, #0]
 8007300:	1c95      	addeq	r5, r2, #2
 8007302:	e7ec      	b.n	80072de <_strtol_l.isra.0+0x3a>
 8007304:	2b00      	cmp	r3, #0
 8007306:	d1f6      	bne.n	80072f6 <_strtol_l.isra.0+0x52>
 8007308:	2c30      	cmp	r4, #48	@ 0x30
 800730a:	bf14      	ite	ne
 800730c:	230a      	movne	r3, #10
 800730e:	2308      	moveq	r3, #8
 8007310:	2200      	movs	r2, #0
 8007312:	f106 4c00 	add.w	ip, r6, #2147483648	@ 0x80000000
 8007316:	f10c 3cff 	add.w	ip, ip, #4294967295
 800731a:	fbbc f9f3 	udiv	r9, ip, r3
 800731e:	4610      	mov	r0, r2
 8007320:	fb03 ca19 	mls	sl, r3, r9, ip
 8007324:	f1a4 0730 	sub.w	r7, r4, #48	@ 0x30
 8007328:	2f09      	cmp	r7, #9
 800732a:	d80f      	bhi.n	800734c <_strtol_l.isra.0+0xa8>
 800732c:	463c      	mov	r4, r7
 800732e:	42a3      	cmp	r3, r4
 8007330:	dd1b      	ble.n	800736a <_strtol_l.isra.0+0xc6>
 8007332:	1c57      	adds	r7, r2, #1
 8007334:	d007      	beq.n	8007346 <_strtol_l.isra.0+0xa2>
 8007336:	4581      	cmp	r9, r0
 8007338:	d314      	bcc.n	8007364 <_strtol_l.isra.0+0xc0>
 800733a:	d101      	bne.n	8007340 <_strtol_l.isra.0+0x9c>
 800733c:	45a2      	cmp	sl, r4
 800733e:	db11      	blt.n	8007364 <_strtol_l.isra.0+0xc0>
 8007340:	2201      	movs	r2, #1
 8007342:	fb00 4003 	mla	r0, r0, r3, r4
 8007346:	f815 4b01 	ldrb.w	r4, [r5], #1
 800734a:	e7eb      	b.n	8007324 <_strtol_l.isra.0+0x80>
 800734c:	f1a4 0741 	sub.w	r7, r4, #65	@ 0x41
 8007350:	2f19      	cmp	r7, #25
 8007352:	d801      	bhi.n	8007358 <_strtol_l.isra.0+0xb4>
 8007354:	3c37      	subs	r4, #55	@ 0x37
 8007356:	e7ea      	b.n	800732e <_strtol_l.isra.0+0x8a>
 8007358:	f1a4 0761 	sub.w	r7, r4, #97	@ 0x61
 800735c:	2f19      	cmp	r7, #25
 800735e:	d804      	bhi.n	800736a <_strtol_l.isra.0+0xc6>
 8007360:	3c57      	subs	r4, #87	@ 0x57
 8007362:	e7e4      	b.n	800732e <_strtol_l.isra.0+0x8a>
 8007364:	f04f 32ff 	mov.w	r2, #4294967295
 8007368:	e7ed      	b.n	8007346 <_strtol_l.isra.0+0xa2>
 800736a:	1c53      	adds	r3, r2, #1
 800736c:	d108      	bne.n	8007380 <_strtol_l.isra.0+0xdc>
 800736e:	2322      	movs	r3, #34	@ 0x22
 8007370:	4660      	mov	r0, ip
 8007372:	f8ce 3000 	str.w	r3, [lr]
 8007376:	f1b8 0f00 	cmp.w	r8, #0
 800737a:	d0a0      	beq.n	80072be <_strtol_l.isra.0+0x1a>
 800737c:	1e69      	subs	r1, r5, #1
 800737e:	e006      	b.n	800738e <_strtol_l.isra.0+0xea>
 8007380:	b106      	cbz	r6, 8007384 <_strtol_l.isra.0+0xe0>
 8007382:	4240      	negs	r0, r0
 8007384:	f1b8 0f00 	cmp.w	r8, #0
 8007388:	d099      	beq.n	80072be <_strtol_l.isra.0+0x1a>
 800738a:	2a00      	cmp	r2, #0
 800738c:	d1f6      	bne.n	800737c <_strtol_l.isra.0+0xd8>
 800738e:	f8c8 1000 	str.w	r1, [r8]
 8007392:	e794      	b.n	80072be <_strtol_l.isra.0+0x1a>
 8007394:	08008ab1 	.word	0x08008ab1

08007398 <_strtol_r>:
 8007398:	f7ff bf84 	b.w	80072a4 <_strtol_l.isra.0>

0800739c <__ssputs_r>:
 800739c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80073a0:	461f      	mov	r7, r3
 80073a2:	688e      	ldr	r6, [r1, #8]
 80073a4:	4682      	mov	sl, r0
 80073a6:	42be      	cmp	r6, r7
 80073a8:	460c      	mov	r4, r1
 80073aa:	4690      	mov	r8, r2
 80073ac:	680b      	ldr	r3, [r1, #0]
 80073ae:	d82d      	bhi.n	800740c <__ssputs_r+0x70>
 80073b0:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 80073b4:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 80073b8:	d026      	beq.n	8007408 <__ssputs_r+0x6c>
 80073ba:	6965      	ldr	r5, [r4, #20]
 80073bc:	6909      	ldr	r1, [r1, #16]
 80073be:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80073c2:	eba3 0901 	sub.w	r9, r3, r1
 80073c6:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80073ca:	1c7b      	adds	r3, r7, #1
 80073cc:	444b      	add	r3, r9
 80073ce:	106d      	asrs	r5, r5, #1
 80073d0:	429d      	cmp	r5, r3
 80073d2:	bf38      	it	cc
 80073d4:	461d      	movcc	r5, r3
 80073d6:	0553      	lsls	r3, r2, #21
 80073d8:	d527      	bpl.n	800742a <__ssputs_r+0x8e>
 80073da:	4629      	mov	r1, r5
 80073dc:	f7fe fc36 	bl	8005c4c <_malloc_r>
 80073e0:	4606      	mov	r6, r0
 80073e2:	b360      	cbz	r0, 800743e <__ssputs_r+0xa2>
 80073e4:	464a      	mov	r2, r9
 80073e6:	6921      	ldr	r1, [r4, #16]
 80073e8:	f7fd fd4d 	bl	8004e86 <memcpy>
 80073ec:	89a3      	ldrh	r3, [r4, #12]
 80073ee:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 80073f2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80073f6:	81a3      	strh	r3, [r4, #12]
 80073f8:	6126      	str	r6, [r4, #16]
 80073fa:	444e      	add	r6, r9
 80073fc:	6026      	str	r6, [r4, #0]
 80073fe:	463e      	mov	r6, r7
 8007400:	6165      	str	r5, [r4, #20]
 8007402:	eba5 0509 	sub.w	r5, r5, r9
 8007406:	60a5      	str	r5, [r4, #8]
 8007408:	42be      	cmp	r6, r7
 800740a:	d900      	bls.n	800740e <__ssputs_r+0x72>
 800740c:	463e      	mov	r6, r7
 800740e:	4632      	mov	r2, r6
 8007410:	4641      	mov	r1, r8
 8007412:	6820      	ldr	r0, [r4, #0]
 8007414:	f000 f9c2 	bl	800779c <memmove>
 8007418:	2000      	movs	r0, #0
 800741a:	68a3      	ldr	r3, [r4, #8]
 800741c:	1b9b      	subs	r3, r3, r6
 800741e:	60a3      	str	r3, [r4, #8]
 8007420:	6823      	ldr	r3, [r4, #0]
 8007422:	4433      	add	r3, r6
 8007424:	6023      	str	r3, [r4, #0]
 8007426:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800742a:	462a      	mov	r2, r5
 800742c:	f000 fd75 	bl	8007f1a <_realloc_r>
 8007430:	4606      	mov	r6, r0
 8007432:	2800      	cmp	r0, #0
 8007434:	d1e0      	bne.n	80073f8 <__ssputs_r+0x5c>
 8007436:	4650      	mov	r0, sl
 8007438:	6921      	ldr	r1, [r4, #16]
 800743a:	f7fe fb95 	bl	8005b68 <_free_r>
 800743e:	230c      	movs	r3, #12
 8007440:	f8ca 3000 	str.w	r3, [sl]
 8007444:	89a3      	ldrh	r3, [r4, #12]
 8007446:	f04f 30ff 	mov.w	r0, #4294967295
 800744a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800744e:	81a3      	strh	r3, [r4, #12]
 8007450:	e7e9      	b.n	8007426 <__ssputs_r+0x8a>
	...

08007454 <_svfiprintf_r>:
 8007454:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007458:	4698      	mov	r8, r3
 800745a:	898b      	ldrh	r3, [r1, #12]
 800745c:	4607      	mov	r7, r0
 800745e:	061b      	lsls	r3, r3, #24
 8007460:	460d      	mov	r5, r1
 8007462:	4614      	mov	r4, r2
 8007464:	b09d      	sub	sp, #116	@ 0x74
 8007466:	d510      	bpl.n	800748a <_svfiprintf_r+0x36>
 8007468:	690b      	ldr	r3, [r1, #16]
 800746a:	b973      	cbnz	r3, 800748a <_svfiprintf_r+0x36>
 800746c:	2140      	movs	r1, #64	@ 0x40
 800746e:	f7fe fbed 	bl	8005c4c <_malloc_r>
 8007472:	6028      	str	r0, [r5, #0]
 8007474:	6128      	str	r0, [r5, #16]
 8007476:	b930      	cbnz	r0, 8007486 <_svfiprintf_r+0x32>
 8007478:	230c      	movs	r3, #12
 800747a:	603b      	str	r3, [r7, #0]
 800747c:	f04f 30ff 	mov.w	r0, #4294967295
 8007480:	b01d      	add	sp, #116	@ 0x74
 8007482:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007486:	2340      	movs	r3, #64	@ 0x40
 8007488:	616b      	str	r3, [r5, #20]
 800748a:	2300      	movs	r3, #0
 800748c:	9309      	str	r3, [sp, #36]	@ 0x24
 800748e:	2320      	movs	r3, #32
 8007490:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8007494:	2330      	movs	r3, #48	@ 0x30
 8007496:	f04f 0901 	mov.w	r9, #1
 800749a:	f8cd 800c 	str.w	r8, [sp, #12]
 800749e:	f8df 8198 	ldr.w	r8, [pc, #408]	@ 8007638 <_svfiprintf_r+0x1e4>
 80074a2:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 80074a6:	4623      	mov	r3, r4
 80074a8:	469a      	mov	sl, r3
 80074aa:	f813 2b01 	ldrb.w	r2, [r3], #1
 80074ae:	b10a      	cbz	r2, 80074b4 <_svfiprintf_r+0x60>
 80074b0:	2a25      	cmp	r2, #37	@ 0x25
 80074b2:	d1f9      	bne.n	80074a8 <_svfiprintf_r+0x54>
 80074b4:	ebba 0b04 	subs.w	fp, sl, r4
 80074b8:	d00b      	beq.n	80074d2 <_svfiprintf_r+0x7e>
 80074ba:	465b      	mov	r3, fp
 80074bc:	4622      	mov	r2, r4
 80074be:	4629      	mov	r1, r5
 80074c0:	4638      	mov	r0, r7
 80074c2:	f7ff ff6b 	bl	800739c <__ssputs_r>
 80074c6:	3001      	adds	r0, #1
 80074c8:	f000 80a7 	beq.w	800761a <_svfiprintf_r+0x1c6>
 80074cc:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80074ce:	445a      	add	r2, fp
 80074d0:	9209      	str	r2, [sp, #36]	@ 0x24
 80074d2:	f89a 3000 	ldrb.w	r3, [sl]
 80074d6:	2b00      	cmp	r3, #0
 80074d8:	f000 809f 	beq.w	800761a <_svfiprintf_r+0x1c6>
 80074dc:	2300      	movs	r3, #0
 80074de:	f04f 32ff 	mov.w	r2, #4294967295
 80074e2:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80074e6:	f10a 0a01 	add.w	sl, sl, #1
 80074ea:	9304      	str	r3, [sp, #16]
 80074ec:	9307      	str	r3, [sp, #28]
 80074ee:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 80074f2:	931a      	str	r3, [sp, #104]	@ 0x68
 80074f4:	4654      	mov	r4, sl
 80074f6:	2205      	movs	r2, #5
 80074f8:	f814 1b01 	ldrb.w	r1, [r4], #1
 80074fc:	484e      	ldr	r0, [pc, #312]	@ (8007638 <_svfiprintf_r+0x1e4>)
 80074fe:	f7fd fcb4 	bl	8004e6a <memchr>
 8007502:	9a04      	ldr	r2, [sp, #16]
 8007504:	b9d8      	cbnz	r0, 800753e <_svfiprintf_r+0xea>
 8007506:	06d0      	lsls	r0, r2, #27
 8007508:	bf44      	itt	mi
 800750a:	2320      	movmi	r3, #32
 800750c:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8007510:	0711      	lsls	r1, r2, #28
 8007512:	bf44      	itt	mi
 8007514:	232b      	movmi	r3, #43	@ 0x2b
 8007516:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800751a:	f89a 3000 	ldrb.w	r3, [sl]
 800751e:	2b2a      	cmp	r3, #42	@ 0x2a
 8007520:	d015      	beq.n	800754e <_svfiprintf_r+0xfa>
 8007522:	4654      	mov	r4, sl
 8007524:	2000      	movs	r0, #0
 8007526:	f04f 0c0a 	mov.w	ip, #10
 800752a:	9a07      	ldr	r2, [sp, #28]
 800752c:	4621      	mov	r1, r4
 800752e:	f811 3b01 	ldrb.w	r3, [r1], #1
 8007532:	3b30      	subs	r3, #48	@ 0x30
 8007534:	2b09      	cmp	r3, #9
 8007536:	d94b      	bls.n	80075d0 <_svfiprintf_r+0x17c>
 8007538:	b1b0      	cbz	r0, 8007568 <_svfiprintf_r+0x114>
 800753a:	9207      	str	r2, [sp, #28]
 800753c:	e014      	b.n	8007568 <_svfiprintf_r+0x114>
 800753e:	eba0 0308 	sub.w	r3, r0, r8
 8007542:	fa09 f303 	lsl.w	r3, r9, r3
 8007546:	4313      	orrs	r3, r2
 8007548:	46a2      	mov	sl, r4
 800754a:	9304      	str	r3, [sp, #16]
 800754c:	e7d2      	b.n	80074f4 <_svfiprintf_r+0xa0>
 800754e:	9b03      	ldr	r3, [sp, #12]
 8007550:	1d19      	adds	r1, r3, #4
 8007552:	681b      	ldr	r3, [r3, #0]
 8007554:	9103      	str	r1, [sp, #12]
 8007556:	2b00      	cmp	r3, #0
 8007558:	bfbb      	ittet	lt
 800755a:	425b      	neglt	r3, r3
 800755c:	f042 0202 	orrlt.w	r2, r2, #2
 8007560:	9307      	strge	r3, [sp, #28]
 8007562:	9307      	strlt	r3, [sp, #28]
 8007564:	bfb8      	it	lt
 8007566:	9204      	strlt	r2, [sp, #16]
 8007568:	7823      	ldrb	r3, [r4, #0]
 800756a:	2b2e      	cmp	r3, #46	@ 0x2e
 800756c:	d10a      	bne.n	8007584 <_svfiprintf_r+0x130>
 800756e:	7863      	ldrb	r3, [r4, #1]
 8007570:	2b2a      	cmp	r3, #42	@ 0x2a
 8007572:	d132      	bne.n	80075da <_svfiprintf_r+0x186>
 8007574:	9b03      	ldr	r3, [sp, #12]
 8007576:	3402      	adds	r4, #2
 8007578:	1d1a      	adds	r2, r3, #4
 800757a:	681b      	ldr	r3, [r3, #0]
 800757c:	9203      	str	r2, [sp, #12]
 800757e:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8007582:	9305      	str	r3, [sp, #20]
 8007584:	f8df a0b4 	ldr.w	sl, [pc, #180]	@ 800763c <_svfiprintf_r+0x1e8>
 8007588:	2203      	movs	r2, #3
 800758a:	4650      	mov	r0, sl
 800758c:	7821      	ldrb	r1, [r4, #0]
 800758e:	f7fd fc6c 	bl	8004e6a <memchr>
 8007592:	b138      	cbz	r0, 80075a4 <_svfiprintf_r+0x150>
 8007594:	2240      	movs	r2, #64	@ 0x40
 8007596:	9b04      	ldr	r3, [sp, #16]
 8007598:	eba0 000a 	sub.w	r0, r0, sl
 800759c:	4082      	lsls	r2, r0
 800759e:	4313      	orrs	r3, r2
 80075a0:	3401      	adds	r4, #1
 80075a2:	9304      	str	r3, [sp, #16]
 80075a4:	f814 1b01 	ldrb.w	r1, [r4], #1
 80075a8:	2206      	movs	r2, #6
 80075aa:	4825      	ldr	r0, [pc, #148]	@ (8007640 <_svfiprintf_r+0x1ec>)
 80075ac:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 80075b0:	f7fd fc5b 	bl	8004e6a <memchr>
 80075b4:	2800      	cmp	r0, #0
 80075b6:	d036      	beq.n	8007626 <_svfiprintf_r+0x1d2>
 80075b8:	4b22      	ldr	r3, [pc, #136]	@ (8007644 <_svfiprintf_r+0x1f0>)
 80075ba:	bb1b      	cbnz	r3, 8007604 <_svfiprintf_r+0x1b0>
 80075bc:	9b03      	ldr	r3, [sp, #12]
 80075be:	3307      	adds	r3, #7
 80075c0:	f023 0307 	bic.w	r3, r3, #7
 80075c4:	3308      	adds	r3, #8
 80075c6:	9303      	str	r3, [sp, #12]
 80075c8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80075ca:	4433      	add	r3, r6
 80075cc:	9309      	str	r3, [sp, #36]	@ 0x24
 80075ce:	e76a      	b.n	80074a6 <_svfiprintf_r+0x52>
 80075d0:	460c      	mov	r4, r1
 80075d2:	2001      	movs	r0, #1
 80075d4:	fb0c 3202 	mla	r2, ip, r2, r3
 80075d8:	e7a8      	b.n	800752c <_svfiprintf_r+0xd8>
 80075da:	2300      	movs	r3, #0
 80075dc:	f04f 0c0a 	mov.w	ip, #10
 80075e0:	4619      	mov	r1, r3
 80075e2:	3401      	adds	r4, #1
 80075e4:	9305      	str	r3, [sp, #20]
 80075e6:	4620      	mov	r0, r4
 80075e8:	f810 2b01 	ldrb.w	r2, [r0], #1
 80075ec:	3a30      	subs	r2, #48	@ 0x30
 80075ee:	2a09      	cmp	r2, #9
 80075f0:	d903      	bls.n	80075fa <_svfiprintf_r+0x1a6>
 80075f2:	2b00      	cmp	r3, #0
 80075f4:	d0c6      	beq.n	8007584 <_svfiprintf_r+0x130>
 80075f6:	9105      	str	r1, [sp, #20]
 80075f8:	e7c4      	b.n	8007584 <_svfiprintf_r+0x130>
 80075fa:	4604      	mov	r4, r0
 80075fc:	2301      	movs	r3, #1
 80075fe:	fb0c 2101 	mla	r1, ip, r1, r2
 8007602:	e7f0      	b.n	80075e6 <_svfiprintf_r+0x192>
 8007604:	ab03      	add	r3, sp, #12
 8007606:	9300      	str	r3, [sp, #0]
 8007608:	462a      	mov	r2, r5
 800760a:	4638      	mov	r0, r7
 800760c:	4b0e      	ldr	r3, [pc, #56]	@ (8007648 <_svfiprintf_r+0x1f4>)
 800760e:	a904      	add	r1, sp, #16
 8007610:	f7fc fcbe 	bl	8003f90 <_printf_float>
 8007614:	1c42      	adds	r2, r0, #1
 8007616:	4606      	mov	r6, r0
 8007618:	d1d6      	bne.n	80075c8 <_svfiprintf_r+0x174>
 800761a:	89ab      	ldrh	r3, [r5, #12]
 800761c:	065b      	lsls	r3, r3, #25
 800761e:	f53f af2d 	bmi.w	800747c <_svfiprintf_r+0x28>
 8007622:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8007624:	e72c      	b.n	8007480 <_svfiprintf_r+0x2c>
 8007626:	ab03      	add	r3, sp, #12
 8007628:	9300      	str	r3, [sp, #0]
 800762a:	462a      	mov	r2, r5
 800762c:	4638      	mov	r0, r7
 800762e:	4b06      	ldr	r3, [pc, #24]	@ (8007648 <_svfiprintf_r+0x1f4>)
 8007630:	a904      	add	r1, sp, #16
 8007632:	f7fc ff4b 	bl	80044cc <_printf_i>
 8007636:	e7ed      	b.n	8007614 <_svfiprintf_r+0x1c0>
 8007638:	080088ab 	.word	0x080088ab
 800763c:	080088b1 	.word	0x080088b1
 8007640:	080088b5 	.word	0x080088b5
 8007644:	08003f91 	.word	0x08003f91
 8007648:	0800739d 	.word	0x0800739d

0800764c <__sflush_r>:
 800764c:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8007650:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007652:	0716      	lsls	r6, r2, #28
 8007654:	4605      	mov	r5, r0
 8007656:	460c      	mov	r4, r1
 8007658:	d454      	bmi.n	8007704 <__sflush_r+0xb8>
 800765a:	684b      	ldr	r3, [r1, #4]
 800765c:	2b00      	cmp	r3, #0
 800765e:	dc02      	bgt.n	8007666 <__sflush_r+0x1a>
 8007660:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8007662:	2b00      	cmp	r3, #0
 8007664:	dd48      	ble.n	80076f8 <__sflush_r+0xac>
 8007666:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8007668:	2e00      	cmp	r6, #0
 800766a:	d045      	beq.n	80076f8 <__sflush_r+0xac>
 800766c:	2300      	movs	r3, #0
 800766e:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8007672:	682f      	ldr	r7, [r5, #0]
 8007674:	6a21      	ldr	r1, [r4, #32]
 8007676:	602b      	str	r3, [r5, #0]
 8007678:	d030      	beq.n	80076dc <__sflush_r+0x90>
 800767a:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800767c:	89a3      	ldrh	r3, [r4, #12]
 800767e:	0759      	lsls	r1, r3, #29
 8007680:	d505      	bpl.n	800768e <__sflush_r+0x42>
 8007682:	6863      	ldr	r3, [r4, #4]
 8007684:	1ad2      	subs	r2, r2, r3
 8007686:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8007688:	b10b      	cbz	r3, 800768e <__sflush_r+0x42>
 800768a:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800768c:	1ad2      	subs	r2, r2, r3
 800768e:	2300      	movs	r3, #0
 8007690:	4628      	mov	r0, r5
 8007692:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8007694:	6a21      	ldr	r1, [r4, #32]
 8007696:	47b0      	blx	r6
 8007698:	1c43      	adds	r3, r0, #1
 800769a:	89a3      	ldrh	r3, [r4, #12]
 800769c:	d106      	bne.n	80076ac <__sflush_r+0x60>
 800769e:	6829      	ldr	r1, [r5, #0]
 80076a0:	291d      	cmp	r1, #29
 80076a2:	d82b      	bhi.n	80076fc <__sflush_r+0xb0>
 80076a4:	4a28      	ldr	r2, [pc, #160]	@ (8007748 <__sflush_r+0xfc>)
 80076a6:	40ca      	lsrs	r2, r1
 80076a8:	07d6      	lsls	r6, r2, #31
 80076aa:	d527      	bpl.n	80076fc <__sflush_r+0xb0>
 80076ac:	2200      	movs	r2, #0
 80076ae:	6062      	str	r2, [r4, #4]
 80076b0:	6922      	ldr	r2, [r4, #16]
 80076b2:	04d9      	lsls	r1, r3, #19
 80076b4:	6022      	str	r2, [r4, #0]
 80076b6:	d504      	bpl.n	80076c2 <__sflush_r+0x76>
 80076b8:	1c42      	adds	r2, r0, #1
 80076ba:	d101      	bne.n	80076c0 <__sflush_r+0x74>
 80076bc:	682b      	ldr	r3, [r5, #0]
 80076be:	b903      	cbnz	r3, 80076c2 <__sflush_r+0x76>
 80076c0:	6560      	str	r0, [r4, #84]	@ 0x54
 80076c2:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80076c4:	602f      	str	r7, [r5, #0]
 80076c6:	b1b9      	cbz	r1, 80076f8 <__sflush_r+0xac>
 80076c8:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 80076cc:	4299      	cmp	r1, r3
 80076ce:	d002      	beq.n	80076d6 <__sflush_r+0x8a>
 80076d0:	4628      	mov	r0, r5
 80076d2:	f7fe fa49 	bl	8005b68 <_free_r>
 80076d6:	2300      	movs	r3, #0
 80076d8:	6363      	str	r3, [r4, #52]	@ 0x34
 80076da:	e00d      	b.n	80076f8 <__sflush_r+0xac>
 80076dc:	2301      	movs	r3, #1
 80076de:	4628      	mov	r0, r5
 80076e0:	47b0      	blx	r6
 80076e2:	4602      	mov	r2, r0
 80076e4:	1c50      	adds	r0, r2, #1
 80076e6:	d1c9      	bne.n	800767c <__sflush_r+0x30>
 80076e8:	682b      	ldr	r3, [r5, #0]
 80076ea:	2b00      	cmp	r3, #0
 80076ec:	d0c6      	beq.n	800767c <__sflush_r+0x30>
 80076ee:	2b1d      	cmp	r3, #29
 80076f0:	d001      	beq.n	80076f6 <__sflush_r+0xaa>
 80076f2:	2b16      	cmp	r3, #22
 80076f4:	d11d      	bne.n	8007732 <__sflush_r+0xe6>
 80076f6:	602f      	str	r7, [r5, #0]
 80076f8:	2000      	movs	r0, #0
 80076fa:	e021      	b.n	8007740 <__sflush_r+0xf4>
 80076fc:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8007700:	b21b      	sxth	r3, r3
 8007702:	e01a      	b.n	800773a <__sflush_r+0xee>
 8007704:	690f      	ldr	r7, [r1, #16]
 8007706:	2f00      	cmp	r7, #0
 8007708:	d0f6      	beq.n	80076f8 <__sflush_r+0xac>
 800770a:	0793      	lsls	r3, r2, #30
 800770c:	bf18      	it	ne
 800770e:	2300      	movne	r3, #0
 8007710:	680e      	ldr	r6, [r1, #0]
 8007712:	bf08      	it	eq
 8007714:	694b      	ldreq	r3, [r1, #20]
 8007716:	1bf6      	subs	r6, r6, r7
 8007718:	600f      	str	r7, [r1, #0]
 800771a:	608b      	str	r3, [r1, #8]
 800771c:	2e00      	cmp	r6, #0
 800771e:	ddeb      	ble.n	80076f8 <__sflush_r+0xac>
 8007720:	4633      	mov	r3, r6
 8007722:	463a      	mov	r2, r7
 8007724:	4628      	mov	r0, r5
 8007726:	6a21      	ldr	r1, [r4, #32]
 8007728:	f8d4 c028 	ldr.w	ip, [r4, #40]	@ 0x28
 800772c:	47e0      	blx	ip
 800772e:	2800      	cmp	r0, #0
 8007730:	dc07      	bgt.n	8007742 <__sflush_r+0xf6>
 8007732:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007736:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800773a:	f04f 30ff 	mov.w	r0, #4294967295
 800773e:	81a3      	strh	r3, [r4, #12]
 8007740:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007742:	4407      	add	r7, r0
 8007744:	1a36      	subs	r6, r6, r0
 8007746:	e7e9      	b.n	800771c <__sflush_r+0xd0>
 8007748:	20400001 	.word	0x20400001

0800774c <_fflush_r>:
 800774c:	b538      	push	{r3, r4, r5, lr}
 800774e:	690b      	ldr	r3, [r1, #16]
 8007750:	4605      	mov	r5, r0
 8007752:	460c      	mov	r4, r1
 8007754:	b913      	cbnz	r3, 800775c <_fflush_r+0x10>
 8007756:	2500      	movs	r5, #0
 8007758:	4628      	mov	r0, r5
 800775a:	bd38      	pop	{r3, r4, r5, pc}
 800775c:	b118      	cbz	r0, 8007766 <_fflush_r+0x1a>
 800775e:	6a03      	ldr	r3, [r0, #32]
 8007760:	b90b      	cbnz	r3, 8007766 <_fflush_r+0x1a>
 8007762:	f7fd fa67 	bl	8004c34 <__sinit>
 8007766:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800776a:	2b00      	cmp	r3, #0
 800776c:	d0f3      	beq.n	8007756 <_fflush_r+0xa>
 800776e:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8007770:	07d0      	lsls	r0, r2, #31
 8007772:	d404      	bmi.n	800777e <_fflush_r+0x32>
 8007774:	0599      	lsls	r1, r3, #22
 8007776:	d402      	bmi.n	800777e <_fflush_r+0x32>
 8007778:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800777a:	f7fd fb74 	bl	8004e66 <__retarget_lock_acquire_recursive>
 800777e:	4628      	mov	r0, r5
 8007780:	4621      	mov	r1, r4
 8007782:	f7ff ff63 	bl	800764c <__sflush_r>
 8007786:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8007788:	4605      	mov	r5, r0
 800778a:	07da      	lsls	r2, r3, #31
 800778c:	d4e4      	bmi.n	8007758 <_fflush_r+0xc>
 800778e:	89a3      	ldrh	r3, [r4, #12]
 8007790:	059b      	lsls	r3, r3, #22
 8007792:	d4e1      	bmi.n	8007758 <_fflush_r+0xc>
 8007794:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8007796:	f7fd fb67 	bl	8004e68 <__retarget_lock_release_recursive>
 800779a:	e7dd      	b.n	8007758 <_fflush_r+0xc>

0800779c <memmove>:
 800779c:	4288      	cmp	r0, r1
 800779e:	b510      	push	{r4, lr}
 80077a0:	eb01 0402 	add.w	r4, r1, r2
 80077a4:	d902      	bls.n	80077ac <memmove+0x10>
 80077a6:	4284      	cmp	r4, r0
 80077a8:	4623      	mov	r3, r4
 80077aa:	d807      	bhi.n	80077bc <memmove+0x20>
 80077ac:	1e43      	subs	r3, r0, #1
 80077ae:	42a1      	cmp	r1, r4
 80077b0:	d008      	beq.n	80077c4 <memmove+0x28>
 80077b2:	f811 2b01 	ldrb.w	r2, [r1], #1
 80077b6:	f803 2f01 	strb.w	r2, [r3, #1]!
 80077ba:	e7f8      	b.n	80077ae <memmove+0x12>
 80077bc:	4601      	mov	r1, r0
 80077be:	4402      	add	r2, r0
 80077c0:	428a      	cmp	r2, r1
 80077c2:	d100      	bne.n	80077c6 <memmove+0x2a>
 80077c4:	bd10      	pop	{r4, pc}
 80077c6:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80077ca:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80077ce:	e7f7      	b.n	80077c0 <memmove+0x24>

080077d0 <strncmp>:
 80077d0:	b510      	push	{r4, lr}
 80077d2:	b16a      	cbz	r2, 80077f0 <strncmp+0x20>
 80077d4:	3901      	subs	r1, #1
 80077d6:	1884      	adds	r4, r0, r2
 80077d8:	f810 2b01 	ldrb.w	r2, [r0], #1
 80077dc:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 80077e0:	429a      	cmp	r2, r3
 80077e2:	d103      	bne.n	80077ec <strncmp+0x1c>
 80077e4:	42a0      	cmp	r0, r4
 80077e6:	d001      	beq.n	80077ec <strncmp+0x1c>
 80077e8:	2a00      	cmp	r2, #0
 80077ea:	d1f5      	bne.n	80077d8 <strncmp+0x8>
 80077ec:	1ad0      	subs	r0, r2, r3
 80077ee:	bd10      	pop	{r4, pc}
 80077f0:	4610      	mov	r0, r2
 80077f2:	e7fc      	b.n	80077ee <strncmp+0x1e>

080077f4 <_sbrk_r>:
 80077f4:	b538      	push	{r3, r4, r5, lr}
 80077f6:	2300      	movs	r3, #0
 80077f8:	4d05      	ldr	r5, [pc, #20]	@ (8007810 <_sbrk_r+0x1c>)
 80077fa:	4604      	mov	r4, r0
 80077fc:	4608      	mov	r0, r1
 80077fe:	602b      	str	r3, [r5, #0]
 8007800:	f7fa f968 	bl	8001ad4 <_sbrk>
 8007804:	1c43      	adds	r3, r0, #1
 8007806:	d102      	bne.n	800780e <_sbrk_r+0x1a>
 8007808:	682b      	ldr	r3, [r5, #0]
 800780a:	b103      	cbz	r3, 800780e <_sbrk_r+0x1a>
 800780c:	6023      	str	r3, [r4, #0]
 800780e:	bd38      	pop	{r3, r4, r5, pc}
 8007810:	200007b8 	.word	0x200007b8

08007814 <nan>:
 8007814:	2000      	movs	r0, #0
 8007816:	4901      	ldr	r1, [pc, #4]	@ (800781c <nan+0x8>)
 8007818:	4770      	bx	lr
 800781a:	bf00      	nop
 800781c:	7ff80000 	.word	0x7ff80000

08007820 <__assert_func>:
 8007820:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8007822:	4614      	mov	r4, r2
 8007824:	461a      	mov	r2, r3
 8007826:	4b09      	ldr	r3, [pc, #36]	@ (800784c <__assert_func+0x2c>)
 8007828:	4605      	mov	r5, r0
 800782a:	681b      	ldr	r3, [r3, #0]
 800782c:	68d8      	ldr	r0, [r3, #12]
 800782e:	b14c      	cbz	r4, 8007844 <__assert_func+0x24>
 8007830:	4b07      	ldr	r3, [pc, #28]	@ (8007850 <__assert_func+0x30>)
 8007832:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8007836:	9100      	str	r1, [sp, #0]
 8007838:	462b      	mov	r3, r5
 800783a:	4906      	ldr	r1, [pc, #24]	@ (8007854 <__assert_func+0x34>)
 800783c:	f000 fba8 	bl	8007f90 <fiprintf>
 8007840:	f000 fbb8 	bl	8007fb4 <abort>
 8007844:	4b04      	ldr	r3, [pc, #16]	@ (8007858 <__assert_func+0x38>)
 8007846:	461c      	mov	r4, r3
 8007848:	e7f3      	b.n	8007832 <__assert_func+0x12>
 800784a:	bf00      	nop
 800784c:	20000018 	.word	0x20000018
 8007850:	080088c4 	.word	0x080088c4
 8007854:	080088d1 	.word	0x080088d1
 8007858:	080088ff 	.word	0x080088ff

0800785c <_calloc_r>:
 800785c:	b570      	push	{r4, r5, r6, lr}
 800785e:	fba1 5402 	umull	r5, r4, r1, r2
 8007862:	b934      	cbnz	r4, 8007872 <_calloc_r+0x16>
 8007864:	4629      	mov	r1, r5
 8007866:	f7fe f9f1 	bl	8005c4c <_malloc_r>
 800786a:	4606      	mov	r6, r0
 800786c:	b928      	cbnz	r0, 800787a <_calloc_r+0x1e>
 800786e:	4630      	mov	r0, r6
 8007870:	bd70      	pop	{r4, r5, r6, pc}
 8007872:	220c      	movs	r2, #12
 8007874:	2600      	movs	r6, #0
 8007876:	6002      	str	r2, [r0, #0]
 8007878:	e7f9      	b.n	800786e <_calloc_r+0x12>
 800787a:	462a      	mov	r2, r5
 800787c:	4621      	mov	r1, r4
 800787e:	f7fd fa74 	bl	8004d6a <memset>
 8007882:	e7f4      	b.n	800786e <_calloc_r+0x12>

08007884 <rshift>:
 8007884:	6903      	ldr	r3, [r0, #16]
 8007886:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800788a:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 800788e:	f100 0414 	add.w	r4, r0, #20
 8007892:	ea4f 1261 	mov.w	r2, r1, asr #5
 8007896:	dd46      	ble.n	8007926 <rshift+0xa2>
 8007898:	f011 011f 	ands.w	r1, r1, #31
 800789c:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 80078a0:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 80078a4:	d10c      	bne.n	80078c0 <rshift+0x3c>
 80078a6:	4629      	mov	r1, r5
 80078a8:	f100 0710 	add.w	r7, r0, #16
 80078ac:	42b1      	cmp	r1, r6
 80078ae:	d335      	bcc.n	800791c <rshift+0x98>
 80078b0:	1a9b      	subs	r3, r3, r2
 80078b2:	009b      	lsls	r3, r3, #2
 80078b4:	1eea      	subs	r2, r5, #3
 80078b6:	4296      	cmp	r6, r2
 80078b8:	bf38      	it	cc
 80078ba:	2300      	movcc	r3, #0
 80078bc:	4423      	add	r3, r4
 80078be:	e015      	b.n	80078ec <rshift+0x68>
 80078c0:	46a1      	mov	r9, r4
 80078c2:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 80078c6:	f1c1 0820 	rsb	r8, r1, #32
 80078ca:	40cf      	lsrs	r7, r1
 80078cc:	f105 0e04 	add.w	lr, r5, #4
 80078d0:	4576      	cmp	r6, lr
 80078d2:	46f4      	mov	ip, lr
 80078d4:	d816      	bhi.n	8007904 <rshift+0x80>
 80078d6:	1a9a      	subs	r2, r3, r2
 80078d8:	0092      	lsls	r2, r2, #2
 80078da:	3a04      	subs	r2, #4
 80078dc:	3501      	adds	r5, #1
 80078de:	42ae      	cmp	r6, r5
 80078e0:	bf38      	it	cc
 80078e2:	2200      	movcc	r2, #0
 80078e4:	18a3      	adds	r3, r4, r2
 80078e6:	50a7      	str	r7, [r4, r2]
 80078e8:	b107      	cbz	r7, 80078ec <rshift+0x68>
 80078ea:	3304      	adds	r3, #4
 80078ec:	42a3      	cmp	r3, r4
 80078ee:	eba3 0204 	sub.w	r2, r3, r4
 80078f2:	bf08      	it	eq
 80078f4:	2300      	moveq	r3, #0
 80078f6:	ea4f 02a2 	mov.w	r2, r2, asr #2
 80078fa:	6102      	str	r2, [r0, #16]
 80078fc:	bf08      	it	eq
 80078fe:	6143      	streq	r3, [r0, #20]
 8007900:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8007904:	f8dc c000 	ldr.w	ip, [ip]
 8007908:	fa0c fc08 	lsl.w	ip, ip, r8
 800790c:	ea4c 0707 	orr.w	r7, ip, r7
 8007910:	f849 7b04 	str.w	r7, [r9], #4
 8007914:	f85e 7b04 	ldr.w	r7, [lr], #4
 8007918:	40cf      	lsrs	r7, r1
 800791a:	e7d9      	b.n	80078d0 <rshift+0x4c>
 800791c:	f851 cb04 	ldr.w	ip, [r1], #4
 8007920:	f847 cf04 	str.w	ip, [r7, #4]!
 8007924:	e7c2      	b.n	80078ac <rshift+0x28>
 8007926:	4623      	mov	r3, r4
 8007928:	e7e0      	b.n	80078ec <rshift+0x68>

0800792a <__hexdig_fun>:
 800792a:	f1a0 0330 	sub.w	r3, r0, #48	@ 0x30
 800792e:	2b09      	cmp	r3, #9
 8007930:	d802      	bhi.n	8007938 <__hexdig_fun+0xe>
 8007932:	3820      	subs	r0, #32
 8007934:	b2c0      	uxtb	r0, r0
 8007936:	4770      	bx	lr
 8007938:	f1a0 0361 	sub.w	r3, r0, #97	@ 0x61
 800793c:	2b05      	cmp	r3, #5
 800793e:	d801      	bhi.n	8007944 <__hexdig_fun+0x1a>
 8007940:	3847      	subs	r0, #71	@ 0x47
 8007942:	e7f7      	b.n	8007934 <__hexdig_fun+0xa>
 8007944:	f1a0 0341 	sub.w	r3, r0, #65	@ 0x41
 8007948:	2b05      	cmp	r3, #5
 800794a:	d801      	bhi.n	8007950 <__hexdig_fun+0x26>
 800794c:	3827      	subs	r0, #39	@ 0x27
 800794e:	e7f1      	b.n	8007934 <__hexdig_fun+0xa>
 8007950:	2000      	movs	r0, #0
 8007952:	4770      	bx	lr

08007954 <__gethex>:
 8007954:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007958:	468a      	mov	sl, r1
 800795a:	4690      	mov	r8, r2
 800795c:	b085      	sub	sp, #20
 800795e:	9302      	str	r3, [sp, #8]
 8007960:	680b      	ldr	r3, [r1, #0]
 8007962:	9001      	str	r0, [sp, #4]
 8007964:	1c9c      	adds	r4, r3, #2
 8007966:	46a1      	mov	r9, r4
 8007968:	f814 0b01 	ldrb.w	r0, [r4], #1
 800796c:	2830      	cmp	r0, #48	@ 0x30
 800796e:	d0fa      	beq.n	8007966 <__gethex+0x12>
 8007970:	eba9 0303 	sub.w	r3, r9, r3
 8007974:	f1a3 0b02 	sub.w	fp, r3, #2
 8007978:	f7ff ffd7 	bl	800792a <__hexdig_fun>
 800797c:	4605      	mov	r5, r0
 800797e:	2800      	cmp	r0, #0
 8007980:	d168      	bne.n	8007a54 <__gethex+0x100>
 8007982:	2201      	movs	r2, #1
 8007984:	4648      	mov	r0, r9
 8007986:	499f      	ldr	r1, [pc, #636]	@ (8007c04 <__gethex+0x2b0>)
 8007988:	f7ff ff22 	bl	80077d0 <strncmp>
 800798c:	4607      	mov	r7, r0
 800798e:	2800      	cmp	r0, #0
 8007990:	d167      	bne.n	8007a62 <__gethex+0x10e>
 8007992:	f899 0001 	ldrb.w	r0, [r9, #1]
 8007996:	4626      	mov	r6, r4
 8007998:	f7ff ffc7 	bl	800792a <__hexdig_fun>
 800799c:	2800      	cmp	r0, #0
 800799e:	d062      	beq.n	8007a66 <__gethex+0x112>
 80079a0:	4623      	mov	r3, r4
 80079a2:	7818      	ldrb	r0, [r3, #0]
 80079a4:	4699      	mov	r9, r3
 80079a6:	2830      	cmp	r0, #48	@ 0x30
 80079a8:	f103 0301 	add.w	r3, r3, #1
 80079ac:	d0f9      	beq.n	80079a2 <__gethex+0x4e>
 80079ae:	f7ff ffbc 	bl	800792a <__hexdig_fun>
 80079b2:	fab0 f580 	clz	r5, r0
 80079b6:	f04f 0b01 	mov.w	fp, #1
 80079ba:	096d      	lsrs	r5, r5, #5
 80079bc:	464a      	mov	r2, r9
 80079be:	4616      	mov	r6, r2
 80079c0:	7830      	ldrb	r0, [r6, #0]
 80079c2:	3201      	adds	r2, #1
 80079c4:	f7ff ffb1 	bl	800792a <__hexdig_fun>
 80079c8:	2800      	cmp	r0, #0
 80079ca:	d1f8      	bne.n	80079be <__gethex+0x6a>
 80079cc:	2201      	movs	r2, #1
 80079ce:	4630      	mov	r0, r6
 80079d0:	498c      	ldr	r1, [pc, #560]	@ (8007c04 <__gethex+0x2b0>)
 80079d2:	f7ff fefd 	bl	80077d0 <strncmp>
 80079d6:	2800      	cmp	r0, #0
 80079d8:	d13f      	bne.n	8007a5a <__gethex+0x106>
 80079da:	b944      	cbnz	r4, 80079ee <__gethex+0x9a>
 80079dc:	1c74      	adds	r4, r6, #1
 80079de:	4622      	mov	r2, r4
 80079e0:	4616      	mov	r6, r2
 80079e2:	7830      	ldrb	r0, [r6, #0]
 80079e4:	3201      	adds	r2, #1
 80079e6:	f7ff ffa0 	bl	800792a <__hexdig_fun>
 80079ea:	2800      	cmp	r0, #0
 80079ec:	d1f8      	bne.n	80079e0 <__gethex+0x8c>
 80079ee:	1ba4      	subs	r4, r4, r6
 80079f0:	00a7      	lsls	r7, r4, #2
 80079f2:	7833      	ldrb	r3, [r6, #0]
 80079f4:	f003 03df 	and.w	r3, r3, #223	@ 0xdf
 80079f8:	2b50      	cmp	r3, #80	@ 0x50
 80079fa:	d13e      	bne.n	8007a7a <__gethex+0x126>
 80079fc:	7873      	ldrb	r3, [r6, #1]
 80079fe:	2b2b      	cmp	r3, #43	@ 0x2b
 8007a00:	d033      	beq.n	8007a6a <__gethex+0x116>
 8007a02:	2b2d      	cmp	r3, #45	@ 0x2d
 8007a04:	d034      	beq.n	8007a70 <__gethex+0x11c>
 8007a06:	2400      	movs	r4, #0
 8007a08:	1c71      	adds	r1, r6, #1
 8007a0a:	7808      	ldrb	r0, [r1, #0]
 8007a0c:	f7ff ff8d 	bl	800792a <__hexdig_fun>
 8007a10:	1e43      	subs	r3, r0, #1
 8007a12:	b2db      	uxtb	r3, r3
 8007a14:	2b18      	cmp	r3, #24
 8007a16:	d830      	bhi.n	8007a7a <__gethex+0x126>
 8007a18:	f1a0 0210 	sub.w	r2, r0, #16
 8007a1c:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 8007a20:	f7ff ff83 	bl	800792a <__hexdig_fun>
 8007a24:	f100 3cff 	add.w	ip, r0, #4294967295
 8007a28:	fa5f fc8c 	uxtb.w	ip, ip
 8007a2c:	f1bc 0f18 	cmp.w	ip, #24
 8007a30:	f04f 030a 	mov.w	r3, #10
 8007a34:	d91e      	bls.n	8007a74 <__gethex+0x120>
 8007a36:	b104      	cbz	r4, 8007a3a <__gethex+0xe6>
 8007a38:	4252      	negs	r2, r2
 8007a3a:	4417      	add	r7, r2
 8007a3c:	f8ca 1000 	str.w	r1, [sl]
 8007a40:	b1ed      	cbz	r5, 8007a7e <__gethex+0x12a>
 8007a42:	f1bb 0f00 	cmp.w	fp, #0
 8007a46:	bf0c      	ite	eq
 8007a48:	2506      	moveq	r5, #6
 8007a4a:	2500      	movne	r5, #0
 8007a4c:	4628      	mov	r0, r5
 8007a4e:	b005      	add	sp, #20
 8007a50:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007a54:	2500      	movs	r5, #0
 8007a56:	462c      	mov	r4, r5
 8007a58:	e7b0      	b.n	80079bc <__gethex+0x68>
 8007a5a:	2c00      	cmp	r4, #0
 8007a5c:	d1c7      	bne.n	80079ee <__gethex+0x9a>
 8007a5e:	4627      	mov	r7, r4
 8007a60:	e7c7      	b.n	80079f2 <__gethex+0x9e>
 8007a62:	464e      	mov	r6, r9
 8007a64:	462f      	mov	r7, r5
 8007a66:	2501      	movs	r5, #1
 8007a68:	e7c3      	b.n	80079f2 <__gethex+0x9e>
 8007a6a:	2400      	movs	r4, #0
 8007a6c:	1cb1      	adds	r1, r6, #2
 8007a6e:	e7cc      	b.n	8007a0a <__gethex+0xb6>
 8007a70:	2401      	movs	r4, #1
 8007a72:	e7fb      	b.n	8007a6c <__gethex+0x118>
 8007a74:	fb03 0002 	mla	r0, r3, r2, r0
 8007a78:	e7ce      	b.n	8007a18 <__gethex+0xc4>
 8007a7a:	4631      	mov	r1, r6
 8007a7c:	e7de      	b.n	8007a3c <__gethex+0xe8>
 8007a7e:	4629      	mov	r1, r5
 8007a80:	eba6 0309 	sub.w	r3, r6, r9
 8007a84:	3b01      	subs	r3, #1
 8007a86:	2b07      	cmp	r3, #7
 8007a88:	dc0a      	bgt.n	8007aa0 <__gethex+0x14c>
 8007a8a:	9801      	ldr	r0, [sp, #4]
 8007a8c:	f7fe f96a 	bl	8005d64 <_Balloc>
 8007a90:	4604      	mov	r4, r0
 8007a92:	b940      	cbnz	r0, 8007aa6 <__gethex+0x152>
 8007a94:	4602      	mov	r2, r0
 8007a96:	21e4      	movs	r1, #228	@ 0xe4
 8007a98:	4b5b      	ldr	r3, [pc, #364]	@ (8007c08 <__gethex+0x2b4>)
 8007a9a:	485c      	ldr	r0, [pc, #368]	@ (8007c0c <__gethex+0x2b8>)
 8007a9c:	f7ff fec0 	bl	8007820 <__assert_func>
 8007aa0:	3101      	adds	r1, #1
 8007aa2:	105b      	asrs	r3, r3, #1
 8007aa4:	e7ef      	b.n	8007a86 <__gethex+0x132>
 8007aa6:	2300      	movs	r3, #0
 8007aa8:	f100 0a14 	add.w	sl, r0, #20
 8007aac:	4655      	mov	r5, sl
 8007aae:	469b      	mov	fp, r3
 8007ab0:	45b1      	cmp	r9, r6
 8007ab2:	d337      	bcc.n	8007b24 <__gethex+0x1d0>
 8007ab4:	f845 bb04 	str.w	fp, [r5], #4
 8007ab8:	eba5 050a 	sub.w	r5, r5, sl
 8007abc:	10ad      	asrs	r5, r5, #2
 8007abe:	6125      	str	r5, [r4, #16]
 8007ac0:	4658      	mov	r0, fp
 8007ac2:	f7fe fa41 	bl	8005f48 <__hi0bits>
 8007ac6:	016d      	lsls	r5, r5, #5
 8007ac8:	f8d8 6000 	ldr.w	r6, [r8]
 8007acc:	1a2d      	subs	r5, r5, r0
 8007ace:	42b5      	cmp	r5, r6
 8007ad0:	dd54      	ble.n	8007b7c <__gethex+0x228>
 8007ad2:	1bad      	subs	r5, r5, r6
 8007ad4:	4629      	mov	r1, r5
 8007ad6:	4620      	mov	r0, r4
 8007ad8:	f7fe fdc3 	bl	8006662 <__any_on>
 8007adc:	4681      	mov	r9, r0
 8007ade:	b178      	cbz	r0, 8007b00 <__gethex+0x1ac>
 8007ae0:	f04f 0901 	mov.w	r9, #1
 8007ae4:	1e6b      	subs	r3, r5, #1
 8007ae6:	1159      	asrs	r1, r3, #5
 8007ae8:	f85a 1021 	ldr.w	r1, [sl, r1, lsl #2]
 8007aec:	f003 021f 	and.w	r2, r3, #31
 8007af0:	fa09 f202 	lsl.w	r2, r9, r2
 8007af4:	420a      	tst	r2, r1
 8007af6:	d003      	beq.n	8007b00 <__gethex+0x1ac>
 8007af8:	454b      	cmp	r3, r9
 8007afa:	dc36      	bgt.n	8007b6a <__gethex+0x216>
 8007afc:	f04f 0902 	mov.w	r9, #2
 8007b00:	4629      	mov	r1, r5
 8007b02:	4620      	mov	r0, r4
 8007b04:	f7ff febe 	bl	8007884 <rshift>
 8007b08:	442f      	add	r7, r5
 8007b0a:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8007b0e:	42bb      	cmp	r3, r7
 8007b10:	da42      	bge.n	8007b98 <__gethex+0x244>
 8007b12:	4621      	mov	r1, r4
 8007b14:	9801      	ldr	r0, [sp, #4]
 8007b16:	f7fe f965 	bl	8005de4 <_Bfree>
 8007b1a:	2300      	movs	r3, #0
 8007b1c:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8007b1e:	25a3      	movs	r5, #163	@ 0xa3
 8007b20:	6013      	str	r3, [r2, #0]
 8007b22:	e793      	b.n	8007a4c <__gethex+0xf8>
 8007b24:	f816 2d01 	ldrb.w	r2, [r6, #-1]!
 8007b28:	2a2e      	cmp	r2, #46	@ 0x2e
 8007b2a:	d012      	beq.n	8007b52 <__gethex+0x1fe>
 8007b2c:	2b20      	cmp	r3, #32
 8007b2e:	d104      	bne.n	8007b3a <__gethex+0x1e6>
 8007b30:	f845 bb04 	str.w	fp, [r5], #4
 8007b34:	f04f 0b00 	mov.w	fp, #0
 8007b38:	465b      	mov	r3, fp
 8007b3a:	7830      	ldrb	r0, [r6, #0]
 8007b3c:	9303      	str	r3, [sp, #12]
 8007b3e:	f7ff fef4 	bl	800792a <__hexdig_fun>
 8007b42:	9b03      	ldr	r3, [sp, #12]
 8007b44:	f000 000f 	and.w	r0, r0, #15
 8007b48:	4098      	lsls	r0, r3
 8007b4a:	ea4b 0b00 	orr.w	fp, fp, r0
 8007b4e:	3304      	adds	r3, #4
 8007b50:	e7ae      	b.n	8007ab0 <__gethex+0x15c>
 8007b52:	45b1      	cmp	r9, r6
 8007b54:	d8ea      	bhi.n	8007b2c <__gethex+0x1d8>
 8007b56:	2201      	movs	r2, #1
 8007b58:	4630      	mov	r0, r6
 8007b5a:	492a      	ldr	r1, [pc, #168]	@ (8007c04 <__gethex+0x2b0>)
 8007b5c:	9303      	str	r3, [sp, #12]
 8007b5e:	f7ff fe37 	bl	80077d0 <strncmp>
 8007b62:	9b03      	ldr	r3, [sp, #12]
 8007b64:	2800      	cmp	r0, #0
 8007b66:	d1e1      	bne.n	8007b2c <__gethex+0x1d8>
 8007b68:	e7a2      	b.n	8007ab0 <__gethex+0x15c>
 8007b6a:	4620      	mov	r0, r4
 8007b6c:	1ea9      	subs	r1, r5, #2
 8007b6e:	f7fe fd78 	bl	8006662 <__any_on>
 8007b72:	2800      	cmp	r0, #0
 8007b74:	d0c2      	beq.n	8007afc <__gethex+0x1a8>
 8007b76:	f04f 0903 	mov.w	r9, #3
 8007b7a:	e7c1      	b.n	8007b00 <__gethex+0x1ac>
 8007b7c:	da09      	bge.n	8007b92 <__gethex+0x23e>
 8007b7e:	1b75      	subs	r5, r6, r5
 8007b80:	4621      	mov	r1, r4
 8007b82:	462a      	mov	r2, r5
 8007b84:	9801      	ldr	r0, [sp, #4]
 8007b86:	f7fe fb3d 	bl	8006204 <__lshift>
 8007b8a:	4604      	mov	r4, r0
 8007b8c:	1b7f      	subs	r7, r7, r5
 8007b8e:	f100 0a14 	add.w	sl, r0, #20
 8007b92:	f04f 0900 	mov.w	r9, #0
 8007b96:	e7b8      	b.n	8007b0a <__gethex+0x1b6>
 8007b98:	f8d8 5004 	ldr.w	r5, [r8, #4]
 8007b9c:	42bd      	cmp	r5, r7
 8007b9e:	dd6f      	ble.n	8007c80 <__gethex+0x32c>
 8007ba0:	1bed      	subs	r5, r5, r7
 8007ba2:	42ae      	cmp	r6, r5
 8007ba4:	dc34      	bgt.n	8007c10 <__gethex+0x2bc>
 8007ba6:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8007baa:	2b02      	cmp	r3, #2
 8007bac:	d022      	beq.n	8007bf4 <__gethex+0x2a0>
 8007bae:	2b03      	cmp	r3, #3
 8007bb0:	d024      	beq.n	8007bfc <__gethex+0x2a8>
 8007bb2:	2b01      	cmp	r3, #1
 8007bb4:	d115      	bne.n	8007be2 <__gethex+0x28e>
 8007bb6:	42ae      	cmp	r6, r5
 8007bb8:	d113      	bne.n	8007be2 <__gethex+0x28e>
 8007bba:	2e01      	cmp	r6, #1
 8007bbc:	d10b      	bne.n	8007bd6 <__gethex+0x282>
 8007bbe:	f8d8 3004 	ldr.w	r3, [r8, #4]
 8007bc2:	9a02      	ldr	r2, [sp, #8]
 8007bc4:	2562      	movs	r5, #98	@ 0x62
 8007bc6:	6013      	str	r3, [r2, #0]
 8007bc8:	2301      	movs	r3, #1
 8007bca:	6123      	str	r3, [r4, #16]
 8007bcc:	f8ca 3000 	str.w	r3, [sl]
 8007bd0:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8007bd2:	601c      	str	r4, [r3, #0]
 8007bd4:	e73a      	b.n	8007a4c <__gethex+0xf8>
 8007bd6:	4620      	mov	r0, r4
 8007bd8:	1e71      	subs	r1, r6, #1
 8007bda:	f7fe fd42 	bl	8006662 <__any_on>
 8007bde:	2800      	cmp	r0, #0
 8007be0:	d1ed      	bne.n	8007bbe <__gethex+0x26a>
 8007be2:	4621      	mov	r1, r4
 8007be4:	9801      	ldr	r0, [sp, #4]
 8007be6:	f7fe f8fd 	bl	8005de4 <_Bfree>
 8007bea:	2300      	movs	r3, #0
 8007bec:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8007bee:	2550      	movs	r5, #80	@ 0x50
 8007bf0:	6013      	str	r3, [r2, #0]
 8007bf2:	e72b      	b.n	8007a4c <__gethex+0xf8>
 8007bf4:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8007bf6:	2b00      	cmp	r3, #0
 8007bf8:	d1f3      	bne.n	8007be2 <__gethex+0x28e>
 8007bfa:	e7e0      	b.n	8007bbe <__gethex+0x26a>
 8007bfc:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8007bfe:	2b00      	cmp	r3, #0
 8007c00:	d1dd      	bne.n	8007bbe <__gethex+0x26a>
 8007c02:	e7ee      	b.n	8007be2 <__gethex+0x28e>
 8007c04:	080088a9 	.word	0x080088a9
 8007c08:	0800883f 	.word	0x0800883f
 8007c0c:	08008900 	.word	0x08008900
 8007c10:	1e6f      	subs	r7, r5, #1
 8007c12:	f1b9 0f00 	cmp.w	r9, #0
 8007c16:	d130      	bne.n	8007c7a <__gethex+0x326>
 8007c18:	b127      	cbz	r7, 8007c24 <__gethex+0x2d0>
 8007c1a:	4639      	mov	r1, r7
 8007c1c:	4620      	mov	r0, r4
 8007c1e:	f7fe fd20 	bl	8006662 <__any_on>
 8007c22:	4681      	mov	r9, r0
 8007c24:	2301      	movs	r3, #1
 8007c26:	4629      	mov	r1, r5
 8007c28:	1b76      	subs	r6, r6, r5
 8007c2a:	2502      	movs	r5, #2
 8007c2c:	117a      	asrs	r2, r7, #5
 8007c2e:	f85a 2022 	ldr.w	r2, [sl, r2, lsl #2]
 8007c32:	f007 071f 	and.w	r7, r7, #31
 8007c36:	40bb      	lsls	r3, r7
 8007c38:	4213      	tst	r3, r2
 8007c3a:	4620      	mov	r0, r4
 8007c3c:	bf18      	it	ne
 8007c3e:	f049 0902 	orrne.w	r9, r9, #2
 8007c42:	f7ff fe1f 	bl	8007884 <rshift>
 8007c46:	f8d8 7004 	ldr.w	r7, [r8, #4]
 8007c4a:	f1b9 0f00 	cmp.w	r9, #0
 8007c4e:	d047      	beq.n	8007ce0 <__gethex+0x38c>
 8007c50:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8007c54:	2b02      	cmp	r3, #2
 8007c56:	d015      	beq.n	8007c84 <__gethex+0x330>
 8007c58:	2b03      	cmp	r3, #3
 8007c5a:	d017      	beq.n	8007c8c <__gethex+0x338>
 8007c5c:	2b01      	cmp	r3, #1
 8007c5e:	d109      	bne.n	8007c74 <__gethex+0x320>
 8007c60:	f019 0f02 	tst.w	r9, #2
 8007c64:	d006      	beq.n	8007c74 <__gethex+0x320>
 8007c66:	f8da 3000 	ldr.w	r3, [sl]
 8007c6a:	ea49 0903 	orr.w	r9, r9, r3
 8007c6e:	f019 0f01 	tst.w	r9, #1
 8007c72:	d10e      	bne.n	8007c92 <__gethex+0x33e>
 8007c74:	f045 0510 	orr.w	r5, r5, #16
 8007c78:	e032      	b.n	8007ce0 <__gethex+0x38c>
 8007c7a:	f04f 0901 	mov.w	r9, #1
 8007c7e:	e7d1      	b.n	8007c24 <__gethex+0x2d0>
 8007c80:	2501      	movs	r5, #1
 8007c82:	e7e2      	b.n	8007c4a <__gethex+0x2f6>
 8007c84:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8007c86:	f1c3 0301 	rsb	r3, r3, #1
 8007c8a:	930f      	str	r3, [sp, #60]	@ 0x3c
 8007c8c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8007c8e:	2b00      	cmp	r3, #0
 8007c90:	d0f0      	beq.n	8007c74 <__gethex+0x320>
 8007c92:	f04f 0c00 	mov.w	ip, #0
 8007c96:	f8d4 b010 	ldr.w	fp, [r4, #16]
 8007c9a:	f104 0314 	add.w	r3, r4, #20
 8007c9e:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 8007ca2:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 8007ca6:	4618      	mov	r0, r3
 8007ca8:	f853 2b04 	ldr.w	r2, [r3], #4
 8007cac:	f1b2 3fff 	cmp.w	r2, #4294967295
 8007cb0:	d01b      	beq.n	8007cea <__gethex+0x396>
 8007cb2:	3201      	adds	r2, #1
 8007cb4:	6002      	str	r2, [r0, #0]
 8007cb6:	2d02      	cmp	r5, #2
 8007cb8:	f104 0314 	add.w	r3, r4, #20
 8007cbc:	d13c      	bne.n	8007d38 <__gethex+0x3e4>
 8007cbe:	f8d8 2000 	ldr.w	r2, [r8]
 8007cc2:	3a01      	subs	r2, #1
 8007cc4:	42b2      	cmp	r2, r6
 8007cc6:	d109      	bne.n	8007cdc <__gethex+0x388>
 8007cc8:	2201      	movs	r2, #1
 8007cca:	1171      	asrs	r1, r6, #5
 8007ccc:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8007cd0:	f006 061f 	and.w	r6, r6, #31
 8007cd4:	fa02 f606 	lsl.w	r6, r2, r6
 8007cd8:	421e      	tst	r6, r3
 8007cda:	d13a      	bne.n	8007d52 <__gethex+0x3fe>
 8007cdc:	f045 0520 	orr.w	r5, r5, #32
 8007ce0:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8007ce2:	601c      	str	r4, [r3, #0]
 8007ce4:	9b02      	ldr	r3, [sp, #8]
 8007ce6:	601f      	str	r7, [r3, #0]
 8007ce8:	e6b0      	b.n	8007a4c <__gethex+0xf8>
 8007cea:	4299      	cmp	r1, r3
 8007cec:	f843 cc04 	str.w	ip, [r3, #-4]
 8007cf0:	d8d9      	bhi.n	8007ca6 <__gethex+0x352>
 8007cf2:	68a3      	ldr	r3, [r4, #8]
 8007cf4:	459b      	cmp	fp, r3
 8007cf6:	db17      	blt.n	8007d28 <__gethex+0x3d4>
 8007cf8:	6861      	ldr	r1, [r4, #4]
 8007cfa:	9801      	ldr	r0, [sp, #4]
 8007cfc:	3101      	adds	r1, #1
 8007cfe:	f7fe f831 	bl	8005d64 <_Balloc>
 8007d02:	4681      	mov	r9, r0
 8007d04:	b918      	cbnz	r0, 8007d0e <__gethex+0x3ba>
 8007d06:	4602      	mov	r2, r0
 8007d08:	2184      	movs	r1, #132	@ 0x84
 8007d0a:	4b19      	ldr	r3, [pc, #100]	@ (8007d70 <__gethex+0x41c>)
 8007d0c:	e6c5      	b.n	8007a9a <__gethex+0x146>
 8007d0e:	6922      	ldr	r2, [r4, #16]
 8007d10:	f104 010c 	add.w	r1, r4, #12
 8007d14:	3202      	adds	r2, #2
 8007d16:	0092      	lsls	r2, r2, #2
 8007d18:	300c      	adds	r0, #12
 8007d1a:	f7fd f8b4 	bl	8004e86 <memcpy>
 8007d1e:	4621      	mov	r1, r4
 8007d20:	9801      	ldr	r0, [sp, #4]
 8007d22:	f7fe f85f 	bl	8005de4 <_Bfree>
 8007d26:	464c      	mov	r4, r9
 8007d28:	6923      	ldr	r3, [r4, #16]
 8007d2a:	1c5a      	adds	r2, r3, #1
 8007d2c:	6122      	str	r2, [r4, #16]
 8007d2e:	2201      	movs	r2, #1
 8007d30:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8007d34:	615a      	str	r2, [r3, #20]
 8007d36:	e7be      	b.n	8007cb6 <__gethex+0x362>
 8007d38:	6922      	ldr	r2, [r4, #16]
 8007d3a:	455a      	cmp	r2, fp
 8007d3c:	dd0b      	ble.n	8007d56 <__gethex+0x402>
 8007d3e:	2101      	movs	r1, #1
 8007d40:	4620      	mov	r0, r4
 8007d42:	f7ff fd9f 	bl	8007884 <rshift>
 8007d46:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8007d4a:	3701      	adds	r7, #1
 8007d4c:	42bb      	cmp	r3, r7
 8007d4e:	f6ff aee0 	blt.w	8007b12 <__gethex+0x1be>
 8007d52:	2501      	movs	r5, #1
 8007d54:	e7c2      	b.n	8007cdc <__gethex+0x388>
 8007d56:	f016 061f 	ands.w	r6, r6, #31
 8007d5a:	d0fa      	beq.n	8007d52 <__gethex+0x3fe>
 8007d5c:	4453      	add	r3, sl
 8007d5e:	f853 0c04 	ldr.w	r0, [r3, #-4]
 8007d62:	f7fe f8f1 	bl	8005f48 <__hi0bits>
 8007d66:	f1c6 0620 	rsb	r6, r6, #32
 8007d6a:	42b0      	cmp	r0, r6
 8007d6c:	dbe7      	blt.n	8007d3e <__gethex+0x3ea>
 8007d6e:	e7f0      	b.n	8007d52 <__gethex+0x3fe>
 8007d70:	0800883f 	.word	0x0800883f

08007d74 <L_shift>:
 8007d74:	f1c2 0208 	rsb	r2, r2, #8
 8007d78:	0092      	lsls	r2, r2, #2
 8007d7a:	b570      	push	{r4, r5, r6, lr}
 8007d7c:	f1c2 0620 	rsb	r6, r2, #32
 8007d80:	6843      	ldr	r3, [r0, #4]
 8007d82:	6804      	ldr	r4, [r0, #0]
 8007d84:	fa03 f506 	lsl.w	r5, r3, r6
 8007d88:	432c      	orrs	r4, r5
 8007d8a:	40d3      	lsrs	r3, r2
 8007d8c:	6004      	str	r4, [r0, #0]
 8007d8e:	f840 3f04 	str.w	r3, [r0, #4]!
 8007d92:	4288      	cmp	r0, r1
 8007d94:	d3f4      	bcc.n	8007d80 <L_shift+0xc>
 8007d96:	bd70      	pop	{r4, r5, r6, pc}

08007d98 <__match>:
 8007d98:	b530      	push	{r4, r5, lr}
 8007d9a:	6803      	ldr	r3, [r0, #0]
 8007d9c:	3301      	adds	r3, #1
 8007d9e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8007da2:	b914      	cbnz	r4, 8007daa <__match+0x12>
 8007da4:	6003      	str	r3, [r0, #0]
 8007da6:	2001      	movs	r0, #1
 8007da8:	bd30      	pop	{r4, r5, pc}
 8007daa:	f813 2b01 	ldrb.w	r2, [r3], #1
 8007dae:	f1a2 0541 	sub.w	r5, r2, #65	@ 0x41
 8007db2:	2d19      	cmp	r5, #25
 8007db4:	bf98      	it	ls
 8007db6:	3220      	addls	r2, #32
 8007db8:	42a2      	cmp	r2, r4
 8007dba:	d0f0      	beq.n	8007d9e <__match+0x6>
 8007dbc:	2000      	movs	r0, #0
 8007dbe:	e7f3      	b.n	8007da8 <__match+0x10>

08007dc0 <__hexnan>:
 8007dc0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007dc4:	2500      	movs	r5, #0
 8007dc6:	680b      	ldr	r3, [r1, #0]
 8007dc8:	4682      	mov	sl, r0
 8007dca:	115e      	asrs	r6, r3, #5
 8007dcc:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 8007dd0:	f013 031f 	ands.w	r3, r3, #31
 8007dd4:	bf18      	it	ne
 8007dd6:	3604      	addne	r6, #4
 8007dd8:	1f37      	subs	r7, r6, #4
 8007dda:	4690      	mov	r8, r2
 8007ddc:	46b9      	mov	r9, r7
 8007dde:	463c      	mov	r4, r7
 8007de0:	46ab      	mov	fp, r5
 8007de2:	b087      	sub	sp, #28
 8007de4:	6801      	ldr	r1, [r0, #0]
 8007de6:	9301      	str	r3, [sp, #4]
 8007de8:	f846 5c04 	str.w	r5, [r6, #-4]
 8007dec:	9502      	str	r5, [sp, #8]
 8007dee:	784a      	ldrb	r2, [r1, #1]
 8007df0:	1c4b      	adds	r3, r1, #1
 8007df2:	9303      	str	r3, [sp, #12]
 8007df4:	b342      	cbz	r2, 8007e48 <__hexnan+0x88>
 8007df6:	4610      	mov	r0, r2
 8007df8:	9105      	str	r1, [sp, #20]
 8007dfa:	9204      	str	r2, [sp, #16]
 8007dfc:	f7ff fd95 	bl	800792a <__hexdig_fun>
 8007e00:	2800      	cmp	r0, #0
 8007e02:	d151      	bne.n	8007ea8 <__hexnan+0xe8>
 8007e04:	9a04      	ldr	r2, [sp, #16]
 8007e06:	9905      	ldr	r1, [sp, #20]
 8007e08:	2a20      	cmp	r2, #32
 8007e0a:	d818      	bhi.n	8007e3e <__hexnan+0x7e>
 8007e0c:	9b02      	ldr	r3, [sp, #8]
 8007e0e:	459b      	cmp	fp, r3
 8007e10:	dd13      	ble.n	8007e3a <__hexnan+0x7a>
 8007e12:	454c      	cmp	r4, r9
 8007e14:	d206      	bcs.n	8007e24 <__hexnan+0x64>
 8007e16:	2d07      	cmp	r5, #7
 8007e18:	dc04      	bgt.n	8007e24 <__hexnan+0x64>
 8007e1a:	462a      	mov	r2, r5
 8007e1c:	4649      	mov	r1, r9
 8007e1e:	4620      	mov	r0, r4
 8007e20:	f7ff ffa8 	bl	8007d74 <L_shift>
 8007e24:	4544      	cmp	r4, r8
 8007e26:	d952      	bls.n	8007ece <__hexnan+0x10e>
 8007e28:	2300      	movs	r3, #0
 8007e2a:	f1a4 0904 	sub.w	r9, r4, #4
 8007e2e:	f844 3c04 	str.w	r3, [r4, #-4]
 8007e32:	461d      	mov	r5, r3
 8007e34:	464c      	mov	r4, r9
 8007e36:	f8cd b008 	str.w	fp, [sp, #8]
 8007e3a:	9903      	ldr	r1, [sp, #12]
 8007e3c:	e7d7      	b.n	8007dee <__hexnan+0x2e>
 8007e3e:	2a29      	cmp	r2, #41	@ 0x29
 8007e40:	d157      	bne.n	8007ef2 <__hexnan+0x132>
 8007e42:	3102      	adds	r1, #2
 8007e44:	f8ca 1000 	str.w	r1, [sl]
 8007e48:	f1bb 0f00 	cmp.w	fp, #0
 8007e4c:	d051      	beq.n	8007ef2 <__hexnan+0x132>
 8007e4e:	454c      	cmp	r4, r9
 8007e50:	d206      	bcs.n	8007e60 <__hexnan+0xa0>
 8007e52:	2d07      	cmp	r5, #7
 8007e54:	dc04      	bgt.n	8007e60 <__hexnan+0xa0>
 8007e56:	462a      	mov	r2, r5
 8007e58:	4649      	mov	r1, r9
 8007e5a:	4620      	mov	r0, r4
 8007e5c:	f7ff ff8a 	bl	8007d74 <L_shift>
 8007e60:	4544      	cmp	r4, r8
 8007e62:	d936      	bls.n	8007ed2 <__hexnan+0x112>
 8007e64:	4623      	mov	r3, r4
 8007e66:	f1a8 0204 	sub.w	r2, r8, #4
 8007e6a:	f853 1b04 	ldr.w	r1, [r3], #4
 8007e6e:	429f      	cmp	r7, r3
 8007e70:	f842 1f04 	str.w	r1, [r2, #4]!
 8007e74:	d2f9      	bcs.n	8007e6a <__hexnan+0xaa>
 8007e76:	1b3b      	subs	r3, r7, r4
 8007e78:	f023 0303 	bic.w	r3, r3, #3
 8007e7c:	3304      	adds	r3, #4
 8007e7e:	3401      	adds	r4, #1
 8007e80:	3e03      	subs	r6, #3
 8007e82:	42b4      	cmp	r4, r6
 8007e84:	bf88      	it	hi
 8007e86:	2304      	movhi	r3, #4
 8007e88:	2200      	movs	r2, #0
 8007e8a:	4443      	add	r3, r8
 8007e8c:	f843 2b04 	str.w	r2, [r3], #4
 8007e90:	429f      	cmp	r7, r3
 8007e92:	d2fb      	bcs.n	8007e8c <__hexnan+0xcc>
 8007e94:	683b      	ldr	r3, [r7, #0]
 8007e96:	b91b      	cbnz	r3, 8007ea0 <__hexnan+0xe0>
 8007e98:	4547      	cmp	r7, r8
 8007e9a:	d128      	bne.n	8007eee <__hexnan+0x12e>
 8007e9c:	2301      	movs	r3, #1
 8007e9e:	603b      	str	r3, [r7, #0]
 8007ea0:	2005      	movs	r0, #5
 8007ea2:	b007      	add	sp, #28
 8007ea4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007ea8:	3501      	adds	r5, #1
 8007eaa:	2d08      	cmp	r5, #8
 8007eac:	f10b 0b01 	add.w	fp, fp, #1
 8007eb0:	dd06      	ble.n	8007ec0 <__hexnan+0x100>
 8007eb2:	4544      	cmp	r4, r8
 8007eb4:	d9c1      	bls.n	8007e3a <__hexnan+0x7a>
 8007eb6:	2300      	movs	r3, #0
 8007eb8:	2501      	movs	r5, #1
 8007eba:	f844 3c04 	str.w	r3, [r4, #-4]
 8007ebe:	3c04      	subs	r4, #4
 8007ec0:	6822      	ldr	r2, [r4, #0]
 8007ec2:	f000 000f 	and.w	r0, r0, #15
 8007ec6:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 8007eca:	6020      	str	r0, [r4, #0]
 8007ecc:	e7b5      	b.n	8007e3a <__hexnan+0x7a>
 8007ece:	2508      	movs	r5, #8
 8007ed0:	e7b3      	b.n	8007e3a <__hexnan+0x7a>
 8007ed2:	9b01      	ldr	r3, [sp, #4]
 8007ed4:	2b00      	cmp	r3, #0
 8007ed6:	d0dd      	beq.n	8007e94 <__hexnan+0xd4>
 8007ed8:	f04f 32ff 	mov.w	r2, #4294967295
 8007edc:	f1c3 0320 	rsb	r3, r3, #32
 8007ee0:	40da      	lsrs	r2, r3
 8007ee2:	f856 3c04 	ldr.w	r3, [r6, #-4]
 8007ee6:	4013      	ands	r3, r2
 8007ee8:	f846 3c04 	str.w	r3, [r6, #-4]
 8007eec:	e7d2      	b.n	8007e94 <__hexnan+0xd4>
 8007eee:	3f04      	subs	r7, #4
 8007ef0:	e7d0      	b.n	8007e94 <__hexnan+0xd4>
 8007ef2:	2004      	movs	r0, #4
 8007ef4:	e7d5      	b.n	8007ea2 <__hexnan+0xe2>

08007ef6 <__ascii_mbtowc>:
 8007ef6:	b082      	sub	sp, #8
 8007ef8:	b901      	cbnz	r1, 8007efc <__ascii_mbtowc+0x6>
 8007efa:	a901      	add	r1, sp, #4
 8007efc:	b142      	cbz	r2, 8007f10 <__ascii_mbtowc+0x1a>
 8007efe:	b14b      	cbz	r3, 8007f14 <__ascii_mbtowc+0x1e>
 8007f00:	7813      	ldrb	r3, [r2, #0]
 8007f02:	600b      	str	r3, [r1, #0]
 8007f04:	7812      	ldrb	r2, [r2, #0]
 8007f06:	1e10      	subs	r0, r2, #0
 8007f08:	bf18      	it	ne
 8007f0a:	2001      	movne	r0, #1
 8007f0c:	b002      	add	sp, #8
 8007f0e:	4770      	bx	lr
 8007f10:	4610      	mov	r0, r2
 8007f12:	e7fb      	b.n	8007f0c <__ascii_mbtowc+0x16>
 8007f14:	f06f 0001 	mvn.w	r0, #1
 8007f18:	e7f8      	b.n	8007f0c <__ascii_mbtowc+0x16>

08007f1a <_realloc_r>:
 8007f1a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007f1e:	4607      	mov	r7, r0
 8007f20:	4614      	mov	r4, r2
 8007f22:	460d      	mov	r5, r1
 8007f24:	b921      	cbnz	r1, 8007f30 <_realloc_r+0x16>
 8007f26:	4611      	mov	r1, r2
 8007f28:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8007f2c:	f7fd be8e 	b.w	8005c4c <_malloc_r>
 8007f30:	b92a      	cbnz	r2, 8007f3e <_realloc_r+0x24>
 8007f32:	f7fd fe19 	bl	8005b68 <_free_r>
 8007f36:	4625      	mov	r5, r4
 8007f38:	4628      	mov	r0, r5
 8007f3a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007f3e:	f000 f840 	bl	8007fc2 <_malloc_usable_size_r>
 8007f42:	4284      	cmp	r4, r0
 8007f44:	4606      	mov	r6, r0
 8007f46:	d802      	bhi.n	8007f4e <_realloc_r+0x34>
 8007f48:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8007f4c:	d8f4      	bhi.n	8007f38 <_realloc_r+0x1e>
 8007f4e:	4621      	mov	r1, r4
 8007f50:	4638      	mov	r0, r7
 8007f52:	f7fd fe7b 	bl	8005c4c <_malloc_r>
 8007f56:	4680      	mov	r8, r0
 8007f58:	b908      	cbnz	r0, 8007f5e <_realloc_r+0x44>
 8007f5a:	4645      	mov	r5, r8
 8007f5c:	e7ec      	b.n	8007f38 <_realloc_r+0x1e>
 8007f5e:	42b4      	cmp	r4, r6
 8007f60:	4622      	mov	r2, r4
 8007f62:	4629      	mov	r1, r5
 8007f64:	bf28      	it	cs
 8007f66:	4632      	movcs	r2, r6
 8007f68:	f7fc ff8d 	bl	8004e86 <memcpy>
 8007f6c:	4629      	mov	r1, r5
 8007f6e:	4638      	mov	r0, r7
 8007f70:	f7fd fdfa 	bl	8005b68 <_free_r>
 8007f74:	e7f1      	b.n	8007f5a <_realloc_r+0x40>

08007f76 <__ascii_wctomb>:
 8007f76:	4603      	mov	r3, r0
 8007f78:	4608      	mov	r0, r1
 8007f7a:	b141      	cbz	r1, 8007f8e <__ascii_wctomb+0x18>
 8007f7c:	2aff      	cmp	r2, #255	@ 0xff
 8007f7e:	d904      	bls.n	8007f8a <__ascii_wctomb+0x14>
 8007f80:	228a      	movs	r2, #138	@ 0x8a
 8007f82:	f04f 30ff 	mov.w	r0, #4294967295
 8007f86:	601a      	str	r2, [r3, #0]
 8007f88:	4770      	bx	lr
 8007f8a:	2001      	movs	r0, #1
 8007f8c:	700a      	strb	r2, [r1, #0]
 8007f8e:	4770      	bx	lr

08007f90 <fiprintf>:
 8007f90:	b40e      	push	{r1, r2, r3}
 8007f92:	b503      	push	{r0, r1, lr}
 8007f94:	4601      	mov	r1, r0
 8007f96:	ab03      	add	r3, sp, #12
 8007f98:	4805      	ldr	r0, [pc, #20]	@ (8007fb0 <fiprintf+0x20>)
 8007f9a:	f853 2b04 	ldr.w	r2, [r3], #4
 8007f9e:	6800      	ldr	r0, [r0, #0]
 8007fa0:	9301      	str	r3, [sp, #4]
 8007fa2:	f000 f83d 	bl	8008020 <_vfiprintf_r>
 8007fa6:	b002      	add	sp, #8
 8007fa8:	f85d eb04 	ldr.w	lr, [sp], #4
 8007fac:	b003      	add	sp, #12
 8007fae:	4770      	bx	lr
 8007fb0:	20000018 	.word	0x20000018

08007fb4 <abort>:
 8007fb4:	2006      	movs	r0, #6
 8007fb6:	b508      	push	{r3, lr}
 8007fb8:	f000 fa06 	bl	80083c8 <raise>
 8007fbc:	2001      	movs	r0, #1
 8007fbe:	f7f9 fd14 	bl	80019ea <_exit>

08007fc2 <_malloc_usable_size_r>:
 8007fc2:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8007fc6:	1f18      	subs	r0, r3, #4
 8007fc8:	2b00      	cmp	r3, #0
 8007fca:	bfbc      	itt	lt
 8007fcc:	580b      	ldrlt	r3, [r1, r0]
 8007fce:	18c0      	addlt	r0, r0, r3
 8007fd0:	4770      	bx	lr

08007fd2 <__sfputc_r>:
 8007fd2:	6893      	ldr	r3, [r2, #8]
 8007fd4:	b410      	push	{r4}
 8007fd6:	3b01      	subs	r3, #1
 8007fd8:	2b00      	cmp	r3, #0
 8007fda:	6093      	str	r3, [r2, #8]
 8007fdc:	da07      	bge.n	8007fee <__sfputc_r+0x1c>
 8007fde:	6994      	ldr	r4, [r2, #24]
 8007fe0:	42a3      	cmp	r3, r4
 8007fe2:	db01      	blt.n	8007fe8 <__sfputc_r+0x16>
 8007fe4:	290a      	cmp	r1, #10
 8007fe6:	d102      	bne.n	8007fee <__sfputc_r+0x1c>
 8007fe8:	bc10      	pop	{r4}
 8007fea:	f000 b931 	b.w	8008250 <__swbuf_r>
 8007fee:	6813      	ldr	r3, [r2, #0]
 8007ff0:	1c58      	adds	r0, r3, #1
 8007ff2:	6010      	str	r0, [r2, #0]
 8007ff4:	7019      	strb	r1, [r3, #0]
 8007ff6:	4608      	mov	r0, r1
 8007ff8:	bc10      	pop	{r4}
 8007ffa:	4770      	bx	lr

08007ffc <__sfputs_r>:
 8007ffc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007ffe:	4606      	mov	r6, r0
 8008000:	460f      	mov	r7, r1
 8008002:	4614      	mov	r4, r2
 8008004:	18d5      	adds	r5, r2, r3
 8008006:	42ac      	cmp	r4, r5
 8008008:	d101      	bne.n	800800e <__sfputs_r+0x12>
 800800a:	2000      	movs	r0, #0
 800800c:	e007      	b.n	800801e <__sfputs_r+0x22>
 800800e:	463a      	mov	r2, r7
 8008010:	4630      	mov	r0, r6
 8008012:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008016:	f7ff ffdc 	bl	8007fd2 <__sfputc_r>
 800801a:	1c43      	adds	r3, r0, #1
 800801c:	d1f3      	bne.n	8008006 <__sfputs_r+0xa>
 800801e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08008020 <_vfiprintf_r>:
 8008020:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008024:	460d      	mov	r5, r1
 8008026:	4614      	mov	r4, r2
 8008028:	4698      	mov	r8, r3
 800802a:	4606      	mov	r6, r0
 800802c:	b09d      	sub	sp, #116	@ 0x74
 800802e:	b118      	cbz	r0, 8008038 <_vfiprintf_r+0x18>
 8008030:	6a03      	ldr	r3, [r0, #32]
 8008032:	b90b      	cbnz	r3, 8008038 <_vfiprintf_r+0x18>
 8008034:	f7fc fdfe 	bl	8004c34 <__sinit>
 8008038:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800803a:	07d9      	lsls	r1, r3, #31
 800803c:	d405      	bmi.n	800804a <_vfiprintf_r+0x2a>
 800803e:	89ab      	ldrh	r3, [r5, #12]
 8008040:	059a      	lsls	r2, r3, #22
 8008042:	d402      	bmi.n	800804a <_vfiprintf_r+0x2a>
 8008044:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8008046:	f7fc ff0e 	bl	8004e66 <__retarget_lock_acquire_recursive>
 800804a:	89ab      	ldrh	r3, [r5, #12]
 800804c:	071b      	lsls	r3, r3, #28
 800804e:	d501      	bpl.n	8008054 <_vfiprintf_r+0x34>
 8008050:	692b      	ldr	r3, [r5, #16]
 8008052:	b99b      	cbnz	r3, 800807c <_vfiprintf_r+0x5c>
 8008054:	4629      	mov	r1, r5
 8008056:	4630      	mov	r0, r6
 8008058:	f000 f938 	bl	80082cc <__swsetup_r>
 800805c:	b170      	cbz	r0, 800807c <_vfiprintf_r+0x5c>
 800805e:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8008060:	07dc      	lsls	r4, r3, #31
 8008062:	d504      	bpl.n	800806e <_vfiprintf_r+0x4e>
 8008064:	f04f 30ff 	mov.w	r0, #4294967295
 8008068:	b01d      	add	sp, #116	@ 0x74
 800806a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800806e:	89ab      	ldrh	r3, [r5, #12]
 8008070:	0598      	lsls	r0, r3, #22
 8008072:	d4f7      	bmi.n	8008064 <_vfiprintf_r+0x44>
 8008074:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8008076:	f7fc fef7 	bl	8004e68 <__retarget_lock_release_recursive>
 800807a:	e7f3      	b.n	8008064 <_vfiprintf_r+0x44>
 800807c:	2300      	movs	r3, #0
 800807e:	9309      	str	r3, [sp, #36]	@ 0x24
 8008080:	2320      	movs	r3, #32
 8008082:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8008086:	2330      	movs	r3, #48	@ 0x30
 8008088:	f04f 0901 	mov.w	r9, #1
 800808c:	f8cd 800c 	str.w	r8, [sp, #12]
 8008090:	f8df 81a8 	ldr.w	r8, [pc, #424]	@ 800823c <_vfiprintf_r+0x21c>
 8008094:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8008098:	4623      	mov	r3, r4
 800809a:	469a      	mov	sl, r3
 800809c:	f813 2b01 	ldrb.w	r2, [r3], #1
 80080a0:	b10a      	cbz	r2, 80080a6 <_vfiprintf_r+0x86>
 80080a2:	2a25      	cmp	r2, #37	@ 0x25
 80080a4:	d1f9      	bne.n	800809a <_vfiprintf_r+0x7a>
 80080a6:	ebba 0b04 	subs.w	fp, sl, r4
 80080aa:	d00b      	beq.n	80080c4 <_vfiprintf_r+0xa4>
 80080ac:	465b      	mov	r3, fp
 80080ae:	4622      	mov	r2, r4
 80080b0:	4629      	mov	r1, r5
 80080b2:	4630      	mov	r0, r6
 80080b4:	f7ff ffa2 	bl	8007ffc <__sfputs_r>
 80080b8:	3001      	adds	r0, #1
 80080ba:	f000 80a7 	beq.w	800820c <_vfiprintf_r+0x1ec>
 80080be:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80080c0:	445a      	add	r2, fp
 80080c2:	9209      	str	r2, [sp, #36]	@ 0x24
 80080c4:	f89a 3000 	ldrb.w	r3, [sl]
 80080c8:	2b00      	cmp	r3, #0
 80080ca:	f000 809f 	beq.w	800820c <_vfiprintf_r+0x1ec>
 80080ce:	2300      	movs	r3, #0
 80080d0:	f04f 32ff 	mov.w	r2, #4294967295
 80080d4:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80080d8:	f10a 0a01 	add.w	sl, sl, #1
 80080dc:	9304      	str	r3, [sp, #16]
 80080de:	9307      	str	r3, [sp, #28]
 80080e0:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 80080e4:	931a      	str	r3, [sp, #104]	@ 0x68
 80080e6:	4654      	mov	r4, sl
 80080e8:	2205      	movs	r2, #5
 80080ea:	f814 1b01 	ldrb.w	r1, [r4], #1
 80080ee:	4853      	ldr	r0, [pc, #332]	@ (800823c <_vfiprintf_r+0x21c>)
 80080f0:	f7fc febb 	bl	8004e6a <memchr>
 80080f4:	9a04      	ldr	r2, [sp, #16]
 80080f6:	b9d8      	cbnz	r0, 8008130 <_vfiprintf_r+0x110>
 80080f8:	06d1      	lsls	r1, r2, #27
 80080fa:	bf44      	itt	mi
 80080fc:	2320      	movmi	r3, #32
 80080fe:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8008102:	0713      	lsls	r3, r2, #28
 8008104:	bf44      	itt	mi
 8008106:	232b      	movmi	r3, #43	@ 0x2b
 8008108:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800810c:	f89a 3000 	ldrb.w	r3, [sl]
 8008110:	2b2a      	cmp	r3, #42	@ 0x2a
 8008112:	d015      	beq.n	8008140 <_vfiprintf_r+0x120>
 8008114:	4654      	mov	r4, sl
 8008116:	2000      	movs	r0, #0
 8008118:	f04f 0c0a 	mov.w	ip, #10
 800811c:	9a07      	ldr	r2, [sp, #28]
 800811e:	4621      	mov	r1, r4
 8008120:	f811 3b01 	ldrb.w	r3, [r1], #1
 8008124:	3b30      	subs	r3, #48	@ 0x30
 8008126:	2b09      	cmp	r3, #9
 8008128:	d94b      	bls.n	80081c2 <_vfiprintf_r+0x1a2>
 800812a:	b1b0      	cbz	r0, 800815a <_vfiprintf_r+0x13a>
 800812c:	9207      	str	r2, [sp, #28]
 800812e:	e014      	b.n	800815a <_vfiprintf_r+0x13a>
 8008130:	eba0 0308 	sub.w	r3, r0, r8
 8008134:	fa09 f303 	lsl.w	r3, r9, r3
 8008138:	4313      	orrs	r3, r2
 800813a:	46a2      	mov	sl, r4
 800813c:	9304      	str	r3, [sp, #16]
 800813e:	e7d2      	b.n	80080e6 <_vfiprintf_r+0xc6>
 8008140:	9b03      	ldr	r3, [sp, #12]
 8008142:	1d19      	adds	r1, r3, #4
 8008144:	681b      	ldr	r3, [r3, #0]
 8008146:	9103      	str	r1, [sp, #12]
 8008148:	2b00      	cmp	r3, #0
 800814a:	bfbb      	ittet	lt
 800814c:	425b      	neglt	r3, r3
 800814e:	f042 0202 	orrlt.w	r2, r2, #2
 8008152:	9307      	strge	r3, [sp, #28]
 8008154:	9307      	strlt	r3, [sp, #28]
 8008156:	bfb8      	it	lt
 8008158:	9204      	strlt	r2, [sp, #16]
 800815a:	7823      	ldrb	r3, [r4, #0]
 800815c:	2b2e      	cmp	r3, #46	@ 0x2e
 800815e:	d10a      	bne.n	8008176 <_vfiprintf_r+0x156>
 8008160:	7863      	ldrb	r3, [r4, #1]
 8008162:	2b2a      	cmp	r3, #42	@ 0x2a
 8008164:	d132      	bne.n	80081cc <_vfiprintf_r+0x1ac>
 8008166:	9b03      	ldr	r3, [sp, #12]
 8008168:	3402      	adds	r4, #2
 800816a:	1d1a      	adds	r2, r3, #4
 800816c:	681b      	ldr	r3, [r3, #0]
 800816e:	9203      	str	r2, [sp, #12]
 8008170:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8008174:	9305      	str	r3, [sp, #20]
 8008176:	f8df a0c8 	ldr.w	sl, [pc, #200]	@ 8008240 <_vfiprintf_r+0x220>
 800817a:	2203      	movs	r2, #3
 800817c:	4650      	mov	r0, sl
 800817e:	7821      	ldrb	r1, [r4, #0]
 8008180:	f7fc fe73 	bl	8004e6a <memchr>
 8008184:	b138      	cbz	r0, 8008196 <_vfiprintf_r+0x176>
 8008186:	2240      	movs	r2, #64	@ 0x40
 8008188:	9b04      	ldr	r3, [sp, #16]
 800818a:	eba0 000a 	sub.w	r0, r0, sl
 800818e:	4082      	lsls	r2, r0
 8008190:	4313      	orrs	r3, r2
 8008192:	3401      	adds	r4, #1
 8008194:	9304      	str	r3, [sp, #16]
 8008196:	f814 1b01 	ldrb.w	r1, [r4], #1
 800819a:	2206      	movs	r2, #6
 800819c:	4829      	ldr	r0, [pc, #164]	@ (8008244 <_vfiprintf_r+0x224>)
 800819e:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 80081a2:	f7fc fe62 	bl	8004e6a <memchr>
 80081a6:	2800      	cmp	r0, #0
 80081a8:	d03f      	beq.n	800822a <_vfiprintf_r+0x20a>
 80081aa:	4b27      	ldr	r3, [pc, #156]	@ (8008248 <_vfiprintf_r+0x228>)
 80081ac:	bb1b      	cbnz	r3, 80081f6 <_vfiprintf_r+0x1d6>
 80081ae:	9b03      	ldr	r3, [sp, #12]
 80081b0:	3307      	adds	r3, #7
 80081b2:	f023 0307 	bic.w	r3, r3, #7
 80081b6:	3308      	adds	r3, #8
 80081b8:	9303      	str	r3, [sp, #12]
 80081ba:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80081bc:	443b      	add	r3, r7
 80081be:	9309      	str	r3, [sp, #36]	@ 0x24
 80081c0:	e76a      	b.n	8008098 <_vfiprintf_r+0x78>
 80081c2:	460c      	mov	r4, r1
 80081c4:	2001      	movs	r0, #1
 80081c6:	fb0c 3202 	mla	r2, ip, r2, r3
 80081ca:	e7a8      	b.n	800811e <_vfiprintf_r+0xfe>
 80081cc:	2300      	movs	r3, #0
 80081ce:	f04f 0c0a 	mov.w	ip, #10
 80081d2:	4619      	mov	r1, r3
 80081d4:	3401      	adds	r4, #1
 80081d6:	9305      	str	r3, [sp, #20]
 80081d8:	4620      	mov	r0, r4
 80081da:	f810 2b01 	ldrb.w	r2, [r0], #1
 80081de:	3a30      	subs	r2, #48	@ 0x30
 80081e0:	2a09      	cmp	r2, #9
 80081e2:	d903      	bls.n	80081ec <_vfiprintf_r+0x1cc>
 80081e4:	2b00      	cmp	r3, #0
 80081e6:	d0c6      	beq.n	8008176 <_vfiprintf_r+0x156>
 80081e8:	9105      	str	r1, [sp, #20]
 80081ea:	e7c4      	b.n	8008176 <_vfiprintf_r+0x156>
 80081ec:	4604      	mov	r4, r0
 80081ee:	2301      	movs	r3, #1
 80081f0:	fb0c 2101 	mla	r1, ip, r1, r2
 80081f4:	e7f0      	b.n	80081d8 <_vfiprintf_r+0x1b8>
 80081f6:	ab03      	add	r3, sp, #12
 80081f8:	9300      	str	r3, [sp, #0]
 80081fa:	462a      	mov	r2, r5
 80081fc:	4630      	mov	r0, r6
 80081fe:	4b13      	ldr	r3, [pc, #76]	@ (800824c <_vfiprintf_r+0x22c>)
 8008200:	a904      	add	r1, sp, #16
 8008202:	f7fb fec5 	bl	8003f90 <_printf_float>
 8008206:	4607      	mov	r7, r0
 8008208:	1c78      	adds	r0, r7, #1
 800820a:	d1d6      	bne.n	80081ba <_vfiprintf_r+0x19a>
 800820c:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800820e:	07d9      	lsls	r1, r3, #31
 8008210:	d405      	bmi.n	800821e <_vfiprintf_r+0x1fe>
 8008212:	89ab      	ldrh	r3, [r5, #12]
 8008214:	059a      	lsls	r2, r3, #22
 8008216:	d402      	bmi.n	800821e <_vfiprintf_r+0x1fe>
 8008218:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800821a:	f7fc fe25 	bl	8004e68 <__retarget_lock_release_recursive>
 800821e:	89ab      	ldrh	r3, [r5, #12]
 8008220:	065b      	lsls	r3, r3, #25
 8008222:	f53f af1f 	bmi.w	8008064 <_vfiprintf_r+0x44>
 8008226:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8008228:	e71e      	b.n	8008068 <_vfiprintf_r+0x48>
 800822a:	ab03      	add	r3, sp, #12
 800822c:	9300      	str	r3, [sp, #0]
 800822e:	462a      	mov	r2, r5
 8008230:	4630      	mov	r0, r6
 8008232:	4b06      	ldr	r3, [pc, #24]	@ (800824c <_vfiprintf_r+0x22c>)
 8008234:	a904      	add	r1, sp, #16
 8008236:	f7fc f949 	bl	80044cc <_printf_i>
 800823a:	e7e4      	b.n	8008206 <_vfiprintf_r+0x1e6>
 800823c:	080088ab 	.word	0x080088ab
 8008240:	080088b1 	.word	0x080088b1
 8008244:	080088b5 	.word	0x080088b5
 8008248:	08003f91 	.word	0x08003f91
 800824c:	08007ffd 	.word	0x08007ffd

08008250 <__swbuf_r>:
 8008250:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008252:	460e      	mov	r6, r1
 8008254:	4614      	mov	r4, r2
 8008256:	4605      	mov	r5, r0
 8008258:	b118      	cbz	r0, 8008262 <__swbuf_r+0x12>
 800825a:	6a03      	ldr	r3, [r0, #32]
 800825c:	b90b      	cbnz	r3, 8008262 <__swbuf_r+0x12>
 800825e:	f7fc fce9 	bl	8004c34 <__sinit>
 8008262:	69a3      	ldr	r3, [r4, #24]
 8008264:	60a3      	str	r3, [r4, #8]
 8008266:	89a3      	ldrh	r3, [r4, #12]
 8008268:	071a      	lsls	r2, r3, #28
 800826a:	d501      	bpl.n	8008270 <__swbuf_r+0x20>
 800826c:	6923      	ldr	r3, [r4, #16]
 800826e:	b943      	cbnz	r3, 8008282 <__swbuf_r+0x32>
 8008270:	4621      	mov	r1, r4
 8008272:	4628      	mov	r0, r5
 8008274:	f000 f82a 	bl	80082cc <__swsetup_r>
 8008278:	b118      	cbz	r0, 8008282 <__swbuf_r+0x32>
 800827a:	f04f 37ff 	mov.w	r7, #4294967295
 800827e:	4638      	mov	r0, r7
 8008280:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008282:	6823      	ldr	r3, [r4, #0]
 8008284:	6922      	ldr	r2, [r4, #16]
 8008286:	b2f6      	uxtb	r6, r6
 8008288:	1a98      	subs	r0, r3, r2
 800828a:	6963      	ldr	r3, [r4, #20]
 800828c:	4637      	mov	r7, r6
 800828e:	4283      	cmp	r3, r0
 8008290:	dc05      	bgt.n	800829e <__swbuf_r+0x4e>
 8008292:	4621      	mov	r1, r4
 8008294:	4628      	mov	r0, r5
 8008296:	f7ff fa59 	bl	800774c <_fflush_r>
 800829a:	2800      	cmp	r0, #0
 800829c:	d1ed      	bne.n	800827a <__swbuf_r+0x2a>
 800829e:	68a3      	ldr	r3, [r4, #8]
 80082a0:	3b01      	subs	r3, #1
 80082a2:	60a3      	str	r3, [r4, #8]
 80082a4:	6823      	ldr	r3, [r4, #0]
 80082a6:	1c5a      	adds	r2, r3, #1
 80082a8:	6022      	str	r2, [r4, #0]
 80082aa:	701e      	strb	r6, [r3, #0]
 80082ac:	6962      	ldr	r2, [r4, #20]
 80082ae:	1c43      	adds	r3, r0, #1
 80082b0:	429a      	cmp	r2, r3
 80082b2:	d004      	beq.n	80082be <__swbuf_r+0x6e>
 80082b4:	89a3      	ldrh	r3, [r4, #12]
 80082b6:	07db      	lsls	r3, r3, #31
 80082b8:	d5e1      	bpl.n	800827e <__swbuf_r+0x2e>
 80082ba:	2e0a      	cmp	r6, #10
 80082bc:	d1df      	bne.n	800827e <__swbuf_r+0x2e>
 80082be:	4621      	mov	r1, r4
 80082c0:	4628      	mov	r0, r5
 80082c2:	f7ff fa43 	bl	800774c <_fflush_r>
 80082c6:	2800      	cmp	r0, #0
 80082c8:	d0d9      	beq.n	800827e <__swbuf_r+0x2e>
 80082ca:	e7d6      	b.n	800827a <__swbuf_r+0x2a>

080082cc <__swsetup_r>:
 80082cc:	b538      	push	{r3, r4, r5, lr}
 80082ce:	4b29      	ldr	r3, [pc, #164]	@ (8008374 <__swsetup_r+0xa8>)
 80082d0:	4605      	mov	r5, r0
 80082d2:	6818      	ldr	r0, [r3, #0]
 80082d4:	460c      	mov	r4, r1
 80082d6:	b118      	cbz	r0, 80082e0 <__swsetup_r+0x14>
 80082d8:	6a03      	ldr	r3, [r0, #32]
 80082da:	b90b      	cbnz	r3, 80082e0 <__swsetup_r+0x14>
 80082dc:	f7fc fcaa 	bl	8004c34 <__sinit>
 80082e0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80082e4:	0719      	lsls	r1, r3, #28
 80082e6:	d422      	bmi.n	800832e <__swsetup_r+0x62>
 80082e8:	06da      	lsls	r2, r3, #27
 80082ea:	d407      	bmi.n	80082fc <__swsetup_r+0x30>
 80082ec:	2209      	movs	r2, #9
 80082ee:	602a      	str	r2, [r5, #0]
 80082f0:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80082f4:	f04f 30ff 	mov.w	r0, #4294967295
 80082f8:	81a3      	strh	r3, [r4, #12]
 80082fa:	e033      	b.n	8008364 <__swsetup_r+0x98>
 80082fc:	0758      	lsls	r0, r3, #29
 80082fe:	d512      	bpl.n	8008326 <__swsetup_r+0x5a>
 8008300:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8008302:	b141      	cbz	r1, 8008316 <__swsetup_r+0x4a>
 8008304:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8008308:	4299      	cmp	r1, r3
 800830a:	d002      	beq.n	8008312 <__swsetup_r+0x46>
 800830c:	4628      	mov	r0, r5
 800830e:	f7fd fc2b 	bl	8005b68 <_free_r>
 8008312:	2300      	movs	r3, #0
 8008314:	6363      	str	r3, [r4, #52]	@ 0x34
 8008316:	89a3      	ldrh	r3, [r4, #12]
 8008318:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 800831c:	81a3      	strh	r3, [r4, #12]
 800831e:	2300      	movs	r3, #0
 8008320:	6063      	str	r3, [r4, #4]
 8008322:	6923      	ldr	r3, [r4, #16]
 8008324:	6023      	str	r3, [r4, #0]
 8008326:	89a3      	ldrh	r3, [r4, #12]
 8008328:	f043 0308 	orr.w	r3, r3, #8
 800832c:	81a3      	strh	r3, [r4, #12]
 800832e:	6923      	ldr	r3, [r4, #16]
 8008330:	b94b      	cbnz	r3, 8008346 <__swsetup_r+0x7a>
 8008332:	89a3      	ldrh	r3, [r4, #12]
 8008334:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8008338:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800833c:	d003      	beq.n	8008346 <__swsetup_r+0x7a>
 800833e:	4621      	mov	r1, r4
 8008340:	4628      	mov	r0, r5
 8008342:	f000 f882 	bl	800844a <__smakebuf_r>
 8008346:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800834a:	f013 0201 	ands.w	r2, r3, #1
 800834e:	d00a      	beq.n	8008366 <__swsetup_r+0x9a>
 8008350:	2200      	movs	r2, #0
 8008352:	60a2      	str	r2, [r4, #8]
 8008354:	6962      	ldr	r2, [r4, #20]
 8008356:	4252      	negs	r2, r2
 8008358:	61a2      	str	r2, [r4, #24]
 800835a:	6922      	ldr	r2, [r4, #16]
 800835c:	b942      	cbnz	r2, 8008370 <__swsetup_r+0xa4>
 800835e:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8008362:	d1c5      	bne.n	80082f0 <__swsetup_r+0x24>
 8008364:	bd38      	pop	{r3, r4, r5, pc}
 8008366:	0799      	lsls	r1, r3, #30
 8008368:	bf58      	it	pl
 800836a:	6962      	ldrpl	r2, [r4, #20]
 800836c:	60a2      	str	r2, [r4, #8]
 800836e:	e7f4      	b.n	800835a <__swsetup_r+0x8e>
 8008370:	2000      	movs	r0, #0
 8008372:	e7f7      	b.n	8008364 <__swsetup_r+0x98>
 8008374:	20000018 	.word	0x20000018

08008378 <_raise_r>:
 8008378:	291f      	cmp	r1, #31
 800837a:	b538      	push	{r3, r4, r5, lr}
 800837c:	4605      	mov	r5, r0
 800837e:	460c      	mov	r4, r1
 8008380:	d904      	bls.n	800838c <_raise_r+0x14>
 8008382:	2316      	movs	r3, #22
 8008384:	6003      	str	r3, [r0, #0]
 8008386:	f04f 30ff 	mov.w	r0, #4294967295
 800838a:	bd38      	pop	{r3, r4, r5, pc}
 800838c:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 800838e:	b112      	cbz	r2, 8008396 <_raise_r+0x1e>
 8008390:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8008394:	b94b      	cbnz	r3, 80083aa <_raise_r+0x32>
 8008396:	4628      	mov	r0, r5
 8008398:	f000 f830 	bl	80083fc <_getpid_r>
 800839c:	4622      	mov	r2, r4
 800839e:	4601      	mov	r1, r0
 80083a0:	4628      	mov	r0, r5
 80083a2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80083a6:	f000 b817 	b.w	80083d8 <_kill_r>
 80083aa:	2b01      	cmp	r3, #1
 80083ac:	d00a      	beq.n	80083c4 <_raise_r+0x4c>
 80083ae:	1c59      	adds	r1, r3, #1
 80083b0:	d103      	bne.n	80083ba <_raise_r+0x42>
 80083b2:	2316      	movs	r3, #22
 80083b4:	6003      	str	r3, [r0, #0]
 80083b6:	2001      	movs	r0, #1
 80083b8:	e7e7      	b.n	800838a <_raise_r+0x12>
 80083ba:	2100      	movs	r1, #0
 80083bc:	4620      	mov	r0, r4
 80083be:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 80083c2:	4798      	blx	r3
 80083c4:	2000      	movs	r0, #0
 80083c6:	e7e0      	b.n	800838a <_raise_r+0x12>

080083c8 <raise>:
 80083c8:	4b02      	ldr	r3, [pc, #8]	@ (80083d4 <raise+0xc>)
 80083ca:	4601      	mov	r1, r0
 80083cc:	6818      	ldr	r0, [r3, #0]
 80083ce:	f7ff bfd3 	b.w	8008378 <_raise_r>
 80083d2:	bf00      	nop
 80083d4:	20000018 	.word	0x20000018

080083d8 <_kill_r>:
 80083d8:	b538      	push	{r3, r4, r5, lr}
 80083da:	2300      	movs	r3, #0
 80083dc:	4d06      	ldr	r5, [pc, #24]	@ (80083f8 <_kill_r+0x20>)
 80083de:	4604      	mov	r4, r0
 80083e0:	4608      	mov	r0, r1
 80083e2:	4611      	mov	r1, r2
 80083e4:	602b      	str	r3, [r5, #0]
 80083e6:	f7f9 faf0 	bl	80019ca <_kill>
 80083ea:	1c43      	adds	r3, r0, #1
 80083ec:	d102      	bne.n	80083f4 <_kill_r+0x1c>
 80083ee:	682b      	ldr	r3, [r5, #0]
 80083f0:	b103      	cbz	r3, 80083f4 <_kill_r+0x1c>
 80083f2:	6023      	str	r3, [r4, #0]
 80083f4:	bd38      	pop	{r3, r4, r5, pc}
 80083f6:	bf00      	nop
 80083f8:	200007b8 	.word	0x200007b8

080083fc <_getpid_r>:
 80083fc:	f7f9 bade 	b.w	80019bc <_getpid>

08008400 <__swhatbuf_r>:
 8008400:	b570      	push	{r4, r5, r6, lr}
 8008402:	460c      	mov	r4, r1
 8008404:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008408:	4615      	mov	r5, r2
 800840a:	2900      	cmp	r1, #0
 800840c:	461e      	mov	r6, r3
 800840e:	b096      	sub	sp, #88	@ 0x58
 8008410:	da0c      	bge.n	800842c <__swhatbuf_r+0x2c>
 8008412:	89a3      	ldrh	r3, [r4, #12]
 8008414:	2100      	movs	r1, #0
 8008416:	f013 0f80 	tst.w	r3, #128	@ 0x80
 800841a:	bf14      	ite	ne
 800841c:	2340      	movne	r3, #64	@ 0x40
 800841e:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8008422:	2000      	movs	r0, #0
 8008424:	6031      	str	r1, [r6, #0]
 8008426:	602b      	str	r3, [r5, #0]
 8008428:	b016      	add	sp, #88	@ 0x58
 800842a:	bd70      	pop	{r4, r5, r6, pc}
 800842c:	466a      	mov	r2, sp
 800842e:	f000 f849 	bl	80084c4 <_fstat_r>
 8008432:	2800      	cmp	r0, #0
 8008434:	dbed      	blt.n	8008412 <__swhatbuf_r+0x12>
 8008436:	9901      	ldr	r1, [sp, #4]
 8008438:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 800843c:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8008440:	4259      	negs	r1, r3
 8008442:	4159      	adcs	r1, r3
 8008444:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8008448:	e7eb      	b.n	8008422 <__swhatbuf_r+0x22>

0800844a <__smakebuf_r>:
 800844a:	898b      	ldrh	r3, [r1, #12]
 800844c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800844e:	079d      	lsls	r5, r3, #30
 8008450:	4606      	mov	r6, r0
 8008452:	460c      	mov	r4, r1
 8008454:	d507      	bpl.n	8008466 <__smakebuf_r+0x1c>
 8008456:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 800845a:	6023      	str	r3, [r4, #0]
 800845c:	6123      	str	r3, [r4, #16]
 800845e:	2301      	movs	r3, #1
 8008460:	6163      	str	r3, [r4, #20]
 8008462:	b003      	add	sp, #12
 8008464:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008466:	466a      	mov	r2, sp
 8008468:	ab01      	add	r3, sp, #4
 800846a:	f7ff ffc9 	bl	8008400 <__swhatbuf_r>
 800846e:	9f00      	ldr	r7, [sp, #0]
 8008470:	4605      	mov	r5, r0
 8008472:	4639      	mov	r1, r7
 8008474:	4630      	mov	r0, r6
 8008476:	f7fd fbe9 	bl	8005c4c <_malloc_r>
 800847a:	b948      	cbnz	r0, 8008490 <__smakebuf_r+0x46>
 800847c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008480:	059a      	lsls	r2, r3, #22
 8008482:	d4ee      	bmi.n	8008462 <__smakebuf_r+0x18>
 8008484:	f023 0303 	bic.w	r3, r3, #3
 8008488:	f043 0302 	orr.w	r3, r3, #2
 800848c:	81a3      	strh	r3, [r4, #12]
 800848e:	e7e2      	b.n	8008456 <__smakebuf_r+0xc>
 8008490:	89a3      	ldrh	r3, [r4, #12]
 8008492:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8008496:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800849a:	81a3      	strh	r3, [r4, #12]
 800849c:	9b01      	ldr	r3, [sp, #4]
 800849e:	6020      	str	r0, [r4, #0]
 80084a0:	b15b      	cbz	r3, 80084ba <__smakebuf_r+0x70>
 80084a2:	4630      	mov	r0, r6
 80084a4:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80084a8:	f000 f81e 	bl	80084e8 <_isatty_r>
 80084ac:	b128      	cbz	r0, 80084ba <__smakebuf_r+0x70>
 80084ae:	89a3      	ldrh	r3, [r4, #12]
 80084b0:	f023 0303 	bic.w	r3, r3, #3
 80084b4:	f043 0301 	orr.w	r3, r3, #1
 80084b8:	81a3      	strh	r3, [r4, #12]
 80084ba:	89a3      	ldrh	r3, [r4, #12]
 80084bc:	431d      	orrs	r5, r3
 80084be:	81a5      	strh	r5, [r4, #12]
 80084c0:	e7cf      	b.n	8008462 <__smakebuf_r+0x18>
	...

080084c4 <_fstat_r>:
 80084c4:	b538      	push	{r3, r4, r5, lr}
 80084c6:	2300      	movs	r3, #0
 80084c8:	4d06      	ldr	r5, [pc, #24]	@ (80084e4 <_fstat_r+0x20>)
 80084ca:	4604      	mov	r4, r0
 80084cc:	4608      	mov	r0, r1
 80084ce:	4611      	mov	r1, r2
 80084d0:	602b      	str	r3, [r5, #0]
 80084d2:	f7f9 fad9 	bl	8001a88 <_fstat>
 80084d6:	1c43      	adds	r3, r0, #1
 80084d8:	d102      	bne.n	80084e0 <_fstat_r+0x1c>
 80084da:	682b      	ldr	r3, [r5, #0]
 80084dc:	b103      	cbz	r3, 80084e0 <_fstat_r+0x1c>
 80084de:	6023      	str	r3, [r4, #0]
 80084e0:	bd38      	pop	{r3, r4, r5, pc}
 80084e2:	bf00      	nop
 80084e4:	200007b8 	.word	0x200007b8

080084e8 <_isatty_r>:
 80084e8:	b538      	push	{r3, r4, r5, lr}
 80084ea:	2300      	movs	r3, #0
 80084ec:	4d05      	ldr	r5, [pc, #20]	@ (8008504 <_isatty_r+0x1c>)
 80084ee:	4604      	mov	r4, r0
 80084f0:	4608      	mov	r0, r1
 80084f2:	602b      	str	r3, [r5, #0]
 80084f4:	f7f9 fad7 	bl	8001aa6 <_isatty>
 80084f8:	1c43      	adds	r3, r0, #1
 80084fa:	d102      	bne.n	8008502 <_isatty_r+0x1a>
 80084fc:	682b      	ldr	r3, [r5, #0]
 80084fe:	b103      	cbz	r3, 8008502 <_isatty_r+0x1a>
 8008500:	6023      	str	r3, [r4, #0]
 8008502:	bd38      	pop	{r3, r4, r5, pc}
 8008504:	200007b8 	.word	0x200007b8

08008508 <_init>:
 8008508:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800850a:	bf00      	nop
 800850c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800850e:	bc08      	pop	{r3}
 8008510:	469e      	mov	lr, r3
 8008512:	4770      	bx	lr

08008514 <_fini>:
 8008514:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008516:	bf00      	nop
 8008518:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800851a:	bc08      	pop	{r3}
 800851c:	469e      	mov	lr, r3
 800851e:	4770      	bx	lr
